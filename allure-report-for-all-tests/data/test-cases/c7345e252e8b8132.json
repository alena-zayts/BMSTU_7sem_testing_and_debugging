{"uid":"c7345e252e8b8132","name":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 8, initialSlopes: [Slope { SlopeID = 168, SlopeName = slopeName5e880c2d-ced8-49ac-8f31-bbed2588d45d, IsOpen = True, DifficultyLevel = 75, ConnectedLifts =  }, Slope { SlopeID = 131, SlopeName = slopeNamebe37cc16-08d5-4745-aee6-1749e341fd40, IsOpen = False, DifficultyLevel = 211, ConnectedLifts =  }, Slope { SlopeID = 56, SlopeName = slopeName649e68ba-5956-4210-88c6-cdf1b2a3f503, IsOpen = True, DifficultyLevel = 117, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","fullName":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 8, initialSlopes: [Slope { SlopeID = 168, SlopeName = slopeName5e880c2d-ced8-49ac-8f31-bbed2588d45d, IsOpen = True, DifficultyLevel = 75, ConnectedLifts =  }, Slope { SlopeID = 131, SlopeName = slopeNamebe37cc16-08d5-4745-aee6-1749e341fd40, IsOpen = False, DifficultyLevel = 211, ConnectedLifts =  }, Slope { SlopeID = 56, SlopeName = slopeName649e68ba-5956-4210-88c6-cdf1b2a3f503, IsOpen = True, DifficultyLevel = 117, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","historyId":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 8, initialSlopes: [Slope { SlopeID = 168, SlopeName = slopeName5e880c2d-ced8-49ac-8f31-bbed2588d45d, IsOpen = True, DifficultyLevel = 75, ConnectedLifts =  }, Slope { SlopeID = 131, SlopeName = slopeNamebe37cc16-08d5-4745-aee6-1749e341fd40, IsOpen = False, DifficultyLevel = 211, ConnectedLifts =  }, Slope { SlopeID = 56, SlopeName = slopeName649e68ba-5956-4210-88c6-cdf1b2a3f503, IsOpen = True, DifficultyLevel = 117, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","time":{"start":1667460252779,"stop":1667460252798,"duration":19},"status":"passed","statusMessage":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"BL.Tests.SlopesServiceTest"},{"name":"testMethod","value":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 8, initialSlopes: [Slope { SlopeID = 168, SlopeName = slopeName5e880c2d-ced8-49ac-8f31-bbed2588d45d, IsOpen = True, DifficultyLevel = 75, ConnectedLifts =  }, Slope { SlopeID = 131, SlopeName = slopeNamebe37cc16-08d5-4745-aee6-1749e341fd40, IsOpen = False, DifficultyLevel = 211, ConnectedLifts =  }, Slope { SlopeID = 56, SlopeName = slopeName649e68ba-5956-4210-88c6-cdf1b2a3f503, IsOpen = True, DifficultyLevel = 117, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })"},{"name":"package","value":"BL.Tests.SlopesServiceTest"},{"name":"suite","value":"SlopesServiceSuite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"c7345e252e8b8132.json","parameterValues":[]}