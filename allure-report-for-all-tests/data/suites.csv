"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","8","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 243, slope: Slope { SlopeID = 102, SlopeName = slopeName32cd27f1-6e3a-4834-8aee-005966b4e5c8, IsOpen = True, DifficultyLevel = 194, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 243, slope: Slope { SlopeID = 102, SlopeName = slopeName32cd27f1-6e3a-4834-8aee-005966b4e5c8, IsOpen = True, DifficultyLevel = 194, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","66","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 72, lift: Lift { LiftID = 187, LiftName = liftNamefd91593e-0e77-4783-8359-c194f2e4b810, IsOpen = True, SeatsAmount = 6, LiftingTime = 20, QueueTime = 223, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 72, lift: Lift { LiftID = 187, LiftName = liftNamefd91593e-0e77-4783-8359-c194f2e4b810, IsOpen = True, SeatsAmount = 6, LiftingTime = 20, QueueTime = 223, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","7","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","66","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 43, initialTurnstiles: [Turnstile { TurnstileID = 9, LiftID = 112, IsOpen = True }, Turnstile { TurnstileID = 167, LiftID = 30, IsOpen = False }, Turnstile { TurnstileID = 125, LiftID = 198, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 43, initialTurnstiles: [Turnstile { TurnstileID = 9, LiftID = 112, IsOpen = True }, Turnstile { TurnstileID = 167, LiftID = 30, IsOpen = False }, Turnstile { TurnstileID = 125, LiftID = 198, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","7","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 149, turnstile: Turnstile { TurnstileID = 25, LiftID = 48, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 149, turnstile: Turnstile { TurnstileID = 25, LiftID = 48, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","30","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 204, initialSlopes: [Slope { SlopeID = 29, SlopeName = slopeNamed3d2960b-9d20-4f04-a4f9-35933a3c2239, IsOpen = True, DifficultyLevel = 14, ConnectedLifts =  }, Slope { SlopeID = 207, SlopeName = slopeName8e797bf4-f7f9-4cfa-9eb8-cfe34ffc741c, IsOpen = False, DifficultyLevel = 89, ConnectedLifts =  }, Slope { SlopeID = 9, SlopeName = slopeNamef7320a09-3d61-4f51-aa26-5d86eb416163, IsOpen = True, DifficultyLevel = 81, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 204, initialSlopes: [Slope { SlopeID = 29, SlopeName = slopeNamed3d2960b-9d20-4f04-a4f9-35933a3c2239, IsOpen = True, DifficultyLevel = 14, ConnectedLifts =  }, Slope { SlopeID = 207, SlopeName = slopeName8e797bf4-f7f9-4cfa-9eb8-cfe34ffc741c, IsOpen = False, DifficultyLevel = 89, ConnectedLifts =  }, Slope { SlopeID = 9, SlopeName = slopeNamef7320a09-3d61-4f51-aa26-5d86eb416163, IsOpen = True, DifficultyLevel = 81, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 237, turnstile: Turnstile { TurnstileID = 240, LiftID = 34, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 237, turnstile: Turnstile { TurnstileID = 240, LiftID = 34, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","11","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 136, slope: Slope { SlopeID = 98, SlopeName = slopeNamea4c48631-5f1c-4b86-9fa0-ed1d71ecd012, IsOpen = True, DifficultyLevel = 160, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 136, slope: Slope { SlopeID = 98, SlopeName = slopeNamea4c48631-5f1c-4b86-9fa0-ed1d71ecd012, IsOpen = True, DifficultyLevel = 160, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","6","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminUpdateUser","BL.Tests.UsersServiceTests.TestAdminUpdateUser",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","8","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 204, lift: Lift { LiftID = 107, LiftName = liftName1cb3cdf8-e6b7-4a3b-8414-4b09bc83aef8, IsOpen = True, SeatsAmount = 98, LiftingTime = 168, QueueTime = 58, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 204, lift: Lift { LiftID = 107, LiftName = liftName1cb3cdf8-e6b7-4a3b-8414-4b09bc83aef8, IsOpen = True, SeatsAmount = 98, LiftingTime = 168, QueueTime = 58, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","28","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 197, initialLifts: [Lift { LiftID = 45, LiftName = liftName36055c8d-9760-4a6a-bb38-632f1add32db, IsOpen = True, SeatsAmount = 243, LiftingTime = 160, QueueTime = 34, ConnectedSlopes =  }, Lift { LiftID = 169, LiftName = liftName72d8d301-a056-4deb-bcdf-b9d3173b1c4b, IsOpen = False, SeatsAmount = 116, LiftingTime = 105, QueueTime = 51, ConnectedSlopes =  }, Lift { LiftID = 119, LiftName = liftName9faf4361-e4ef-4a44-acbd-8deb6352b08d, IsOpen = True, SeatsAmount = 136, LiftingTime = 218, QueueTime = 226, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 197, initialLifts: [Lift { LiftID = 45, LiftName = liftName36055c8d-9760-4a6a-bb38-632f1add32db, IsOpen = True, SeatsAmount = 243, LiftingTime = 160, QueueTime = 34, ConnectedSlopes =  }, Lift { LiftID = 169, LiftName = liftName72d8d301-a056-4deb-bcdf-b9d3173b1c4b, IsOpen = False, SeatsAmount = 116, LiftingTime = 105, QueueTime = 51, ConnectedSlopes =  }, Lift { LiftID = 119, LiftName = liftName9faf4361-e4ef-4a44-acbd-8deb6352b08d, IsOpen = True, SeatsAmount = 136, LiftingTime = 218, QueueTime = 226, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","8","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","4","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","66","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","8","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 234, LiftName = liftNamea6408984-2912-4e50-aca8-2752d006bcb7, IsOpen = True, SeatsAmount = 214, LiftingTime = 36, QueueTime = 218, ConnectedSlopes =  }, slope: Slope { SlopeID = 135, SlopeName = slopeName9a59f343-cac5-4b3a-a1d8-f096b8182c3a, IsOpen = False, DifficultyLevel = 69, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 234, LiftName = liftNamea6408984-2912-4e50-aca8-2752d006bcb7, IsOpen = True, SeatsAmount = 214, LiftingTime = 36, QueueTime = 218, ConnectedSlopes =  }, slope: Slope { SlopeID = 135, SlopeName = slopeName9a59f343-cac5-4b3a-a1d8-f096b8182c3a, IsOpen = False, DifficultyLevel = 69, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 101, turnstile: Turnstile { TurnstileID = 166, LiftID = 212, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 101, turnstile: Turnstile { TurnstileID = 166, LiftID = 212, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","8","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 235, LiftName = liftName13da33ad-44f1-4f4f-80f1-192ffdc9023f, IsOpen = True, SeatsAmount = 223, LiftingTime = 212, QueueTime = 25, ConnectedSlopes =  }, slope: Slope { SlopeID = 84, SlopeName = slopeNamebfdaaf24-7c20-4196-ab4e-97dd9c74a75c, IsOpen = False, DifficultyLevel = 39, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 235, LiftName = liftName13da33ad-44f1-4f4f-80f1-192ffdc9023f, IsOpen = True, SeatsAmount = 223, LiftingTime = 212, QueueTime = 25, ConnectedSlopes =  }, slope: Slope { SlopeID = 84, SlopeName = slopeNamebfdaaf24-7c20-4196-ab4e-97dd9c74a75c, IsOpen = False, DifficultyLevel = 39, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","66","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 200, slope: Slope { SlopeID = 175, SlopeName = slopeName393fccad-57a6-4c07-bec3-9dcbcc0c9120, IsOpen = True, DifficultyLevel = 39, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 200, slope: Slope { SlopeID = 175, SlopeName = slopeName393fccad-57a6-4c07-bec3-9dcbcc0c9120, IsOpen = True, DifficultyLevel = 39, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","11","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 88, lift: Lift { LiftID = 135, LiftName = liftName259ff6d1-d26f-432d-81fa-5ec5f619c983, IsOpen = True, SeatsAmount = 111, LiftingTime = 131, QueueTime = 223, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 88, lift: Lift { LiftID = 135, LiftName = liftName259ff6d1-d26f-432d-81fa-5ec5f619c983, IsOpen = True, SeatsAmount = 111, LiftingTime = 131, QueueTime = 223, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 14, slope: Slope { SlopeID = 243, SlopeName = slopeName56f042a2-487b-4c07-87f3-5aac007ec352, IsOpen = True, DifficultyLevel = 213, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 14, slope: Slope { SlopeID = 243, SlopeName = slopeName56f042a2-487b-4c07-87f3-5aac007ec352, IsOpen = True, DifficultyLevel = 213, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInOk","BL.Tests.UsersServiceTests.TestLogInOk",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","15","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterOk","BL.Tests.UsersServiceTests.TestRegisterOk",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","68","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 18, LiftID = 2, SlopeID = 168 }, LiftSlope { RecordID = 231, LiftID = 243, SlopeID = 162 }, LiftSlope { RecordID = 191, LiftID = 103, SlopeID = 197 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 18, LiftID = 2, SlopeID = 168 }, LiftSlope { RecordID = 231, LiftID = 243, SlopeID = 162 }, LiftSlope { RecordID = 191, LiftID = 103, SlopeID = 197 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","68","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUsers","BL.Tests.UsersServiceTests.TestAdminGetUsers",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync",""
"passed","Thu Nov 03 11:23:37 MSK 2022","Thu Nov 03 11:23:37 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminDeleteUser","BL.Tests.UsersServiceTests.TestAdminDeleteUser",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","5","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 251, turnstile: Turnstile { TurnstileID = 253, LiftID = 5, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 251, turnstile: Turnstile { TurnstileID = 253, LiftID = 5, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","5","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","7","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 91, lift: Lift { LiftID = 230, LiftName = liftName8d72e919-4dc1-4ad6-bb07-e0ba1f4f9c2d, IsOpen = True, SeatsAmount = 121, LiftingTime = 233, QueueTime = 56, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 91, lift: Lift { LiftID = 230, LiftName = liftName8d72e919-4dc1-4ad6-bb07-e0ba1f4f9c2d, IsOpen = True, SeatsAmount = 121, LiftingTime = 233, QueueTime = 56, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 73, slope: Slope { SlopeID = 184, SlopeName = slopeNameafd4efc0-cdfe-471d-a270-735eb6195e06, IsOpen = True, DifficultyLevel = 129, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 73, slope: Slope { SlopeID = 184, SlopeName = slopeNameafd4efc0-cdfe-471d-a270-735eb6195e06, IsOpen = True, DifficultyLevel = 129, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 11:23:38 MSK 2022","Thu Nov 03 11:23:38 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword",""
"passed","Thu Nov 03 11:24:06 MSK 2022","Thu Nov 03 11:24:06 MSK 2022","395","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk",""
"passed","Thu Nov 03 11:23:57 MSK 2022","Thu Nov 03 11:23:57 MSK 2022","395","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 99, LiftID = 55, SlopeID = 141 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 99, LiftID = 55, SlopeID = 141 })",""
"passed","Thu Nov 03 11:23:54 MSK 2022","Thu Nov 03 11:23:54 MSK 2022","386","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 116, LiftID = 251, SlopeID = 220 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 116, LiftID = 251, SlopeID = 220 })",""
"passed","Thu Nov 03 11:24:01 MSK 2022","Thu Nov 03 11:24:01 MSK 2022","402","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk",""
"passed","Thu Nov 03 11:23:53 MSK 2022","Thu Nov 03 11:23:53 MSK 2022","370","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 191)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 191)",""
"passed","Thu Nov 03 11:23:51 MSK 2022","Thu Nov 03 11:23:52 MSK 2022","395","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 3, LiftName = liftNameb9c53e0c-bc44-4034-81a4-091042701dfc, IsOpen = True, SeatsAmount = 104, LiftingTime = 13, QueueTime = 144, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 3, LiftName = liftNameb9c53e0c-bc44-4034-81a4-091042701dfc, IsOpen = True, SeatsAmount = 104, LiftingTime = 13, QueueTime = 144, ConnectedSlopes =  })",""
"passed","Thu Nov 03 11:24:00 MSK 2022","Thu Nov 03 11:24:00 MSK 2022","398","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 67, CardID = 82, UserEmail = UserEmail0c417210-66ce-45e3-8e6e-4e23149e3772, Password = password93c7dd10-fe43-44e6-8c9a-0e1a9ea574e3, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 67, CardID = 82, UserEmail = UserEmail0c417210-66ce-45e3-8e6e-4e23149e3772, Password = password93c7dd10-fe43-44e6-8c9a-0e1a9ea574e3, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 11:23:59 MSK 2022","Thu Nov 03 11:24:00 MSK 2022","363","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email81cad583-9208-43f0-b9f4-7c51d807f1d5"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email81cad583-9208-43f0-b9f4-7c51d807f1d5"")",""
"passed","Thu Nov 03 11:23:58 MSK 2022","Thu Nov 03 11:23:59 MSK 2022","399","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 156, CardID = 250, UserEmail = UserEmail0cfb16fc-2fb5-4fa4-ab1f-f2dce45b1ef9, Password = password704d3f3d-7ec1-4c26-8772-a60751c63263, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 156, CardID = 250, UserEmail = UserEmail0cfb16fc-2fb5-4fa4-ab1f-f2dce45b1ef9, Password = password704d3f3d-7ec1-4c26-8772-a60751c63263, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 11:23:53 MSK 2022","Thu Nov 03 11:23:53 MSK 2022","361","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName7b86a5f9-7bbc-4290-90bc-86adb7d9fcb8"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName7b86a5f9-7bbc-4290-90bc-86adb7d9fcb8"")",""
"passed","Thu Nov 03 11:24:07 MSK 2022","Thu Nov 03 11:24:07 MSK 2022","361","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName61cfbe58-9e73-4841-b512-81be6c9891b3"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName61cfbe58-9e73-4841-b512-81be6c9891b3"")",""
"passed","Thu Nov 03 11:23:58 MSK 2022","Thu Nov 03 11:23:58 MSK 2022","363","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 34)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 34)",""
"passed","Thu Nov 03 11:24:06 MSK 2022","Thu Nov 03 11:24:06 MSK 2022","364","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty",""
"passed","Thu Nov 03 11:23:56 MSK 2022","Thu Nov 03 11:23:57 MSK 2022","362","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty",""
"passed","Thu Nov 03 11:24:03 MSK 2022","Thu Nov 03 11:24:03 MSK 2022","382","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 187, LiftID = 181, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 187, LiftID = 181, IsOpen = True })",""
"passed","Thu Nov 03 11:23:55 MSK 2022","Thu Nov 03 11:23:55 MSK 2022","395","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 32, LiftID = 112, SlopeID = 108 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 32, LiftID = 112, SlopeID = 108 })",""
"passed","Thu Nov 03 11:23:52 MSK 2022","Thu Nov 03 11:23:53 MSK 2022","383","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 150, LiftName = liftNamedc533b6c-f468-4ca3-949c-6c035e1631d1, IsOpen = True, SeatsAmount = 147, LiftingTime = 190, QueueTime = 37, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 150, LiftName = liftNamedc533b6c-f468-4ca3-949c-6c035e1631d1, IsOpen = True, SeatsAmount = 147, LiftingTime = 190, QueueTime = 37, ConnectedSlopes =  })",""
"passed","Thu Nov 03 11:23:52 MSK 2022","Thu Nov 03 11:23:52 MSK 2022","362","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty",""
"passed","Thu Nov 03 11:24:04 MSK 2022","Thu Nov 03 11:24:04 MSK 2022","492","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 8)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 8)",""
"passed","Thu Nov 03 11:23:57 MSK 2022","Thu Nov 03 11:23:58 MSK 2022","424","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 166, SlopeName = slopeName304dd3c4-cf28-4d19-923f-2fc9627b8600, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  }, slope2: Slope { SlopeID = 26, SlopeName = slopeName370a55bf-0eb7-46aa-bd56-634fffcbc7da, IsOpen = False, DifficultyLevel = 196, ConnectedLifts =  }, lift1: Lift { LiftID = 68, LiftName = liftName53b72ff5-d7af-4ee9-8f36-c2d4fa476bcb, IsOpen = True, SeatsAmount = 178, LiftingTime = 253, QueueTime = 244, ConnectedSlopes =  }, lift2: Lift { LiftID = 214, LiftName = liftName9bc858c2-fc35-4e52-a688-6015c0b84f01, IsOpen = False, SeatsAmount = 175, LiftingTime = 19, QueueTime = 160, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 166, SlopeName = slopeName304dd3c4-cf28-4d19-923f-2fc9627b8600, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  }, slope2: Slope { SlopeID = 26, SlopeName = slopeName370a55bf-0eb7-46aa-bd56-634fffcbc7da, IsOpen = False, DifficultyLevel = 196, ConnectedLifts =  }, lift1: Lift { LiftID = 68, LiftName = liftName53b72ff5-d7af-4ee9-8f36-c2d4fa476bcb, IsOpen = True, SeatsAmount = 178, LiftingTime = 253, QueueTime = 244, ConnectedSlopes =  }, lift2: Lift { LiftID = 214, LiftName = liftName9bc858c2-fc35-4e52-a688-6015c0b84f01, IsOpen = False, SeatsAmount = 175, LiftingTime = 19, QueueTime = 160, ConnectedSlopes =  })",""
"passed","Thu Nov 03 11:23:55 MSK 2022","Thu Nov 03 11:23:55 MSK 2022","392","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 100, LiftID = 112, SlopeID = 237 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 100, LiftID = 112, SlopeID = 237 })",""
"passed","Thu Nov 03 11:24:05 MSK 2022","Thu Nov 03 11:24:06 MSK 2022","368","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 195)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 195)",""
"passed","Thu Nov 03 11:23:54 MSK 2022","Thu Nov 03 11:23:55 MSK 2022","378","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 112)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 112)",""
"passed","Thu Nov 03 11:24:05 MSK 2022","Thu Nov 03 11:24:05 MSK 2022","384","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 232, SlopeName = slopeName54a45553-9a2e-4e50-b5cf-a152773bdf9b, IsOpen = True, DifficultyLevel = 170, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 232, SlopeName = slopeName54a45553-9a2e-4e50-b5cf-a152773bdf9b, IsOpen = True, DifficultyLevel = 170, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:23:51 MSK 2022","Thu Nov 03 11:23:51 MSK 2022","497","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk",""
"passed","Thu Nov 03 11:24:02 MSK 2022","Thu Nov 03 11:24:02 MSK 2022","397","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 2, LiftID = 152, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 2, LiftID = 152, IsOpen = True })",""
"passed","Thu Nov 03 11:24:02 MSK 2022","Thu Nov 03 11:24:03 MSK 2022","392","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 239, LiftID = 58, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 239, LiftID = 58, IsOpen = True })",""
"passed","Thu Nov 03 11:23:53 MSK 2022","Thu Nov 03 11:23:54 MSK 2022","397","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 132, LiftName = liftNamebd8e30e3-3ee3-4564-b697-dacdf435c0f4, IsOpen = True, SeatsAmount = 83, LiftingTime = 135, QueueTime = 34, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 132, LiftName = liftNamebd8e30e3-3ee3-4564-b697-dacdf435c0f4, IsOpen = True, SeatsAmount = 83, LiftingTime = 135, QueueTime = 34, ConnectedSlopes =  })",""
"passed","Thu Nov 03 11:24:03 MSK 2022","Thu Nov 03 11:24:04 MSK 2022","362","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 57)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 57)",""
"passed","Thu Nov 03 11:24:02 MSK 2022","Thu Nov 03 11:24:02 MSK 2022","392","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk",""
"passed","Thu Nov 03 11:24:00 MSK 2022","Thu Nov 03 11:24:01 MSK 2022","362","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail82164068-64d2-4e65-9afa-63bf1ede9472"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail82164068-64d2-4e65-9afa-63bf1ede9472"")",""
"passed","Thu Nov 03 11:24:01 MSK 2022","Thu Nov 03 11:24:02 MSK 2022","363","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty",""
"passed","Thu Nov 03 11:23:59 MSK 2022","Thu Nov 03 11:23:59 MSK 2022","387","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 152, CardID = 140, UserEmail = UserEmailc9b6c19d-1f76-4b99-a044-6e60d9968f09, Password = passwordc11298c1-74d0-4edd-94d8-dabef7d6d828, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 152, CardID = 140, UserEmail = UserEmailc9b6c19d-1f76-4b99-a044-6e60d9968f09, Password = passwordc11298c1-74d0-4edd-94d8-dabef7d6d828, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 11:24:00 MSK 2022","Thu Nov 03 11:24:00 MSK 2022","392","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 245, CardID = 39, UserEmail = UserEmail4da9483c-3921-4cc7-bad3-1d683c353a3f, Password = passwordedbccc59-67d1-44a9-8b42-76a0373790e1, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 245, CardID = 39, UserEmail = UserEmail4da9483c-3921-4cc7-bad3-1d683c353a3f, Password = passwordedbccc59-67d1-44a9-8b42-76a0373790e1, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 11:23:55 MSK 2022","Thu Nov 03 11:23:56 MSK 2022","406","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 237, LiftID = 255, SlopeID = 208 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 237, LiftID = 255, SlopeID = 208 })",""
"passed","Thu Nov 03 11:23:56 MSK 2022","Thu Nov 03 11:23:56 MSK 2022","402","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk",""
"passed","Thu Nov 03 11:24:05 MSK 2022","Thu Nov 03 11:24:05 MSK 2022","393","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 41, SlopeName = slopeName6505457e-bd0f-4714-a0ac-59ce1aa4fa17, IsOpen = True, DifficultyLevel = 129, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 41, SlopeName = slopeName6505457e-bd0f-4714-a0ac-59ce1aa4fa17, IsOpen = True, DifficultyLevel = 129, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:23:58 MSK 2022","Thu Nov 03 11:23:58 MSK 2022","363","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty",""
"passed","Thu Nov 03 11:24:04 MSK 2022","Thu Nov 03 11:24:04 MSK 2022","395","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 171, SlopeName = slopeName461af83d-addb-41b3-9b9e-683b38c3d60f, IsOpen = True, DifficultyLevel = 192, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 171, SlopeName = slopeName461af83d-addb-41b3-9b9e-683b38c3d60f, IsOpen = True, DifficultyLevel = 192, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:24:32 MSK 2022","Thu Nov 03 11:24:32 MSK 2022","567","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestLogInWithWrongPassword","IntegrationTests.TestActionsWithUsers.TestLogInWithWrongPassword",""
"passed","Thu Nov 03 11:24:41 MSK 2022","Thu Nov 03 11:24:42 MSK 2022","624","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestAdminAddAutoIncrementLiftAsync(lift: Lift { LiftID = 191, LiftName = liftName82aa8d6d-89a8-4785-b438-4c6004d7089a, IsOpen = True, SeatsAmount = 49, LiftingTime = 102, QueueTime = 235, ConnectedSlopes =  })","IntegrationTests.TestActionsWithLiftsLifts.TestAdminAddAutoIncrementLiftAsync(lift: Lift { LiftID = 191, LiftName = liftName82aa8d6d-89a8-4785-b438-4c6004d7089a, IsOpen = True, SeatsAmount = 49, LiftingTime = 102, QueueTime = 235, ConnectedSlopes =  })",""
"passed","Thu Nov 03 11:24:38 MSK 2022","Thu Nov 03 11:24:38 MSK 2022","610","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminDeleteTurnstileAsync(turnstile: Turnstile { TurnstileID = 82, LiftID = 122, IsOpen = True })","IntegrationTests.TestActionsWithTurnstiles.TestAdminDeleteTurnstileAsync(turnstile: Turnstile { TurnstileID = 82, LiftID = 122, IsOpen = True })",""
"passed","Thu Nov 03 11:24:40 MSK 2022","Thu Nov 03 11:24:41 MSK 2022","618","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestGetLiftInfoAsync(lift: Lift { LiftID = 142, LiftName = liftName5c76db3f-d365-4c37-b80f-6d693a4b8b93, IsOpen = True, SeatsAmount = 98, LiftingTime = 99, QueueTime = 211, ConnectedSlopes =  })","IntegrationTests.TestActionsWithLiftsLifts.TestGetLiftInfoAsync(lift: Lift { LiftID = 142, LiftName = liftName5c76db3f-d365-4c37-b80f-6d693a4b8b93, IsOpen = True, SeatsAmount = 98, LiftingTime = 99, QueueTime = 211, ConnectedSlopes =  })",""
"passed","Thu Nov 03 11:24:25 MSK 2022","Thu Nov 03 11:24:26 MSK 2022","622","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestGetSlopeInfoAsync(slope: Slope { SlopeID = 81, SlopeName = slopeNamec58a91da-1b18-49b5-9987-a9fd2feaee62, IsOpen = True, DifficultyLevel = 108, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestGetSlopeInfoAsync(slope: Slope { SlopeID = 81, SlopeName = slopeNamec58a91da-1b18-49b5-9987-a9fd2feaee62, IsOpen = True, DifficultyLevel = 108, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:24:27 MSK 2022","Thu Nov 03 11:24:28 MSK 2022","619","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestAdminAddSlopeAsync(slope: Slope { SlopeID = 44, SlopeName = slopeName055707b3-139c-4b26-8a26-e83b163e9dd2, IsOpen = True, DifficultyLevel = 155, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestAdminAddSlopeAsync(slope: Slope { SlopeID = 44, SlopeName = slopeName055707b3-139c-4b26-8a26-e83b163e9dd2, IsOpen = True, DifficultyLevel = 155, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:24:30 MSK 2022","Thu Nov 03 11:24:30 MSK 2022","612","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminAddAutoIncrementUser","IntegrationTests.TestActionsWithUsers.TestAdminAddAutoIncrementUser",""
"passed","Thu Nov 03 11:24:37 MSK 2022","Thu Nov 03 11:24:37 MSK 2022","639","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminGetTurnstilesAsync(initialTurnstiles: [Turnstile { TurnstileID = 104, LiftID = 66, IsOpen = True }, Turnstile { TurnstileID = 37, LiftID = 248, IsOpen = False }, Turnstile { TurnstileID = 136, LiftID = 55, IsOpen = True }])","IntegrationTests.TestActionsWithTurnstiles.TestAdminGetTurnstilesAsync(initialTurnstiles: [Turnstile { TurnstileID = 104, LiftID = 66, IsOpen = True }, Turnstile { TurnstileID = 37, LiftID = 248, IsOpen = False }, Turnstile { TurnstileID = 136, LiftID = 55, IsOpen = True }])",""
"passed","Thu Nov 03 11:24:33 MSK 2022","Thu Nov 03 11:24:34 MSK 2022","596","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminGetUsers","IntegrationTests.TestActionsWithUsers.TestAdminGetUsers",""
"passed","Thu Nov 03 11:24:23 MSK 2022","Thu Nov 03 11:24:24 MSK 2022","734","","SuiteForTestingActionsWithLiftsSlopes","","IntegrationTests.TestActionsWithLiftsSlopes","IntegrationTests.TestActionsWithLiftsSlopes.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 123, LiftID = 5, SlopeID = 60 }, LiftSlope { RecordID = 96, LiftID = 112, SlopeID = 243 }, LiftSlope { RecordID = 2, LiftID = 157, SlopeID = 80 }])","IntegrationTests.TestActionsWithLiftsSlopes.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 123, LiftID = 5, SlopeID = 60 }, LiftSlope { RecordID = 96, LiftID = 112, SlopeID = 243 }, LiftSlope { RecordID = 2, LiftID = 157, SlopeID = 80 }])",""
"passed","Thu Nov 03 11:24:40 MSK 2022","Thu Nov 03 11:24:40 MSK 2022","697","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestGetLiftsInfoAsync(initialLifts: [Lift { LiftID = 151, LiftName = liftNamefc7c3487-ab1c-49a0-85a5-94357d2ae322, IsOpen = True, SeatsAmount = 26, LiftingTime = 139, QueueTime = 90, ConnectedSlopes =  }, Lift { LiftID = 250, LiftName = liftName558d5080-1316-4130-8a69-1465e6cb2654, IsOpen = False, SeatsAmount = 40, LiftingTime = 173, QueueTime = 238, ConnectedSlopes =  }, Lift { LiftID = 185, LiftName = liftName874ac30d-c611-4432-812b-4f830d98bc46, IsOpen = True, SeatsAmount = 174, LiftingTime = 154, QueueTime = 80, ConnectedSlopes =  }])","IntegrationTests.TestActionsWithLiftsLifts.TestGetLiftsInfoAsync(initialLifts: [Lift { LiftID = 151, LiftName = liftNamefc7c3487-ab1c-49a0-85a5-94357d2ae322, IsOpen = True, SeatsAmount = 26, LiftingTime = 139, QueueTime = 90, ConnectedSlopes =  }, Lift { LiftID = 250, LiftName = liftName558d5080-1316-4130-8a69-1465e6cb2654, IsOpen = False, SeatsAmount = 40, LiftingTime = 173, QueueTime = 238, ConnectedSlopes =  }, Lift { LiftID = 185, LiftName = liftName874ac30d-c611-4432-812b-4f830d98bc46, IsOpen = True, SeatsAmount = 174, LiftingTime = 154, QueueTime = 80, ConnectedSlopes =  }])",""
"passed","Thu Nov 03 11:24:35 MSK 2022","Thu Nov 03 11:24:35 MSK 2022","551","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithNoPassword","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithNoPassword",""
"passed","Thu Nov 03 11:24:28 MSK 2022","Thu Nov 03 11:24:29 MSK 2022","632","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestAdminDeleteSlopeAsync(slope: Slope { SlopeID = 140, SlopeName = slopeNamef173e9ed-8dcf-4490-a77b-996518572fab, IsOpen = True, DifficultyLevel = 146, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestAdminDeleteSlopeAsync(slope: Slope { SlopeID = 140, SlopeName = slopeNamef173e9ed-8dcf-4490-a77b-996518572fab, IsOpen = True, DifficultyLevel = 146, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:24:26 MSK 2022","Thu Nov 03 11:24:27 MSK 2022","679","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestGetSlopesInfoAsync(initialSlopes: [Slope { SlopeID = 17, SlopeName = slopeNamef521ac34-2821-4f9f-af58-acf871d7f274, IsOpen = True, DifficultyLevel = 190, ConnectedLifts =  }, Slope { SlopeID = 72, SlopeName = slopeNamebd5dc51f-27ac-4970-b6c5-ab35bf307851, IsOpen = False, DifficultyLevel = 102, ConnectedLifts =  }, Slope { SlopeID = 39, SlopeName = slopeName6132969e-b819-433f-b25f-221bccea7ca8, IsOpen = True, DifficultyLevel = 56, ConnectedLifts =  }])","IntegrationTests.TestActionsWithSlopes.TestGetSlopesInfoAsync(initialSlopes: [Slope { SlopeID = 17, SlopeName = slopeNamef521ac34-2821-4f9f-af58-acf871d7f274, IsOpen = True, DifficultyLevel = 190, ConnectedLifts =  }, Slope { SlopeID = 72, SlopeName = slopeNamebd5dc51f-27ac-4970-b6c5-ab35bf307851, IsOpen = False, DifficultyLevel = 102, ConnectedLifts =  }, Slope { SlopeID = 39, SlopeName = slopeName6132969e-b819-433f-b25f-221bccea7ca8, IsOpen = True, DifficultyLevel = 56, ConnectedLifts =  }])",""
"passed","Thu Nov 03 11:24:30 MSK 2022","Thu Nov 03 11:24:31 MSK 2022","597","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestLogInOk","IntegrationTests.TestActionsWithUsers.TestLogInOk",""
"passed","Thu Nov 03 11:24:39 MSK 2022","Thu Nov 03 11:24:40 MSK 2022","649","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestAdminDeleteLiftAsync(lift: Lift { LiftID = 74, LiftName = liftName812f98df-b7cd-4637-b151-06f7157973d3, IsOpen = True, SeatsAmount = 176, LiftingTime = 206, QueueTime = 6, ConnectedSlopes =  })","IntegrationTests.TestActionsWithLiftsLifts.TestAdminDeleteLiftAsync(lift: Lift { LiftID = 74, LiftName = liftName812f98df-b7cd-4637-b151-06f7157973d3, IsOpen = True, SeatsAmount = 176, LiftingTime = 206, QueueTime = 6, ConnectedSlopes =  })",""
"passed","Thu Nov 03 11:24:29 MSK 2022","Thu Nov 03 11:24:30 MSK 2022","612","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminUpdateUser","IntegrationTests.TestActionsWithUsers.TestAdminUpdateUser",""
"passed","Thu Nov 03 11:24:35 MSK 2022","Thu Nov 03 11:24:36 MSK 2022","601","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminGetUserByIDAsync","IntegrationTests.TestActionsWithUsers.TestAdminGetUserByIDAsync",""
"passed","Thu Nov 03 11:24:42 MSK 2022","Thu Nov 03 11:24:42 MSK 2022","647","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestUpdateLiftInfoAsync(lift: Lift { LiftID = 201, LiftName = liftName4628ebf6-87c5-4fa9-9411-4bcb6d2eacf3, IsOpen = True, SeatsAmount = 241, LiftingTime = 7, QueueTime = 43, ConnectedSlopes =  })","IntegrationTests.TestActionsWithLiftsLifts.TestUpdateLiftInfoAsync(lift: Lift { LiftID = 201, LiftName = liftName4628ebf6-87c5-4fa9-9411-4bcb6d2eacf3, IsOpen = True, SeatsAmount = 241, LiftingTime = 7, QueueTime = 43, ConnectedSlopes =  })",""
"passed","Thu Nov 03 11:24:33 MSK 2022","Thu Nov 03 11:24:33 MSK 2022","624","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminDeleteUser","IntegrationTests.TestActionsWithUsers.TestAdminDeleteUser",""
"passed","Thu Nov 03 11:24:32 MSK 2022","Thu Nov 03 11:24:33 MSK 2022","602","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestRegisterOk","IntegrationTests.TestActionsWithUsers.TestRegisterOk",""
"passed","Thu Nov 03 11:24:24 MSK 2022","Thu Nov 03 11:24:24 MSK 2022","676","","SuiteForTestingActionsWithLiftsSlopes","","IntegrationTests.TestActionsWithLiftsSlopes","IntegrationTests.TestActionsWithLiftsSlopes.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 211, LiftName = liftNameea593fc3-51ad-4d4b-a405-d264e5723cd7, IsOpen = True, SeatsAmount = 6, LiftingTime = 179, QueueTime = 197, ConnectedSlopes =  }, slope: Slope { SlopeID = 97, SlopeName = slopeNamebe382899-798f-453e-b1e0-8bc45c46dc63, IsOpen = False, DifficultyLevel = 142, ConnectedLifts =  })","IntegrationTests.TestActionsWithLiftsSlopes.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 211, LiftName = liftNameea593fc3-51ad-4d4b-a405-d264e5723cd7, IsOpen = True, SeatsAmount = 6, LiftingTime = 179, QueueTime = 197, ConnectedSlopes =  }, slope: Slope { SlopeID = 97, SlopeName = slopeNamebe382899-798f-453e-b1e0-8bc45c46dc63, IsOpen = False, DifficultyLevel = 142, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:24:34 MSK 2022","Thu Nov 03 11:24:35 MSK 2022","553","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithNoEmail","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithNoEmail",""
"passed","Thu Nov 03 11:24:36 MSK 2022","Thu Nov 03 11:24:36 MSK 2022","632","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminUpdateTurnstileAsync(turnstile: Turnstile { TurnstileID = 194, LiftID = 119, IsOpen = True })","IntegrationTests.TestActionsWithTurnstiles.TestAdminUpdateTurnstileAsync(turnstile: Turnstile { TurnstileID = 194, LiftID = 119, IsOpen = True })",""
"passed","Thu Nov 03 11:24:37 MSK 2022","Thu Nov 03 11:24:38 MSK 2022","605","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminGetTurnstileAsync(turnstile: Turnstile { TurnstileID = 150, LiftID = 164, IsOpen = True })","IntegrationTests.TestActionsWithTurnstiles.TestAdminGetTurnstileAsync(turnstile: Turnstile { TurnstileID = 150, LiftID = 164, IsOpen = True })",""
"passed","Thu Nov 03 11:24:24 MSK 2022","Thu Nov 03 11:24:25 MSK 2022","696","","SuiteForTestingActionsWithLiftsSlopes","","IntegrationTests.TestActionsWithLiftsSlopes","IntegrationTests.TestActionsWithLiftsSlopes.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 154, LiftName = liftName5018cf78-2c42-43eb-b0f0-5d6b217e2312, IsOpen = True, SeatsAmount = 98, LiftingTime = 230, QueueTime = 163, ConnectedSlopes =  }, slope: Slope { SlopeID = 49, SlopeName = slopeName6e6834c5-198a-4125-932f-128abba4fc7c, IsOpen = False, DifficultyLevel = 248, ConnectedLifts =  })","IntegrationTests.TestActionsWithLiftsSlopes.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 154, LiftName = liftName5018cf78-2c42-43eb-b0f0-5d6b217e2312, IsOpen = True, SeatsAmount = 98, LiftingTime = 230, QueueTime = 163, ConnectedSlopes =  }, slope: Slope { SlopeID = 49, SlopeName = slopeName6e6834c5-198a-4125-932f-128abba4fc7c, IsOpen = False, DifficultyLevel = 248, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:24:27 MSK 2022","Thu Nov 03 11:24:27 MSK 2022","639","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestUpdateSlopeInfoAsync(slope: Slope { SlopeID = 12, SlopeName = slopeName40a10560-1134-4723-8fc0-0b9acdeba666, IsOpen = True, DifficultyLevel = 109, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestUpdateSlopeInfoAsync(slope: Slope { SlopeID = 12, SlopeName = slopeName40a10560-1134-4723-8fc0-0b9acdeba666, IsOpen = True, DifficultyLevel = 109, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:24:31 MSK 2022","Thu Nov 03 11:24:32 MSK 2022","571","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithRepeatedEmail","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithRepeatedEmail",""
"passed","Thu Nov 03 11:24:38 MSK 2022","Thu Nov 03 11:24:39 MSK 2022","612","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminAddAutoIncrementTurnstileAsync(turnstile: Turnstile { TurnstileID = 236, LiftID = 132, IsOpen = True })","IntegrationTests.TestActionsWithTurnstiles.TestAdminAddAutoIncrementTurnstileAsync(turnstile: Turnstile { TurnstileID = 236, LiftID = 132, IsOpen = True })",""
"passed","Thu Nov 03 11:24:28 MSK 2022","Thu Nov 03 11:24:28 MSK 2022","618","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestAdminAddAutoIncrementSlopeAsync(slope: Slope { SlopeID = 203, SlopeName = slopeNamefc31d8cf-8f3a-4532-b320-e13bbe750e38, IsOpen = True, DifficultyLevel = 183, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestAdminAddAutoIncrementSlopeAsync(slope: Slope { SlopeID = 203, SlopeName = slopeNamefc31d8cf-8f3a-4532-b320-e13bbe750e38, IsOpen = True, DifficultyLevel = 183, ConnectedLifts =  })",""
"passed","Thu Nov 03 11:24:58 MSK 2022","Thu Nov 03 11:24:59 MSK 2022","944","","E2ETestSkiPatrolWorkingWithLifts","","E2ETests.E2ETest","E2ETests.E2ETest.E2ETestSkiPatrolWorkingWithLifts","E2ETests.E2ETest.E2ETestSkiPatrolWorkingWithLifts",""
