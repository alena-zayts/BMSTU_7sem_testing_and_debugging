"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","8","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 245, lift: Lift { LiftID = 200, LiftName = liftName42c4879d-a828-4bba-a4af-ad59125d569f, IsOpen = True, SeatsAmount = 124, LiftingTime = 228, QueueTime = 111, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 245, lift: Lift { LiftID = 200, LiftName = liftName42c4879d-a828-4bba-a4af-ad59125d569f, IsOpen = True, SeatsAmount = 124, LiftingTime = 228, QueueTime = 111, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","7","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 215, LiftName = liftName50629705-6ec7-422d-809c-0c623f574d46, IsOpen = True, SeatsAmount = 79, LiftingTime = 153, QueueTime = 145, ConnectedSlopes =  }, slope: Slope { SlopeID = 31, SlopeName = slopeName3332d60d-c7de-4381-906b-952a2124c092, IsOpen = False, DifficultyLevel = 243, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 215, LiftName = liftName50629705-6ec7-422d-809c-0c623f574d46, IsOpen = True, SeatsAmount = 79, LiftingTime = 153, QueueTime = 145, ConnectedSlopes =  }, slope: Slope { SlopeID = 31, SlopeName = slopeName3332d60d-c7de-4381-906b-952a2124c092, IsOpen = False, DifficultyLevel = 243, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","60","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 173, LiftName = liftName38bb4580-063e-4e9b-ae1d-9f099bb8e77d, IsOpen = True, SeatsAmount = 77, LiftingTime = 213, QueueTime = 215, ConnectedSlopes =  }, slope: Slope { SlopeID = 230, SlopeName = slopeName2507d020-7a4b-40c6-a35a-3ada61c903f5, IsOpen = False, DifficultyLevel = 3, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 173, LiftName = liftName38bb4580-063e-4e9b-ae1d-9f099bb8e77d, IsOpen = True, SeatsAmount = 77, LiftingTime = 213, QueueTime = 215, ConnectedSlopes =  }, slope: Slope { SlopeID = 230, SlopeName = slopeName2507d020-7a4b-40c6-a35a-3ada61c903f5, IsOpen = False, DifficultyLevel = 3, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","8","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 176, lift: Lift { LiftID = 55, LiftName = liftNamedfb14aa0-a4ef-4726-b245-7722dc3e59b9, IsOpen = True, SeatsAmount = 136, LiftingTime = 5, QueueTime = 10, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 176, lift: Lift { LiftID = 55, LiftName = liftNamedfb14aa0-a4ef-4726-b245-7722dc3e59b9, IsOpen = True, SeatsAmount = 136, LiftingTime = 5, QueueTime = 10, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","4","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 236, LiftID = 30, SlopeID = 84 }, LiftSlope { RecordID = 153, LiftID = 29, SlopeID = 53 }, LiftSlope { RecordID = 240, LiftID = 161, SlopeID = 119 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 236, LiftID = 30, SlopeID = 84 }, LiftSlope { RecordID = 153, LiftID = 29, SlopeID = 53 }, LiftSlope { RecordID = 240, LiftID = 161, SlopeID = 119 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","19","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 8, initialSlopes: [Slope { SlopeID = 168, SlopeName = slopeName5e880c2d-ced8-49ac-8f31-bbed2588d45d, IsOpen = True, DifficultyLevel = 75, ConnectedLifts =  }, Slope { SlopeID = 131, SlopeName = slopeNamebe37cc16-08d5-4745-aee6-1749e341fd40, IsOpen = False, DifficultyLevel = 211, ConnectedLifts =  }, Slope { SlopeID = 56, SlopeName = slopeName649e68ba-5956-4210-88c6-cdf1b2a3f503, IsOpen = True, DifficultyLevel = 117, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 8, initialSlopes: [Slope { SlopeID = 168, SlopeName = slopeName5e880c2d-ced8-49ac-8f31-bbed2588d45d, IsOpen = True, DifficultyLevel = 75, ConnectedLifts =  }, Slope { SlopeID = 131, SlopeName = slopeNamebe37cc16-08d5-4745-aee6-1749e341fd40, IsOpen = False, DifficultyLevel = 211, ConnectedLifts =  }, Slope { SlopeID = 56, SlopeName = slopeName649e68ba-5956-4210-88c6-cdf1b2a3f503, IsOpen = True, DifficultyLevel = 117, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","8","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInOk","BL.Tests.UsersServiceTests.TestLogInOk",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 164, turnstile: Turnstile { TurnstileID = 31, LiftID = 236, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 164, turnstile: Turnstile { TurnstileID = 31, LiftID = 236, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","76","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 166, lift: Lift { LiftID = 238, LiftName = liftName4cd3e7ae-bfe6-43b5-bbed-46d206d243c9, IsOpen = True, SeatsAmount = 103, LiftingTime = 210, QueueTime = 197, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 166, lift: Lift { LiftID = 238, LiftName = liftName4cd3e7ae-bfe6-43b5-bbed-46d206d243c9, IsOpen = True, SeatsAmount = 103, LiftingTime = 210, QueueTime = 197, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","8","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminUpdateUser","BL.Tests.UsersServiceTests.TestAdminUpdateUser",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","10","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 22, lift: Lift { LiftID = 202, LiftName = liftName15ae9b93-8476-4b56-9a85-ef457cb97b5c, IsOpen = True, SeatsAmount = 25, LiftingTime = 91, QueueTime = 78, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 22, lift: Lift { LiftID = 202, LiftName = liftName15ae9b93-8476-4b56-9a85-ef457cb97b5c, IsOpen = True, SeatsAmount = 25, LiftingTime = 91, QueueTime = 78, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","8","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterOk","BL.Tests.UsersServiceTests.TestRegisterOk",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","7","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 171, turnstile: Turnstile { TurnstileID = 103, LiftID = 247, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 171, turnstile: Turnstile { TurnstileID = 103, LiftID = 247, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 194, slope: Slope { SlopeID = 245, SlopeName = slopeName2efc62ff-0d04-4a5a-a7b0-f8cbb31d3093, IsOpen = True, DifficultyLevel = 195, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 194, slope: Slope { SlopeID = 245, SlopeName = slopeName2efc62ff-0d04-4a5a-a7b0-f8cbb31d3093, IsOpen = True, DifficultyLevel = 195, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","62","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUsers","BL.Tests.UsersServiceTests.TestAdminGetUsers",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","9","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 180, initialLifts: [Lift { LiftID = 66, LiftName = liftNamee6daeff1-3d3d-417e-bdcb-2ea5dd3ec777, IsOpen = True, SeatsAmount = 114, LiftingTime = 202, QueueTime = 234, ConnectedSlopes =  }, Lift { LiftID = 108, LiftName = liftName0b212916-1e4d-4732-8d74-784c3cd1e8d3, IsOpen = False, SeatsAmount = 60, LiftingTime = 242, QueueTime = 10, ConnectedSlopes =  }, Lift { LiftID = 43, LiftName = liftName58bcb589-bdfb-4162-a980-6d13187060c1, IsOpen = True, SeatsAmount = 158, LiftingTime = 173, QueueTime = 189, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 180, initialLifts: [Lift { LiftID = 66, LiftName = liftNamee6daeff1-3d3d-417e-bdcb-2ea5dd3ec777, IsOpen = True, SeatsAmount = 114, LiftingTime = 202, QueueTime = 234, ConnectedSlopes =  }, Lift { LiftID = 108, LiftName = liftName0b212916-1e4d-4732-8d74-784c3cd1e8d3, IsOpen = False, SeatsAmount = 60, LiftingTime = 242, QueueTime = 10, ConnectedSlopes =  }, Lift { LiftID = 43, LiftName = liftName58bcb589-bdfb-4162-a980-6d13187060c1, IsOpen = True, SeatsAmount = 158, LiftingTime = 173, QueueTime = 189, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 246, initialTurnstiles: [Turnstile { TurnstileID = 134, LiftID = 157, IsOpen = True }, Turnstile { TurnstileID = 103, LiftID = 202, IsOpen = False }, Turnstile { TurnstileID = 69, LiftID = 177, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 246, initialTurnstiles: [Turnstile { TurnstileID = 134, LiftID = 157, IsOpen = True }, Turnstile { TurnstileID = 103, LiftID = 202, IsOpen = False }, Turnstile { TurnstileID = 69, LiftID = 177, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","60","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 54, turnstile: Turnstile { TurnstileID = 81, LiftID = 210, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 54, turnstile: Turnstile { TurnstileID = 81, LiftID = 210, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","60","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 148, slope: Slope { SlopeID = 80, SlopeName = slopeName890df404-c9d0-4144-a728-b1b7d4192934, IsOpen = True, DifficultyLevel = 31, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 148, slope: Slope { SlopeID = 80, SlopeName = slopeName890df404-c9d0-4144-a728-b1b7d4192934, IsOpen = True, DifficultyLevel = 31, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","60","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminDeleteUser","BL.Tests.UsersServiceTests.TestAdminDeleteUser",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 239, slope: Slope { SlopeID = 212, SlopeName = slopeNamed99a2fb0-96d2-415c-bb9f-a57f3b0d6a14, IsOpen = True, DifficultyLevel = 71, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 239, slope: Slope { SlopeID = 212, SlopeName = slopeNamed99a2fb0-96d2-415c-bb9f-a57f3b0d6a14, IsOpen = True, DifficultyLevel = 71, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","9","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 184, slope: Slope { SlopeID = 126, SlopeName = slopeNamebaca8f65-657e-416a-a8e4-4be620ba89a3, IsOpen = True, DifficultyLevel = 200, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 184, slope: Slope { SlopeID = 126, SlopeName = slopeNamebaca8f65-657e-416a-a8e4-4be620ba89a3, IsOpen = True, DifficultyLevel = 200, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 80, turnstile: Turnstile { TurnstileID = 31, LiftID = 234, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 80, turnstile: Turnstile { TurnstileID = 31, LiftID = 234, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","5","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 41, slope: Slope { SlopeID = 135, SlopeName = slopeName57776527-5649-454c-be59-e76f521de4f9, IsOpen = True, DifficultyLevel = 103, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 41, slope: Slope { SlopeID = 135, SlopeName = slopeName57776527-5649-454c-be59-e76f521de4f9, IsOpen = True, DifficultyLevel = 103, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","6","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","5","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Thu Nov 03 10:24:12 MSK 2022","Thu Nov 03 10:24:12 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 10:24:38 MSK 2022","Thu Nov 03 10:24:39 MSK 2022","365","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty",""
"passed","Thu Nov 03 10:24:33 MSK 2022","Thu Nov 03 10:24:33 MSK 2022","394","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 3, CardID = 184, UserEmail = UserEmaila3d0d642-826f-40f2-b2cf-95f698c22a5f, Password = passwordede21add-3d47-44e1-b0dc-2f067b14dac6, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 3, CardID = 184, UserEmail = UserEmaila3d0d642-826f-40f2-b2cf-95f698c22a5f, Password = passwordede21add-3d47-44e1-b0dc-2f067b14dac6, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 10:24:33 MSK 2022","Thu Nov 03 10:24:33 MSK 2022","364","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 155)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 155)",""
"passed","Thu Nov 03 10:24:29 MSK 2022","Thu Nov 03 10:24:29 MSK 2022","384","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 217, LiftID = 22, SlopeID = 86 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 217, LiftID = 22, SlopeID = 86 })",""
"passed","Thu Nov 03 10:24:27 MSK 2022","Thu Nov 03 10:24:27 MSK 2022","424","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 249, SlopeName = slopeName5141b1f6-aa7b-4058-b5ea-bae428ce79da, IsOpen = True, DifficultyLevel = 118, ConnectedLifts =  }, slope2: Slope { SlopeID = 23, SlopeName = slopeName32328b0b-9b61-4b85-87e8-1bbfac1e380c, IsOpen = False, DifficultyLevel = 49, ConnectedLifts =  }, lift1: Lift { LiftID = 43, LiftName = liftName9ae6a058-3cfa-465c-b8bc-01b554dcdf10, IsOpen = True, SeatsAmount = 155, LiftingTime = 253, QueueTime = 255, ConnectedSlopes =  }, lift2: Lift { LiftID = 42, LiftName = liftName2b633329-5daa-48cb-bcfc-b723003963f1, IsOpen = False, SeatsAmount = 82, LiftingTime = 46, QueueTime = 247, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 249, SlopeName = slopeName5141b1f6-aa7b-4058-b5ea-bae428ce79da, IsOpen = True, DifficultyLevel = 118, ConnectedLifts =  }, slope2: Slope { SlopeID = 23, SlopeName = slopeName32328b0b-9b61-4b85-87e8-1bbfac1e380c, IsOpen = False, DifficultyLevel = 49, ConnectedLifts =  }, lift1: Lift { LiftID = 43, LiftName = liftName9ae6a058-3cfa-465c-b8bc-01b554dcdf10, IsOpen = True, SeatsAmount = 155, LiftingTime = 253, QueueTime = 255, ConnectedSlopes =  }, lift2: Lift { LiftID = 42, LiftName = liftName2b633329-5daa-48cb-bcfc-b723003963f1, IsOpen = False, SeatsAmount = 82, LiftingTime = 46, QueueTime = 247, ConnectedSlopes =  })",""
"passed","Thu Nov 03 10:24:31 MSK 2022","Thu Nov 03 10:24:31 MSK 2022","398","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 199, CardID = 140, UserEmail = UserEmail49d3f5e9-4312-4ad8-aeef-b04353c2b788, Password = password24bccf21-a74d-467b-b2ed-253258d1ed25, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 199, CardID = 140, UserEmail = UserEmail49d3f5e9-4312-4ad8-aeef-b04353c2b788, Password = password24bccf21-a74d-467b-b2ed-253258d1ed25, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 10:24:29 MSK 2022","Thu Nov 03 10:24:30 MSK 2022","399","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk",""
"passed","Thu Nov 03 10:24:34 MSK 2022","Thu Nov 03 10:24:35 MSK 2022","487","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 244)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 244)",""
"passed","Thu Nov 03 10:24:35 MSK 2022","Thu Nov 03 10:24:35 MSK 2022","363","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 98)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 98)",""
"passed","Thu Nov 03 10:24:37 MSK 2022","Thu Nov 03 10:24:37 MSK 2022","396","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 192, SlopeName = slopeName1a1c70ea-7f3a-4aff-89af-02b47d6a3dfd, IsOpen = True, DifficultyLevel = 193, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 192, SlopeName = slopeName1a1c70ea-7f3a-4aff-89af-02b47d6a3dfd, IsOpen = True, DifficultyLevel = 193, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:24:36 MSK 2022","Thu Nov 03 10:24:37 MSK 2022","393","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 82, LiftID = 30, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 82, LiftID = 30, IsOpen = True })",""
"passed","Thu Nov 03 10:24:27 MSK 2022","Thu Nov 03 10:24:28 MSK 2022","401","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 23, LiftID = 29, SlopeID = 103 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 23, LiftID = 29, SlopeID = 103 })",""
"passed","Thu Nov 03 10:24:30 MSK 2022","Thu Nov 03 10:24:31 MSK 2022","394","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 72, CardID = 178, UserEmail = UserEmail01f8fb71-9fd0-4680-96e3-37876cb31be2, Password = password9d2b5025-b39b-4f94-b1fc-f76e9defc19b, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 72, CardID = 178, UserEmail = UserEmail01f8fb71-9fd0-4680-96e3-37876cb31be2, Password = password9d2b5025-b39b-4f94-b1fc-f76e9defc19b, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 10:24:30 MSK 2022","Thu Nov 03 10:24:30 MSK 2022","366","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty",""
"passed","Thu Nov 03 10:24:37 MSK 2022","Thu Nov 03 10:24:37 MSK 2022","363","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName45e9bcad-1f4b-466c-a5a2-e12c17721105"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName45e9bcad-1f4b-466c-a5a2-e12c17721105"")",""
"passed","Thu Nov 03 10:24:26 MSK 2022","Thu Nov 03 10:24:27 MSK 2022","496","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 152, LiftID = 73, SlopeID = 156 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 152, LiftID = 73, SlopeID = 156 })",""
"passed","Thu Nov 03 10:24:31 MSK 2022","Thu Nov 03 10:24:31 MSK 2022","364","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty",""
"passed","Thu Nov 03 10:24:39 MSK 2022","Thu Nov 03 10:24:39 MSK 2022","397","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 13, SlopeName = slopeName762bf5f1-12b2-4cb8-928f-381ed5e5a5cb, IsOpen = True, DifficultyLevel = 93, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 13, SlopeName = slopeName762bf5f1-12b2-4cb8-928f-381ed5e5a5cb, IsOpen = True, DifficultyLevel = 93, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:24:41 MSK 2022","Thu Nov 03 10:24:42 MSK 2022","382","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 116, LiftName = liftName3e35773c-5136-466c-a5f7-ebd76fdc91dd, IsOpen = True, SeatsAmount = 213, LiftingTime = 14, QueueTime = 182, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 116, LiftName = liftName3e35773c-5136-466c-a5f7-ebd76fdc91dd, IsOpen = True, SeatsAmount = 213, LiftingTime = 14, QueueTime = 182, ConnectedSlopes =  })",""
"passed","Thu Nov 03 10:24:40 MSK 2022","Thu Nov 03 10:24:41 MSK 2022","363","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamed73049b0-bd7f-479f-8659-a8266c0745ef"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamed73049b0-bd7f-479f-8659-a8266c0745ef"")",""
"passed","Thu Nov 03 10:24:39 MSK 2022","Thu Nov 03 10:24:40 MSK 2022","397","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk",""
"passed","Thu Nov 03 10:24:32 MSK 2022","Thu Nov 03 10:24:33 MSK 2022","361","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail0e8c67f7-ba2c-49eb-a2b9-1c4567220fa5"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail0e8c67f7-ba2c-49eb-a2b9-1c4567220fa5"")",""
"passed","Thu Nov 03 10:24:37 MSK 2022","Thu Nov 03 10:24:38 MSK 2022","383","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 54, SlopeName = slopeNameff972282-45f8-437e-a5ef-0cd6ad4ad0cb, IsOpen = True, DifficultyLevel = 1, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 54, SlopeName = slopeNameff972282-45f8-437e-a5ef-0cd6ad4ad0cb, IsOpen = True, DifficultyLevel = 1, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:24:32 MSK 2022","Thu Nov 03 10:24:32 MSK 2022","363","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email36ad7d15-d252-461c-8e54-c1671b7b94bd"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email36ad7d15-d252-461c-8e54-c1671b7b94bd"")",""
"passed","Thu Nov 03 10:24:33 MSK 2022","Thu Nov 03 10:24:34 MSK 2022","418","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk",""
"passed","Thu Nov 03 10:24:41 MSK 2022","Thu Nov 03 10:24:41 MSK 2022","371","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty",""
"passed","Thu Nov 03 10:24:34 MSK 2022","Thu Nov 03 10:24:34 MSK 2022","386","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 186, LiftID = 10, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 186, LiftID = 10, IsOpen = True })",""
"passed","Thu Nov 03 10:24:31 MSK 2022","Thu Nov 03 10:24:32 MSK 2022","383","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 117, CardID = 170, UserEmail = UserEmail50cb956d-f5e0-4e0c-bb41-13d1002b5c3a, Password = passwordca6c6173-bf13-4132-888e-762052d90dbc, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 117, CardID = 170, UserEmail = UserEmail50cb956d-f5e0-4e0c-bb41-13d1002b5c3a, Password = passwordca6c6173-bf13-4132-888e-762052d90dbc, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 10:24:36 MSK 2022","Thu Nov 03 10:24:36 MSK 2022","397","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 198, LiftID = 19, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 198, LiftID = 19, IsOpen = True })",""
"passed","Thu Nov 03 10:24:41 MSK 2022","Thu Nov 03 10:24:41 MSK 2022","409","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 194, LiftName = liftName96f60caf-4409-492e-ad30-efeea0e87021, IsOpen = True, SeatsAmount = 54, LiftingTime = 112, QueueTime = 177, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 194, LiftName = liftName96f60caf-4409-492e-ad30-efeea0e87021, IsOpen = True, SeatsAmount = 54, LiftingTime = 112, QueueTime = 177, ConnectedSlopes =  })",""
"passed","Thu Nov 03 10:24:35 MSK 2022","Thu Nov 03 10:24:36 MSK 2022","399","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk",""
"passed","Thu Nov 03 10:24:38 MSK 2022","Thu Nov 03 10:24:38 MSK 2022","393","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk",""
"passed","Thu Nov 03 10:24:40 MSK 2022","Thu Nov 03 10:24:40 MSK 2022","363","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 136)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 136)",""
"passed","Thu Nov 03 10:24:28 MSK 2022","Thu Nov 03 10:24:28 MSK 2022","370","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 59)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 59)",""
"passed","Thu Nov 03 10:24:28 MSK 2022","Thu Nov 03 10:24:28 MSK 2022","398","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 13, LiftID = 137, SlopeID = 90 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 13, LiftID = 137, SlopeID = 90 })",""
"passed","Thu Nov 03 10:24:42 MSK 2022","Thu Nov 03 10:24:42 MSK 2022","407","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 194, LiftName = liftNamea7230586-fe50-438b-a036-43cfadcd65a4, IsOpen = True, SeatsAmount = 122, LiftingTime = 230, QueueTime = 68, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 194, LiftName = liftNamea7230586-fe50-438b-a036-43cfadcd65a4, IsOpen = True, SeatsAmount = 122, LiftingTime = 230, QueueTime = 68, ConnectedSlopes =  })",""
"passed","Thu Nov 03 10:24:39 MSK 2022","Thu Nov 03 10:24:39 MSK 2022","366","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 17)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 17)",""
"passed","Thu Nov 03 10:24:35 MSK 2022","Thu Nov 03 10:24:35 MSK 2022","364","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty",""
"passed","Thu Nov 03 10:24:29 MSK 2022","Thu Nov 03 10:24:29 MSK 2022","386","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 148, LiftID = 171, SlopeID = 126 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 148, LiftID = 171, SlopeID = 126 })",""
"passed","Thu Nov 03 10:25:13 MSK 2022","Thu Nov 03 10:25:14 MSK 2022","645","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestUpdateSlopeInfoAsync(slope: Slope { SlopeID = 55, SlopeName = slopeName336e3e09-e2ed-4fd3-945b-7aa5bdafd15b, IsOpen = True, DifficultyLevel = 167, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestUpdateSlopeInfoAsync(slope: Slope { SlopeID = 55, SlopeName = slopeName336e3e09-e2ed-4fd3-945b-7aa5bdafd15b, IsOpen = True, DifficultyLevel = 167, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:24:57 MSK 2022","Thu Nov 03 10:24:58 MSK 2022","703","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminUpdateTurnstileAsync(turnstile: Turnstile { TurnstileID = 47, LiftID = 126, IsOpen = True })","IntegrationTests.TestActionsWithTurnstiles.TestAdminUpdateTurnstileAsync(turnstile: Turnstile { TurnstileID = 47, LiftID = 126, IsOpen = True })",""
"passed","Thu Nov 03 10:24:58 MSK 2022","Thu Nov 03 10:24:59 MSK 2022","605","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminGetTurnstileAsync(turnstile: Turnstile { TurnstileID = 242, LiftID = 120, IsOpen = True })","IntegrationTests.TestActionsWithTurnstiles.TestAdminGetTurnstileAsync(turnstile: Turnstile { TurnstileID = 242, LiftID = 120, IsOpen = True })",""
"passed","Thu Nov 03 10:25:09 MSK 2022","Thu Nov 03 10:25:10 MSK 2022","629","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestAdminAddAutoIncrementLiftAsync(lift: Lift { LiftID = 104, LiftName = liftNamebd21228f-bfcc-4852-bd05-77ba05980903, IsOpen = True, SeatsAmount = 71, LiftingTime = 14, QueueTime = 238, ConnectedSlopes =  })","IntegrationTests.TestActionsWithLiftsLifts.TestAdminAddAutoIncrementLiftAsync(lift: Lift { LiftID = 104, LiftName = liftNamebd21228f-bfcc-4852-bd05-77ba05980903, IsOpen = True, SeatsAmount = 71, LiftingTime = 14, QueueTime = 238, ConnectedSlopes =  })",""
"passed","Thu Nov 03 10:25:01 MSK 2022","Thu Nov 03 10:25:01 MSK 2022","611","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminUpdateUser","IntegrationTests.TestActionsWithUsers.TestAdminUpdateUser",""
"passed","Thu Nov 03 10:25:05 MSK 2022","Thu Nov 03 10:25:06 MSK 2022","609","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminGetUsers","IntegrationTests.TestActionsWithUsers.TestAdminGetUsers",""
"passed","Thu Nov 03 10:25:08 MSK 2022","Thu Nov 03 10:25:09 MSK 2022","692","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestGetLiftsInfoAsync(initialLifts: [Lift { LiftID = 125, LiftName = liftNamebec893ff-b57f-4058-8f2f-5c385d964a31, IsOpen = True, SeatsAmount = 206, LiftingTime = 98, QueueTime = 54, ConnectedSlopes =  }, Lift { LiftID = 141, LiftName = liftName8b0c870f-60be-4976-8419-d96daaeb8ef9, IsOpen = False, SeatsAmount = 34, LiftingTime = 209, QueueTime = 212, ConnectedSlopes =  }, Lift { LiftID = 173, LiftName = liftNamea7c7e88c-d490-4fee-919b-6a331c53cbcd, IsOpen = True, SeatsAmount = 220, LiftingTime = 177, QueueTime = 60, ConnectedSlopes =  }])","IntegrationTests.TestActionsWithLiftsLifts.TestGetLiftsInfoAsync(initialLifts: [Lift { LiftID = 125, LiftName = liftNamebec893ff-b57f-4058-8f2f-5c385d964a31, IsOpen = True, SeatsAmount = 206, LiftingTime = 98, QueueTime = 54, ConnectedSlopes =  }, Lift { LiftID = 141, LiftName = liftName8b0c870f-60be-4976-8419-d96daaeb8ef9, IsOpen = False, SeatsAmount = 34, LiftingTime = 209, QueueTime = 212, ConnectedSlopes =  }, Lift { LiftID = 173, LiftName = liftNamea7c7e88c-d490-4fee-919b-6a331c53cbcd, IsOpen = True, SeatsAmount = 220, LiftingTime = 177, QueueTime = 60, ConnectedSlopes =  }])",""
"passed","Thu Nov 03 10:25:07 MSK 2022","Thu Nov 03 10:25:07 MSK 2022","590","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminGetUserByIDAsync","IntegrationTests.TestActionsWithUsers.TestAdminGetUserByIDAsync",""
"passed","Thu Nov 03 10:25:15 MSK 2022","Thu Nov 03 10:25:16 MSK 2022","682","","SuiteForTestingActionsWithLiftsSlopes","","IntegrationTests.TestActionsWithLiftsSlopes","IntegrationTests.TestActionsWithLiftsSlopes.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 236, LiftName = liftName3f94a946-b15c-4fd5-a487-b64dfdfab9e4, IsOpen = True, SeatsAmount = 80, LiftingTime = 45, QueueTime = 11, ConnectedSlopes =  }, slope: Slope { SlopeID = 126, SlopeName = slopeName659d4a10-1f66-454d-9f99-ceb9f61698c0, IsOpen = False, DifficultyLevel = 57, ConnectedLifts =  })","IntegrationTests.TestActionsWithLiftsSlopes.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 236, LiftName = liftName3f94a946-b15c-4fd5-a487-b64dfdfab9e4, IsOpen = True, SeatsAmount = 80, LiftingTime = 45, QueueTime = 11, ConnectedSlopes =  }, slope: Slope { SlopeID = 126, SlopeName = slopeName659d4a10-1f66-454d-9f99-ceb9f61698c0, IsOpen = False, DifficultyLevel = 57, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:25:06 MSK 2022","Thu Nov 03 10:25:07 MSK 2022","546","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithNoPassword","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithNoPassword",""
"passed","Thu Nov 03 10:25:02 MSK 2022","Thu Nov 03 10:25:03 MSK 2022","586","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestLogInOk","IntegrationTests.TestActionsWithUsers.TestLogInOk",""
"passed","Thu Nov 03 10:25:04 MSK 2022","Thu Nov 03 10:25:05 MSK 2022","628","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminDeleteUser","IntegrationTests.TestActionsWithUsers.TestAdminDeleteUser",""
"passed","Thu Nov 03 10:25:12 MSK 2022","Thu Nov 03 10:25:13 MSK 2022","620","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestAdminAddSlopeAsync(slope: Slope { SlopeID = 218, SlopeName = slopeNamef3d7ba53-5e81-4c43-a861-3f4350744392, IsOpen = True, DifficultyLevel = 167, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestAdminAddSlopeAsync(slope: Slope { SlopeID = 218, SlopeName = slopeNamef3d7ba53-5e81-4c43-a861-3f4350744392, IsOpen = True, DifficultyLevel = 167, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:25:01 MSK 2022","Thu Nov 03 10:25:02 MSK 2022","618","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestAdminAddAutoIncrementUser","IntegrationTests.TestActionsWithUsers.TestAdminAddAutoIncrementUser",""
"passed","Thu Nov 03 10:25:13 MSK 2022","Thu Nov 03 10:25:13 MSK 2022","608","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestGetSlopeInfoAsync(slope: Slope { SlopeID = 235, SlopeName = slopeNamec6bdb8a5-deb2-456d-9974-cdf914072972, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestGetSlopeInfoAsync(slope: Slope { SlopeID = 235, SlopeName = slopeNamec6bdb8a5-deb2-456d-9974-cdf914072972, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:25:14 MSK 2022","Thu Nov 03 10:25:15 MSK 2022","632","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestAdminAddAutoIncrementSlopeAsync(slope: Slope { SlopeID = 52, SlopeName = slopeNamea6a3bbbd-f3c5-41a6-9942-75e21c27aae6, IsOpen = True, DifficultyLevel = 165, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestAdminAddAutoIncrementSlopeAsync(slope: Slope { SlopeID = 52, SlopeName = slopeNamea6a3bbbd-f3c5-41a6-9942-75e21c27aae6, IsOpen = True, DifficultyLevel = 165, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:25:16 MSK 2022","Thu Nov 03 10:25:17 MSK 2022","669","","SuiteForTestingActionsWithLiftsSlopes","","IntegrationTests.TestActionsWithLiftsSlopes","IntegrationTests.TestActionsWithLiftsSlopes.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 190, LiftName = liftNamed3275b2a-6041-426f-bffc-5b4778b100a3, IsOpen = True, SeatsAmount = 189, LiftingTime = 66, QueueTime = 179, ConnectedSlopes =  }, slope: Slope { SlopeID = 250, SlopeName = slopeName9def77d8-151d-4dc9-b554-53e810dbd3bf, IsOpen = False, DifficultyLevel = 255, ConnectedLifts =  })","IntegrationTests.TestActionsWithLiftsSlopes.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 190, LiftName = liftNamed3275b2a-6041-426f-bffc-5b4778b100a3, IsOpen = True, SeatsAmount = 189, LiftingTime = 66, QueueTime = 179, ConnectedSlopes =  }, slope: Slope { SlopeID = 250, SlopeName = slopeName9def77d8-151d-4dc9-b554-53e810dbd3bf, IsOpen = False, DifficultyLevel = 255, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:25:15 MSK 2022","Thu Nov 03 10:25:15 MSK 2022","656","","SuiteForTestingActionsWithLiftsSlopes","","IntegrationTests.TestActionsWithLiftsSlopes","IntegrationTests.TestActionsWithLiftsSlopes.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 75, LiftID = 41, SlopeID = 204 }, LiftSlope { RecordID = 124, LiftID = 63, SlopeID = 74 }, LiftSlope { RecordID = 196, LiftID = 87, SlopeID = 15 }])","IntegrationTests.TestActionsWithLiftsSlopes.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 75, LiftID = 41, SlopeID = 204 }, LiftSlope { RecordID = 124, LiftID = 63, SlopeID = 74 }, LiftSlope { RecordID = 196, LiftID = 87, SlopeID = 15 }])",""
"passed","Thu Nov 03 10:25:10 MSK 2022","Thu Nov 03 10:25:11 MSK 2022","642","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestUpdateLiftInfoAsync(lift: Lift { LiftID = 205, LiftName = liftName2911aecd-bd3b-4cfb-b0b6-a5a3770c20b9, IsOpen = True, SeatsAmount = 253, LiftingTime = 74, QueueTime = 90, ConnectedSlopes =  })","IntegrationTests.TestActionsWithLiftsLifts.TestUpdateLiftInfoAsync(lift: Lift { LiftID = 205, LiftName = liftName2911aecd-bd3b-4cfb-b0b6-a5a3770c20b9, IsOpen = True, SeatsAmount = 253, LiftingTime = 74, QueueTime = 90, ConnectedSlopes =  })",""
"passed","Thu Nov 03 10:25:06 MSK 2022","Thu Nov 03 10:25:06 MSK 2022","547","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithNoEmail","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithNoEmail",""
"passed","Thu Nov 03 10:25:00 MSK 2022","Thu Nov 03 10:25:01 MSK 2022","664","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminGetTurnstilesAsync(initialTurnstiles: [Turnstile { TurnstileID = 89, LiftID = 218, IsOpen = True }, Turnstile { TurnstileID = 127, LiftID = 158, IsOpen = False }, Turnstile { TurnstileID = 92, LiftID = 59, IsOpen = True }])","IntegrationTests.TestActionsWithTurnstiles.TestAdminGetTurnstilesAsync(initialTurnstiles: [Turnstile { TurnstileID = 89, LiftID = 218, IsOpen = True }, Turnstile { TurnstileID = 127, LiftID = 158, IsOpen = False }, Turnstile { TurnstileID = 92, LiftID = 59, IsOpen = True }])",""
"passed","Thu Nov 03 10:25:03 MSK 2022","Thu Nov 03 10:25:03 MSK 2022","567","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithRepeatedEmail","IntegrationTests.TestActionsWithUsers.TestRegisterUserWithRepeatedEmail",""
"passed","Thu Nov 03 10:24:59 MSK 2022","Thu Nov 03 10:24:59 MSK 2022","621","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminAddAutoIncrementTurnstileAsync(turnstile: Turnstile { TurnstileID = 44, LiftID = 111, IsOpen = True })","IntegrationTests.TestActionsWithTurnstiles.TestAdminAddAutoIncrementTurnstileAsync(turnstile: Turnstile { TurnstileID = 44, LiftID = 111, IsOpen = True })",""
"passed","Thu Nov 03 10:25:11 MSK 2022","Thu Nov 03 10:25:12 MSK 2022","670","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestGetSlopesInfoAsync(initialSlopes: [Slope { SlopeID = 68, SlopeName = slopeName94f1e405-b36b-4788-9d21-40157df8b2f5, IsOpen = True, DifficultyLevel = 179, ConnectedLifts =  }, Slope { SlopeID = 81, SlopeName = slopeNamec7be212d-8735-439b-ba26-231b4fe9c14f, IsOpen = False, DifficultyLevel = 86, ConnectedLifts =  }, Slope { SlopeID = 191, SlopeName = slopeName32198db2-6cc3-46f5-afd5-171cdc4b0afd, IsOpen = True, DifficultyLevel = 153, ConnectedLifts =  }])","IntegrationTests.TestActionsWithSlopes.TestGetSlopesInfoAsync(initialSlopes: [Slope { SlopeID = 68, SlopeName = slopeName94f1e405-b36b-4788-9d21-40157df8b2f5, IsOpen = True, DifficultyLevel = 179, ConnectedLifts =  }, Slope { SlopeID = 81, SlopeName = slopeNamec7be212d-8735-439b-ba26-231b4fe9c14f, IsOpen = False, DifficultyLevel = 86, ConnectedLifts =  }, Slope { SlopeID = 191, SlopeName = slopeName32198db2-6cc3-46f5-afd5-171cdc4b0afd, IsOpen = True, DifficultyLevel = 153, ConnectedLifts =  }])",""
"passed","Thu Nov 03 10:25:09 MSK 2022","Thu Nov 03 10:25:09 MSK 2022","623","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestGetLiftInfoAsync(lift: Lift { LiftID = 157, LiftName = liftName200ec6ec-b31f-4351-bb68-d3babe84f91c, IsOpen = True, SeatsAmount = 94, LiftingTime = 138, QueueTime = 2, ConnectedSlopes =  })","IntegrationTests.TestActionsWithLiftsLifts.TestGetLiftInfoAsync(lift: Lift { LiftID = 157, LiftName = liftName200ec6ec-b31f-4351-bb68-d3babe84f91c, IsOpen = True, SeatsAmount = 94, LiftingTime = 138, QueueTime = 2, ConnectedSlopes =  })",""
"passed","Thu Nov 03 10:24:59 MSK 2022","Thu Nov 03 10:25:00 MSK 2022","607","","SuiteForTestingActionsWithTurnstiles","","IntegrationTests.TestActionsWithTurnstiles","IntegrationTests.TestActionsWithTurnstiles.TestAdminDeleteTurnstileAsync(turnstile: Turnstile { TurnstileID = 253, LiftID = 222, IsOpen = True })","IntegrationTests.TestActionsWithTurnstiles.TestAdminDeleteTurnstileAsync(turnstile: Turnstile { TurnstileID = 253, LiftID = 222, IsOpen = True })",""
"passed","Thu Nov 03 10:25:04 MSK 2022","Thu Nov 03 10:25:04 MSK 2022","605","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestRegisterOk","IntegrationTests.TestActionsWithUsers.TestRegisterOk",""
"passed","Thu Nov 03 10:25:11 MSK 2022","Thu Nov 03 10:25:11 MSK 2022","630","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithSlopes","IntegrationTests.TestActionsWithSlopes.TestAdminDeleteSlopeAsync(slope: Slope { SlopeID = 237, SlopeName = slopeName8ac916b3-6dc7-45c5-b970-817909b2c18c, IsOpen = True, DifficultyLevel = 177, ConnectedLifts =  })","IntegrationTests.TestActionsWithSlopes.TestAdminDeleteSlopeAsync(slope: Slope { SlopeID = 237, SlopeName = slopeName8ac916b3-6dc7-45c5-b970-817909b2c18c, IsOpen = True, DifficultyLevel = 177, ConnectedLifts =  })",""
"passed","Thu Nov 03 10:25:03 MSK 2022","Thu Nov 03 10:25:04 MSK 2022","570","","SuiteForTestingActionsWithSlopes","","IntegrationTests.TestActionsWithUsers","IntegrationTests.TestActionsWithUsers.TestLogInWithWrongPassword","IntegrationTests.TestActionsWithUsers.TestLogInWithWrongPassword",""
"passed","Thu Nov 03 10:25:07 MSK 2022","Thu Nov 03 10:25:08 MSK 2022","638","","SuiteForTestingActionsWithLifts","","IntegrationTests.TestActionsWithLiftsLifts","IntegrationTests.TestActionsWithLiftsLifts.TestAdminDeleteLiftAsync(lift: Lift { LiftID = 91, LiftName = liftName8da3bd22-863e-4c2d-bc57-fb8e1c3803ed, IsOpen = True, SeatsAmount = 177, LiftingTime = 53, QueueTime = 67, ConnectedSlopes =  })","IntegrationTests.TestActionsWithLiftsLifts.TestAdminDeleteLiftAsync(lift: Lift { LiftID = 91, LiftName = liftName8da3bd22-863e-4c2d-bc57-fb8e1c3803ed, IsOpen = True, SeatsAmount = 177, LiftingTime = 53, QueueTime = 67, ConnectedSlopes =  })",""
"passed","Thu Nov 03 10:25:32 MSK 2022","Thu Nov 03 10:25:33 MSK 2022","916","","E2ETestSkiPatrolWorkingWithLifts","","E2ETests.E2ETest","E2ETests.E2ETest.E2ETestSkiPatrolWorkingWithLifts","E2ETests.E2ETest.E2ETestSkiPatrolWorkingWithLifts",""
