{"uid":"ea00c769207de656","name":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 21, initialSlopes: [Slope { SlopeID = 96, SlopeName = slopeName1acc34f8-0eca-41a5-944d-0d12e26054f0, IsOpen = True, DifficultyLevel = 174, ConnectedLifts =  }, Slope { SlopeID = 15, SlopeName = slopeName99474130-df2b-4e6d-b52d-683b50d86934, IsOpen = False, DifficultyLevel = 167, ConnectedLifts =  }, Slope { SlopeID = 229, SlopeName = slopeName430fe4da-3944-4dba-8cb7-4833f1fa8a3b, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","fullName":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 21, initialSlopes: [Slope { SlopeID = 96, SlopeName = slopeName1acc34f8-0eca-41a5-944d-0d12e26054f0, IsOpen = True, DifficultyLevel = 174, ConnectedLifts =  }, Slope { SlopeID = 15, SlopeName = slopeName99474130-df2b-4e6d-b52d-683b50d86934, IsOpen = False, DifficultyLevel = 167, ConnectedLifts =  }, Slope { SlopeID = 229, SlopeName = slopeName430fe4da-3944-4dba-8cb7-4833f1fa8a3b, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","historyId":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 21, initialSlopes: [Slope { SlopeID = 96, SlopeName = slopeName1acc34f8-0eca-41a5-944d-0d12e26054f0, IsOpen = True, DifficultyLevel = 174, ConnectedLifts =  }, Slope { SlopeID = 15, SlopeName = slopeName99474130-df2b-4e6d-b52d-683b50d86934, IsOpen = False, DifficultyLevel = 167, ConnectedLifts =  }, Slope { SlopeID = 229, SlopeName = slopeName430fe4da-3944-4dba-8cb7-4833f1fa8a3b, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","time":{"start":1665926213846,"stop":1665926213854,"duration":8},"status":"passed","statusMessage":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"BL.Tests.SlopesServiceTest"},{"name":"testMethod","value":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 21, initialSlopes: [Slope { SlopeID = 96, SlopeName = slopeName1acc34f8-0eca-41a5-944d-0d12e26054f0, IsOpen = True, DifficultyLevel = 174, ConnectedLifts =  }, Slope { SlopeID = 15, SlopeName = slopeName99474130-df2b-4e6d-b52d-683b50d86934, IsOpen = False, DifficultyLevel = 167, ConnectedLifts =  }, Slope { SlopeID = 229, SlopeName = slopeName430fe4da-3944-4dba-8cb7-4833f1fa8a3b, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })"},{"name":"package","value":"BL.Tests.SlopesServiceTest"},{"name":"suite","value":"SlopesServiceSuite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"ea00c769207de656.json","parameterValues":[]}