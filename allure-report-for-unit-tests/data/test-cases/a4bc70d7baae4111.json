{"uid":"a4bc70d7baae4111","name":"AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: \"liftName5bb9312f-64f9-4d7c-a8af-68d64d186eb7\")","fullName":"AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: \"liftName5bb9312f-64f9-4d7c-a8af-68d64d186eb7\")","historyId":"AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: \"liftName5bb9312f-64f9-4d7c-a8af-68d64d186eb7\")","time":{"start":1665861037575,"stop":1665861038122,"duration":547},"status":"failed","statusMessage":"Assert.Throws() Failure\r\nExpected: typeof(AccessToDB.Exceptions.LiftExceptions.LiftNotFoundException)\r\nActual:   typeof(System.InvalidOperationException): Operations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection's state is no longer correct.\nOperations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection's state is no longer correct.","statusTrace":"   at System.Collections.Generic.Dictionary`2.FindValue(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.GetObjectActivator(Type type)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.<>c__DisplayClass24_0.<TryGenerateConverterFromGenericConverter>b__0(Type x)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.TryGenerateConverterFromGenericConverter(Type type)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.GetConverter[T]()\r\n   at ProGaudi.MsgPack.Light.MsgPackSerializer.GetConverter[T](MsgPackContext context)\r\n   at ProGaudi.MsgPack.Light.MsgPackSerializer.Serialize[T](T data, MemoryStream stream, MsgPackContext context)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.SendRequestImpl[TRequest](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.SendRequest[TRequest,TResponse](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.LogicalConnectionManager.SendRequest[TRequest,TResponse](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.Index.Select[TKey,TTuple](TKey key, SelectOptions options)\r\n   at AccessToDB.RepositoriesTarantool.TarantoolLiftsRepository.GetLiftByNameAsync(String name) in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB\\TarantoolRepositories\\TarantoolLiftsRepository.cs:line 63\r\n   at AccessToDB.Tests.LiftsRepositoryTests.<>c__DisplayClass11_0.<<TestGetLiftByNameAsyncFailsWhenNameNotExists>b__0>d.MoveNext() in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB.Tests\\LiftsRepositoryTests.cs:line 109\r\n--- End of stack trace from previous location ---\r\n   at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in /_/src/xunit.assert/Asserts/Record.cs:line 104\n   at System.Collections.Generic.Dictionary`2.FindValue(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.GetObjectActivator(Type type)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.<>c__DisplayClass24_0.<TryGenerateConverterFromGenericConverter>b__0(Type x)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.TryGenerateConverterFromGenericConverter(Type type)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.GetConverter[T]()\r\n   at ProGaudi.MsgPack.Light.MsgPackSerializer.GetConverter[T](MsgPackContext context)\r\n   at ProGaudi.MsgPack.Light.MsgPackSerializer.Serialize[T](T data, MemoryStream stream, MsgPackContext context)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.SendRequestImpl[TRequest](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.SendRequest[TRequest,TResponse](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.LogicalConnectionManager.SendRequest[TRequest,TResponse](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.Index.Select[TKey,TTuple](TKey key, SelectOptions options)\r\n   at AccessToDB.RepositoriesTarantool.TarantoolLiftsRepository.GetLiftByNameAsync(String name) in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB\\TarantoolRepositories\\TarantoolLiftsRepository.cs:line 63\r\n   at AccessToDB.Tests.LiftsRepositoryTests.<>c__DisplayClass11_0.<<TestGetLiftByNameAsyncFailsWhenNameNotExists>b__0>d.MoveNext() in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB.Tests\\LiftsRepositoryTests.cs:line 109\r\n--- End of stack trace from previous location ---\r\n   at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in /_/src/xunit.assert/Asserts/Record.cs:line 104","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"AccessToDB.Tests.LiftsRepositoryTests"},{"name":"testMethod","value":"AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: \"liftName5bb9312f-64f9-4d7c-a8af-68d64d186eb7\")"},{"name":"package","value":"AccessToDB.Tests.LiftsRepositoryTests"},{"name":"suite","value":"LiftsRepositorySuite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a4bc70d7baae4111.json","parameterValues":[]}