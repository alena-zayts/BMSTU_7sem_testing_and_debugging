{"uid":"f3f45bf470c39e4","name":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 218, initialSlopes: [Slope { SlopeID = 53, SlopeName = slopeNamed94dc4b7-4c39-4a72-a900-3db130ccc737, IsOpen = True, DifficultyLevel = 64, ConnectedLifts =  }, Slope { SlopeID = 232, SlopeName = slopeNamed78082c0-9ec4-4a1f-9a2d-93935af08b01, IsOpen = False, DifficultyLevel = 70, ConnectedLifts =  }, Slope { SlopeID = 221, SlopeName = slopeNamece5cb60a-0d65-4007-af77-85ef45ec52ed, IsOpen = True, DifficultyLevel = 124, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","fullName":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 218, initialSlopes: [Slope { SlopeID = 53, SlopeName = slopeNamed94dc4b7-4c39-4a72-a900-3db130ccc737, IsOpen = True, DifficultyLevel = 64, ConnectedLifts =  }, Slope { SlopeID = 232, SlopeName = slopeNamed78082c0-9ec4-4a1f-9a2d-93935af08b01, IsOpen = False, DifficultyLevel = 70, ConnectedLifts =  }, Slope { SlopeID = 221, SlopeName = slopeNamece5cb60a-0d65-4007-af77-85ef45ec52ed, IsOpen = True, DifficultyLevel = 124, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","historyId":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 218, initialSlopes: [Slope { SlopeID = 53, SlopeName = slopeNamed94dc4b7-4c39-4a72-a900-3db130ccc737, IsOpen = True, DifficultyLevel = 64, ConnectedLifts =  }, Slope { SlopeID = 232, SlopeName = slopeNamed78082c0-9ec4-4a1f-9a2d-93935af08b01, IsOpen = False, DifficultyLevel = 70, ConnectedLifts =  }, Slope { SlopeID = 221, SlopeName = slopeNamece5cb60a-0d65-4007-af77-85ef45ec52ed, IsOpen = True, DifficultyLevel = 124, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","time":{"start":1665861006380,"stop":1665861006478,"duration":98},"status":"passed","statusMessage":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"BL.Tests.SlopesServiceTest"},{"name":"testMethod","value":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 218, initialSlopes: [Slope { SlopeID = 53, SlopeName = slopeNamed94dc4b7-4c39-4a72-a900-3db130ccc737, IsOpen = True, DifficultyLevel = 64, ConnectedLifts =  }, Slope { SlopeID = 232, SlopeName = slopeNamed78082c0-9ec4-4a1f-9a2d-93935af08b01, IsOpen = False, DifficultyLevel = 70, ConnectedLifts =  }, Slope { SlopeID = 221, SlopeName = slopeNamece5cb60a-0d65-4007-af77-85ef45ec52ed, IsOpen = True, DifficultyLevel = 124, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })"},{"name":"package","value":"BL.Tests.SlopesServiceTest"},{"name":"suite","value":"SlopesServiceSuite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"f3f45bf470c39e4.json","parameterValues":[]}