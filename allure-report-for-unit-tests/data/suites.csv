"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","8","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","9","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 226, turnstile: Turnstile { TurnstileID = 94, LiftID = 167, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 226, turnstile: Turnstile { TurnstileID = 94, LiftID = 167, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","63","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 243, lift: Lift { LiftID = 152, LiftName = liftName0e3cba02-a3dd-4bf3-acda-ed4f96311a21, IsOpen = True, SeatsAmount = 170, LiftingTime = 70, QueueTime = 15, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 243, lift: Lift { LiftID = 152, LiftName = liftName0e3cba02-a3dd-4bf3-acda-ed4f96311a21, IsOpen = True, SeatsAmount = 170, LiftingTime = 70, QueueTime = 15, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminDeleteUser","BL.Tests.UsersServiceTests.TestAdminDeleteUser",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 58, turnstile: Turnstile { TurnstileID = 45, LiftID = 99, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 58, turnstile: Turnstile { TurnstileID = 45, LiftID = 99, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","19","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterOk","BL.Tests.UsersServiceTests.TestRegisterOk",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","11","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 3, initialLifts: [Lift { LiftID = 30, LiftName = liftNamee1eced53-4046-4c8b-bc43-685ed7a50452, IsOpen = True, SeatsAmount = 127, LiftingTime = 242, QueueTime = 214, ConnectedSlopes =  }, Lift { LiftID = 102, LiftName = liftNamea99905d5-b446-4acb-bb18-18b0d2b009ca, IsOpen = False, SeatsAmount = 141, LiftingTime = 95, QueueTime = 224, ConnectedSlopes =  }, Lift { LiftID = 218, LiftName = liftName68a771fc-ebeb-4835-8ab7-88463f5589d3, IsOpen = True, SeatsAmount = 105, LiftingTime = 255, QueueTime = 215, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 3, initialLifts: [Lift { LiftID = 30, LiftName = liftNamee1eced53-4046-4c8b-bc43-685ed7a50452, IsOpen = True, SeatsAmount = 127, LiftingTime = 242, QueueTime = 214, ConnectedSlopes =  }, Lift { LiftID = 102, LiftName = liftNamea99905d5-b446-4acb-bb18-18b0d2b009ca, IsOpen = False, SeatsAmount = 141, LiftingTime = 95, QueueTime = 224, ConnectedSlopes =  }, Lift { LiftID = 218, LiftName = liftName68a771fc-ebeb-4835-8ab7-88463f5589d3, IsOpen = True, SeatsAmount = 105, LiftingTime = 255, QueueTime = 215, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","63","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 151, initialTurnstiles: [Turnstile { TurnstileID = 163, LiftID = 96, IsOpen = True }, Turnstile { TurnstileID = 183, LiftID = 194, IsOpen = False }, Turnstile { TurnstileID = 173, LiftID = 98, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 151, initialTurnstiles: [Turnstile { TurnstileID = 163, LiftID = 96, IsOpen = True }, Turnstile { TurnstileID = 183, LiftID = 194, IsOpen = False }, Turnstile { TurnstileID = 173, LiftID = 98, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","9","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 199, lift: Lift { LiftID = 25, LiftName = liftName911e6c0c-e4ac-4846-995d-ad9e23e8258c, IsOpen = True, SeatsAmount = 75, LiftingTime = 197, QueueTime = 184, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 199, lift: Lift { LiftID = 25, LiftName = liftName911e6c0c-e4ac-4846-995d-ad9e23e8258c, IsOpen = True, SeatsAmount = 75, LiftingTime = 197, QueueTime = 184, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 199, turnstile: Turnstile { TurnstileID = 5, LiftID = 34, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 199, turnstile: Turnstile { TurnstileID = 5, LiftID = 34, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","63","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 133, LiftName = liftName9088aa70-c3d2-47b0-98f8-756df2e586d5, IsOpen = True, SeatsAmount = 141, LiftingTime = 221, QueueTime = 103, ConnectedSlopes =  }, slope: Slope { SlopeID = 85, SlopeName = slopeNamef990c615-9d4f-4ff3-86e2-9325a55450bb, IsOpen = False, DifficultyLevel = 55, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 133, LiftName = liftName9088aa70-c3d2-47b0-98f8-756df2e586d5, IsOpen = True, SeatsAmount = 141, LiftingTime = 221, QueueTime = 103, ConnectedSlopes =  }, slope: Slope { SlopeID = 85, SlopeName = slopeNamef990c615-9d4f-4ff3-86e2-9325a55450bb, IsOpen = False, DifficultyLevel = 55, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","8","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 146, slope: Slope { SlopeID = 105, SlopeName = slopeName9a6e73ad-c030-4a1a-ab66-87e157f592f0, IsOpen = True, DifficultyLevel = 241, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 146, slope: Slope { SlopeID = 105, SlopeName = slopeName9a6e73ad-c030-4a1a-ab66-87e157f592f0, IsOpen = True, DifficultyLevel = 241, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","4","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","6","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminUpdateUser","BL.Tests.UsersServiceTests.TestAdminUpdateUser",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","5","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","63","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","6","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 35, slope: Slope { SlopeID = 87, SlopeName = slopeName17f50774-d3dd-4cca-903f-8bd58065b692, IsOpen = True, DifficultyLevel = 170, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 35, slope: Slope { SlopeID = 87, SlopeName = slopeName17f50774-d3dd-4cca-903f-8bd58065b692, IsOpen = True, DifficultyLevel = 170, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","66","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUsers","BL.Tests.UsersServiceTests.TestAdminGetUsers",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","9","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","5","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 235, LiftID = 105, SlopeID = 127 }, LiftSlope { RecordID = 253, LiftID = 126, SlopeID = 213 }, LiftSlope { RecordID = 1, LiftID = 26, SlopeID = 38 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 235, LiftID = 105, SlopeID = 127 }, LiftSlope { RecordID = 253, LiftID = 126, SlopeID = 213 }, LiftSlope { RecordID = 1, LiftID = 26, SlopeID = 38 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","7","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 13, turnstile: Turnstile { TurnstileID = 222, LiftID = 192, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 13, turnstile: Turnstile { TurnstileID = 222, LiftID = 192, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","13","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 251, slope: Slope { SlopeID = 161, SlopeName = slopeNamecf4112fd-117b-4651-ac9c-993057ebd917, IsOpen = True, DifficultyLevel = 117, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 251, slope: Slope { SlopeID = 161, SlopeName = slopeNamecf4112fd-117b-4651-ac9c-993057ebd917, IsOpen = True, DifficultyLevel = 117, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","7","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","98","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 218, initialSlopes: [Slope { SlopeID = 53, SlopeName = slopeNamed94dc4b7-4c39-4a72-a900-3db130ccc737, IsOpen = True, DifficultyLevel = 64, ConnectedLifts =  }, Slope { SlopeID = 232, SlopeName = slopeNamed78082c0-9ec4-4a1f-9a2d-93935af08b01, IsOpen = False, DifficultyLevel = 70, ConnectedLifts =  }, Slope { SlopeID = 221, SlopeName = slopeNamece5cb60a-0d65-4007-af77-85ef45ec52ed, IsOpen = True, DifficultyLevel = 124, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 218, initialSlopes: [Slope { SlopeID = 53, SlopeName = slopeNamed94dc4b7-4c39-4a72-a900-3db130ccc737, IsOpen = True, DifficultyLevel = 64, ConnectedLifts =  }, Slope { SlopeID = 232, SlopeName = slopeNamed78082c0-9ec4-4a1f-9a2d-93935af08b01, IsOpen = False, DifficultyLevel = 70, ConnectedLifts =  }, Slope { SlopeID = 221, SlopeName = slopeNamece5cb60a-0d65-4007-af77-85ef45ec52ed, IsOpen = True, DifficultyLevel = 124, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","21","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 182, lift: Lift { LiftID = 201, LiftName = liftNameff14a586-7f60-45d9-8b6d-2aaf926a8b9d, IsOpen = True, SeatsAmount = 130, LiftingTime = 187, QueueTime = 249, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 182, lift: Lift { LiftID = 201, LiftName = liftNameff14a586-7f60-45d9-8b6d-2aaf926a8b9d, IsOpen = True, SeatsAmount = 130, LiftingTime = 187, QueueTime = 249, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","13","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 73, lift: Lift { LiftID = 216, LiftName = liftName8f15a10a-c084-47b8-a3eb-2bae3dcd7a85, IsOpen = True, SeatsAmount = 230, LiftingTime = 198, QueueTime = 193, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 73, lift: Lift { LiftID = 216, LiftName = liftName8f15a10a-c084-47b8-a3eb-2bae3dcd7a85, IsOpen = True, SeatsAmount = 230, LiftingTime = 198, QueueTime = 193, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","11","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 226, LiftName = liftNamef5121797-9ed7-4e9f-b58c-f8affecc671f, IsOpen = True, SeatsAmount = 82, LiftingTime = 255, QueueTime = 206, ConnectedSlopes =  }, slope: Slope { SlopeID = 49, SlopeName = slopeName49fa9689-d85b-4c9a-9945-d66556958033, IsOpen = False, DifficultyLevel = 135, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 226, LiftName = liftNamef5121797-9ed7-4e9f-b58c-f8affecc671f, IsOpen = True, SeatsAmount = 82, LiftingTime = 255, QueueTime = 206, ConnectedSlopes =  }, slope: Slope { SlopeID = 49, SlopeName = slopeName49fa9689-d85b-4c9a-9945-d66556958033, IsOpen = False, DifficultyLevel = 135, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","9","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 123, slope: Slope { SlopeID = 89, SlopeName = slopeName993eeffe-fb71-4adb-b92a-db5bbf86b738, IsOpen = True, DifficultyLevel = 86, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 123, slope: Slope { SlopeID = 89, SlopeName = slopeName993eeffe-fb71-4adb-b92a-db5bbf86b738, IsOpen = True, DifficultyLevel = 86, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","7","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInOk","BL.Tests.UsersServiceTests.TestLogInOk",""
"passed","Sat Oct 15 22:10:06 MSK 2022","Sat Oct 15 22:10:06 MSK 2022","9","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 162, slope: Slope { SlopeID = 81, SlopeName = slopeNamee7c17dee-26e4-4cff-a7e3-343a7d48183c, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 162, slope: Slope { SlopeID = 81, SlopeName = slopeNamee7c17dee-26e4-4cff-a7e3-343a7d48183c, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Sat Oct 15 22:10:26 MSK 2022","Sat Oct 15 22:10:27 MSK 2022","560","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamef454b29f-9a98-41ab-a985-58f36ac9f72e"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamef454b29f-9a98-41ab-a985-58f36ac9f72e"")",""
"passed","Sat Oct 15 22:10:15 MSK 2022","Sat Oct 15 22:10:16 MSK 2022","578","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaildb9304a3-e515-43b1-a3e1-6bf5d0b1f5fa"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaildb9304a3-e515-43b1-a3e1-6bf5d0b1f5fa"")",""
"passed","Sat Oct 15 22:10:33 MSK 2022","Sat Oct 15 22:10:34 MSK 2022","622","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 243, LiftID = 171, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 243, LiftID = 171, IsOpen = True })",""
"passed","Sat Oct 15 22:10:21 MSK 2022","Sat Oct 15 22:10:22 MSK 2022","608","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 85, LiftID = 25, SlopeID = 38 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 85, LiftID = 25, SlopeID = 38 })",""
"passed","Sat Oct 15 22:10:25 MSK 2022","Sat Oct 15 22:10:26 MSK 2022","563","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 120)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 120)",""
"passed","Sat Oct 15 22:10:19 MSK 2022","Sat Oct 15 22:10:20 MSK 2022","621","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk",""
"passed","Sat Oct 15 22:10:20 MSK 2022","Sat Oct 15 22:10:21 MSK 2022","654","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 203, SlopeName = slopeName84b327ff-3001-4e99-bd88-ea9b20d69070, IsOpen = True, DifficultyLevel = 12, ConnectedLifts =  }, slope2: Slope { SlopeID = 54, SlopeName = slopeNamecda3e0bb-3550-4528-abcd-16c6c031e468, IsOpen = False, DifficultyLevel = 91, ConnectedLifts =  }, lift1: Lift { LiftID = 86, LiftName = liftNamed5febfb3-434c-47c1-9fc2-a6ec8de288c6, IsOpen = True, SeatsAmount = 52, LiftingTime = 102, QueueTime = 172, ConnectedSlopes =  }, lift2: Lift { LiftID = 186, LiftName = liftNameb702ce23-aa50-4a66-bd84-a46c0af06de0, IsOpen = False, SeatsAmount = 56, LiftingTime = 98, QueueTime = 116, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 203, SlopeName = slopeName84b327ff-3001-4e99-bd88-ea9b20d69070, IsOpen = True, DifficultyLevel = 12, ConnectedLifts =  }, slope2: Slope { SlopeID = 54, SlopeName = slopeNamecda3e0bb-3550-4528-abcd-16c6c031e468, IsOpen = False, DifficultyLevel = 91, ConnectedLifts =  }, lift1: Lift { LiftID = 86, LiftName = liftNamed5febfb3-434c-47c1-9fc2-a6ec8de288c6, IsOpen = True, SeatsAmount = 52, LiftingTime = 102, QueueTime = 172, ConnectedSlopes =  }, lift2: Lift { LiftID = 186, LiftName = liftNameb702ce23-aa50-4a66-bd84-a46c0af06de0, IsOpen = False, SeatsAmount = 56, LiftingTime = 98, QueueTime = 116, ConnectedSlopes =  })",""
"passed","Sat Oct 15 22:10:16 MSK 2022","Sat Oct 15 22:10:16 MSK 2022","562","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 82)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 82)",""
"passed","Sat Oct 15 22:10:16 MSK 2022","Sat Oct 15 22:10:17 MSK 2022","598","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 252, CardID = 207, UserEmail = UserEmaileb64e90b-2d73-4598-aa80-87ab2fb3b632, Password = passwordead3ca44-978a-4126-aa6a-46c36042e559, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 252, CardID = 207, UserEmail = UserEmaileb64e90b-2d73-4598-aa80-87ab2fb3b632, Password = passwordead3ca44-978a-4126-aa6a-46c36042e559, Permissions = UNAUTHORIZED })",""
"passed","Sat Oct 15 22:10:35 MSK 2022","Sat Oct 15 22:10:36 MSK 2022","553","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty",""
"passed","Sat Oct 15 22:10:27 MSK 2022","Sat Oct 15 22:10:28 MSK 2022","607","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 213, SlopeName = slopeNameb3fd77e9-16ca-4058-9bff-9ca4e3a573ab, IsOpen = True, DifficultyLevel = 196, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 213, SlopeName = slopeNameb3fd77e9-16ca-4058-9bff-9ca4e3a573ab, IsOpen = True, DifficultyLevel = 196, ConnectedLifts =  })",""
"passed","Sat Oct 15 22:10:23 MSK 2022","Sat Oct 15 22:10:24 MSK 2022","558","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty",""
"failed","Sat Oct 15 22:10:37 MSK 2022","Sat Oct 15 22:10:38 MSK 2022","547","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName5bb9312f-64f9-4d7c-a8af-68d64d186eb7"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName5bb9312f-64f9-4d7c-a8af-68d64d186eb7"")",""
"passed","Sat Oct 15 22:10:20 MSK 2022","Sat Oct 15 22:10:20 MSK 2022","626","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 121, LiftID = 198, SlopeID = 40 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 121, LiftID = 198, SlopeID = 40 })",""
"failed","Sat Oct 15 22:10:24 MSK 2022","Sat Oct 15 22:10:25 MSK 2022","520","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 217, LiftID = 178, SlopeID = 117 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 217, LiftID = 178, SlopeID = 117 })",""
"failed","Sat Oct 15 22:10:22 MSK 2022","Sat Oct 15 22:10:22 MSK 2022","557","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 211, LiftID = 39, SlopeID = 213 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 211, LiftID = 39, SlopeID = 213 })",""
"passed","Sat Oct 15 22:10:17 MSK 2022","Sat Oct 15 22:10:18 MSK 2022","606","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 20, CardID = 37, UserEmail = UserEmail3ef67921-5221-4a68-a042-196b001e8baf, Password = passworde3767483-dc77-431c-8db4-2d41775a390a, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 20, CardID = 37, UserEmail = UserEmail3ef67921-5221-4a68-a042-196b001e8baf, Password = passworde3767483-dc77-431c-8db4-2d41775a390a, Permissions = UNAUTHORIZED })",""
"passed","Sat Oct 15 22:10:36 MSK 2022","Sat Oct 15 22:10:37 MSK 2022","594","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 1, LiftName = liftNameb36c6251-0118-4c5b-ad35-f22d84986076, IsOpen = True, SeatsAmount = 125, LiftingTime = 155, QueueTime = 115, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 1, LiftName = liftNameb36c6251-0118-4c5b-ad35-f22d84986076, IsOpen = True, SeatsAmount = 125, LiftingTime = 155, QueueTime = 115, ConnectedSlopes =  })",""
"passed","Sat Oct 15 22:10:29 MSK 2022","Sat Oct 15 22:10:29 MSK 2022","607","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 232, SlopeName = slopeName3aed927e-42a6-4a75-9220-6e593ab53a17, IsOpen = True, DifficultyLevel = 166, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 232, SlopeName = slopeName3aed927e-42a6-4a75-9220-6e593ab53a17, IsOpen = True, DifficultyLevel = 166, ConnectedLifts =  })",""
"passed","Sat Oct 15 22:10:25 MSK 2022","Sat Oct 15 22:10:25 MSK 2022","560","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 119)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 119)",""
"passed","Sat Oct 15 22:10:31 MSK 2022","Sat Oct 15 22:10:32 MSK 2022","752","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 211)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 211)",""
"passed","Sat Oct 15 22:10:32 MSK 2022","Sat Oct 15 22:10:33 MSK 2022","610","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 192, LiftID = 160, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 192, LiftID = 160, IsOpen = True })",""
"passed","Sat Oct 15 22:10:35 MSK 2022","Sat Oct 15 22:10:35 MSK 2022","565","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 136)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 136)",""
"passed","Sat Oct 15 22:10:28 MSK 2022","Sat Oct 15 22:10:29 MSK 2022","606","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 25, SlopeName = slopeName547d3614-f488-4f7c-bd79-c8e4fc07318f, IsOpen = True, DifficultyLevel = 122, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 25, SlopeName = slopeName547d3614-f488-4f7c-bd79-c8e4fc07318f, IsOpen = True, DifficultyLevel = 122, ConnectedLifts =  })",""
"passed","Sat Oct 15 22:10:18 MSK 2022","Sat Oct 15 22:10:19 MSK 2022","588","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 176, CardID = 65, UserEmail = UserEmail8c5612e2-59ed-4c18-81be-d30f3a0fd814, Password = password85b35131-0a73-4b9b-a1f1-0c8dafff1a05, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 176, CardID = 65, UserEmail = UserEmail8c5612e2-59ed-4c18-81be-d30f3a0fd814, Password = password85b35131-0a73-4b9b-a1f1-0c8dafff1a05, Permissions = UNAUTHORIZED })",""
"passed","Sat Oct 15 22:10:30 MSK 2022","Sat Oct 15 22:10:31 MSK 2022","607","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk",""
"passed","Sat Oct 15 22:10:23 MSK 2022","Sat Oct 15 22:10:23 MSK 2022","621","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk",""
"passed","Sat Oct 15 22:10:36 MSK 2022","Sat Oct 15 22:10:36 MSK 2022","606","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 67, LiftName = liftNamee451cce9-3b94-4fd7-9f2c-544b9cf17744, IsOpen = True, SeatsAmount = 99, LiftingTime = 118, QueueTime = 74, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 67, LiftName = liftNamee451cce9-3b94-4fd7-9f2c-544b9cf17744, IsOpen = True, SeatsAmount = 99, LiftingTime = 118, QueueTime = 74, ConnectedSlopes =  })",""
"failed","Sat Oct 15 22:10:34 MSK 2022","Sat Oct 15 22:10:34 MSK 2022","569","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk",""
"passed","Sat Oct 15 22:10:17 MSK 2022","Sat Oct 15 22:10:17 MSK 2022","558","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail7de2f709-bc89-4a5a-a550-4d932feaed86"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail7de2f709-bc89-4a5a-a550-4d932feaed86"")",""
"passed","Sat Oct 15 22:10:29 MSK 2022","Sat Oct 15 22:10:30 MSK 2022","599","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 40, LiftID = 87, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 40, LiftID = 87, IsOpen = True })",""
"passed","Sat Oct 15 22:10:26 MSK 2022","Sat Oct 15 22:10:26 MSK 2022","609","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk",""
"passed","Sat Oct 15 22:10:27 MSK 2022","Sat Oct 15 22:10:27 MSK 2022","557","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty",""
"passed","Sat Oct 15 22:10:14 MSK 2022","Sat Oct 15 22:10:15 MSK 2022","624","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty",""
"passed","Sat Oct 15 22:10:30 MSK 2022","Sat Oct 15 22:10:30 MSK 2022","560","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty",""
"passed","Sat Oct 15 22:10:18 MSK 2022","Sat Oct 15 22:10:18 MSK 2022","608","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 52, CardID = 24, UserEmail = UserEmail2870699f-07d5-4ddb-a39a-e0fe16e529d0, Password = passworda697cbea-fde1-4427-92b8-0b72de5af120, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 52, CardID = 24, UserEmail = UserEmail2870699f-07d5-4ddb-a39a-e0fe16e529d0, Password = passworda697cbea-fde1-4427-92b8-0b72de5af120, Permissions = UNAUTHORIZED })",""
"passed","Sat Oct 15 22:10:22 MSK 2022","Sat Oct 15 22:10:23 MSK 2022","610","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 236, LiftID = 152, SlopeID = 48 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 236, LiftID = 152, SlopeID = 48 })",""
"passed","Sat Oct 15 22:10:34 MSK 2022","Sat Oct 15 22:10:35 MSK 2022","599","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 17, LiftName = liftName0c7884d5-d298-41e7-940f-51be0f87263e, IsOpen = True, SeatsAmount = 68, LiftingTime = 154, QueueTime = 172, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 17, LiftName = liftName0c7884d5-d298-41e7-940f-51be0f87263e, IsOpen = True, SeatsAmount = 68, LiftingTime = 154, QueueTime = 172, ConnectedSlopes =  })",""
"passed","Sat Oct 15 22:10:32 MSK 2022","Sat Oct 15 22:10:32 MSK 2022","557","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 15)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 15)",""
