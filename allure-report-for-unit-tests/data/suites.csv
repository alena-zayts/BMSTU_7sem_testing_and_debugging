"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","8","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 210, turnstile: Turnstile { TurnstileID = 160, LiftID = 231, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 210, turnstile: Turnstile { TurnstileID = 160, LiftID = 231, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","109","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 22, lift: Lift { LiftID = 116, LiftName = liftName23108636-5c9a-4acd-bd0e-c49bbab27afd, IsOpen = True, SeatsAmount = 220, LiftingTime = 223, QueueTime = 237, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 22, lift: Lift { LiftID = 116, LiftName = liftName23108636-5c9a-4acd-bd0e-c49bbab27afd, IsOpen = True, SeatsAmount = 220, LiftingTime = 223, QueueTime = 237, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","13","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 59, slope: Slope { SlopeID = 152, SlopeName = slopeName55d87f6b-f333-4d44-a6b5-f5d1d1514c5e, IsOpen = True, DifficultyLevel = 55, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 59, slope: Slope { SlopeID = 152, SlopeName = slopeName55d87f6b-f333-4d44-a6b5-f5d1d1514c5e, IsOpen = True, DifficultyLevel = 55, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","12","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 29, lift: Lift { LiftID = 161, LiftName = liftName7f10f315-3fe0-40ef-9a97-eab34af38fc8, IsOpen = True, SeatsAmount = 42, LiftingTime = 102, QueueTime = 254, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 29, lift: Lift { LiftID = 161, LiftName = liftName7f10f315-3fe0-40ef-9a97-eab34af38fc8, IsOpen = True, SeatsAmount = 42, LiftingTime = 102, QueueTime = 254, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","20","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 191, initialLifts: [Lift { LiftID = 91, LiftName = liftName1465bcb9-d956-4d16-a569-7968f86079ba, IsOpen = True, SeatsAmount = 168, LiftingTime = 106, QueueTime = 255, ConnectedSlopes =  }, Lift { LiftID = 77, LiftName = liftNameb0226785-1663-4ddb-8440-f8458ed1b9e2, IsOpen = False, SeatsAmount = 159, LiftingTime = 237, QueueTime = 172, ConnectedSlopes =  }, Lift { LiftID = 118, LiftName = liftName5a59a1e5-6562-4c36-b827-8409ea202b35, IsOpen = True, SeatsAmount = 96, LiftingTime = 158, QueueTime = 125, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 191, initialLifts: [Lift { LiftID = 91, LiftName = liftName1465bcb9-d956-4d16-a569-7968f86079ba, IsOpen = True, SeatsAmount = 168, LiftingTime = 106, QueueTime = 255, ConnectedSlopes =  }, Lift { LiftID = 77, LiftName = liftNameb0226785-1663-4ddb-8440-f8458ed1b9e2, IsOpen = False, SeatsAmount = 159, LiftingTime = 237, QueueTime = 172, ConnectedSlopes =  }, Lift { LiftID = 118, LiftName = liftName5a59a1e5-6562-4c36-b827-8409ea202b35, IsOpen = True, SeatsAmount = 96, LiftingTime = 158, QueueTime = 125, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 242, slope: Slope { SlopeID = 36, SlopeName = slopeNameb639fd38-c67e-4bdf-bbb5-93dc7e1bf731, IsOpen = True, DifficultyLevel = 68, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 242, slope: Slope { SlopeID = 36, SlopeName = slopeNameb639fd38-c67e-4bdf-bbb5-93dc7e1bf731, IsOpen = True, DifficultyLevel = 68, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","78","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 174, LiftName = liftName0295c756-c303-48bd-84c9-0ae4bdeb1551, IsOpen = True, SeatsAmount = 10, LiftingTime = 12, QueueTime = 145, ConnectedSlopes =  }, slope: Slope { SlopeID = 90, SlopeName = slopeNameca667496-5220-473d-b233-9ae1b8d52c9c, IsOpen = False, DifficultyLevel = 198, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 174, LiftName = liftName0295c756-c303-48bd-84c9-0ae4bdeb1551, IsOpen = True, SeatsAmount = 10, LiftingTime = 12, QueueTime = 145, ConnectedSlopes =  }, slope: Slope { SlopeID = 90, SlopeName = slopeNameca667496-5220-473d-b233-9ae1b8d52c9c, IsOpen = False, DifficultyLevel = 198, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","16","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 34, initialSlopes: [Slope { SlopeID = 97, SlopeName = slopeNamef361d9dc-f21e-4fd1-a57f-3c4df5a5f8a8, IsOpen = True, DifficultyLevel = 27, ConnectedLifts =  }, Slope { SlopeID = 249, SlopeName = slopeName5875d7e2-a862-4fde-8d55-35d78220f7cd, IsOpen = False, DifficultyLevel = 21, ConnectedLifts =  }, Slope { SlopeID = 231, SlopeName = slopeNamed4174e3c-b591-4e13-b7d4-960c454d6da8, IsOpen = True, DifficultyLevel = 213, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 34, initialSlopes: [Slope { SlopeID = 97, SlopeName = slopeNamef361d9dc-f21e-4fd1-a57f-3c4df5a5f8a8, IsOpen = True, DifficultyLevel = 27, ConnectedLifts =  }, Slope { SlopeID = 249, SlopeName = slopeName5875d7e2-a862-4fde-8d55-35d78220f7cd, IsOpen = False, DifficultyLevel = 21, ConnectedLifts =  }, Slope { SlopeID = 231, SlopeName = slopeNamed4174e3c-b591-4e13-b7d4-960c454d6da8, IsOpen = True, DifficultyLevel = 213, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","19","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 144, turnstile: Turnstile { TurnstileID = 229, LiftID = 81, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 144, turnstile: Turnstile { TurnstileID = 229, LiftID = 81, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","8","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 4, lift: Lift { LiftID = 3, LiftName = liftName00965eed-40fd-4ed4-b099-6794a7f4a399, IsOpen = True, SeatsAmount = 138, LiftingTime = 238, QueueTime = 61, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 4, lift: Lift { LiftID = 3, LiftName = liftName00965eed-40fd-4ed4-b099-6794a7f4a399, IsOpen = True, SeatsAmount = 138, LiftingTime = 238, QueueTime = 61, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","8","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","13","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterOk","BL.Tests.UsersServiceTests.TestRegisterOk",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","8","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminUpdateUser","BL.Tests.UsersServiceTests.TestAdminUpdateUser",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","5","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","11","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","9","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 46, slope: Slope { SlopeID = 198, SlopeName = slopeName95fbbdd4-7d8b-4d87-bc33-5044add8f675, IsOpen = True, DifficultyLevel = 224, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 46, slope: Slope { SlopeID = 198, SlopeName = slopeName95fbbdd4-7d8b-4d87-bc33-5044add8f675, IsOpen = True, DifficultyLevel = 224, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","12","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","78","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 81, slope: Slope { SlopeID = 140, SlopeName = slopeNamedabd7dec-ac1e-4901-af62-418173fbdd99, IsOpen = True, DifficultyLevel = 156, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 81, slope: Slope { SlopeID = 140, SlopeName = slopeNamedabd7dec-ac1e-4901-af62-418173fbdd99, IsOpen = True, DifficultyLevel = 156, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","5","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInOk","BL.Tests.UsersServiceTests.TestLogInOk",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","14","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 104, lift: Lift { LiftID = 210, LiftName = liftNamebb39433f-b43b-4ad0-883c-b2a8f2076901, IsOpen = True, SeatsAmount = 180, LiftingTime = 190, QueueTime = 26, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 104, lift: Lift { LiftID = 210, LiftName = liftNamebb39433f-b43b-4ad0-883c-b2a8f2076901, IsOpen = True, SeatsAmount = 180, LiftingTime = 190, QueueTime = 26, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","11","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 180, LiftName = liftNamed3bd06a9-6f0d-49dd-95db-45f9e45352f1, IsOpen = True, SeatsAmount = 155, LiftingTime = 195, QueueTime = 79, ConnectedSlopes =  }, slope: Slope { SlopeID = 89, SlopeName = slopeNamec28f25bd-7cf6-48a7-9105-8e0e583f4d55, IsOpen = False, DifficultyLevel = 212, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 180, LiftName = liftNamed3bd06a9-6f0d-49dd-95db-45f9e45352f1, IsOpen = True, SeatsAmount = 155, LiftingTime = 195, QueueTime = 79, ConnectedSlopes =  }, slope: Slope { SlopeID = 89, SlopeName = slopeNamec28f25bd-7cf6-48a7-9105-8e0e583f4d55, IsOpen = False, DifficultyLevel = 212, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","79","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUsers","BL.Tests.UsersServiceTests.TestAdminGetUsers",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","8","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 97, turnstile: Turnstile { TurnstileID = 130, LiftID = 120, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 97, turnstile: Turnstile { TurnstileID = 130, LiftID = 120, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","8","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 249, turnstile: Turnstile { TurnstileID = 248, LiftID = 39, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 249, turnstile: Turnstile { TurnstileID = 248, LiftID = 39, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","5","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 182, LiftID = 56, SlopeID = 190 }, LiftSlope { RecordID = 203, LiftID = 137, SlopeID = 9 }, LiftSlope { RecordID = 2, LiftID = 219, SlopeID = 29 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 182, LiftID = 56, SlopeID = 190 }, LiftSlope { RecordID = 203, LiftID = 137, SlopeID = 9 }, LiftSlope { RecordID = 2, LiftID = 219, SlopeID = 29 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminDeleteUser","BL.Tests.UsersServiceTests.TestAdminDeleteUser",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 203, slope: Slope { SlopeID = 72, SlopeName = slopeName5347cb7e-168d-485b-9fec-afb906ed0102, IsOpen = True, DifficultyLevel = 216, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 203, slope: Slope { SlopeID = 72, SlopeName = slopeName5347cb7e-168d-485b-9fec-afb906ed0102, IsOpen = True, DifficultyLevel = 216, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","4","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","78","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Fri Oct 21 17:15:14 MSK 2022","Fri Oct 21 17:15:14 MSK 2022","78","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 118, initialTurnstiles: [Turnstile { TurnstileID = 53, LiftID = 202, IsOpen = True }, Turnstile { TurnstileID = 208, LiftID = 122, IsOpen = False }, Turnstile { TurnstileID = 182, LiftID = 37, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 118, initialTurnstiles: [Turnstile { TurnstileID = 53, LiftID = 202, IsOpen = True }, Turnstile { TurnstileID = 208, LiftID = 122, IsOpen = False }, Turnstile { TurnstileID = 182, LiftID = 37, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Fri Oct 21 17:15:36 MSK 2022","Fri Oct 21 17:15:36 MSK 2022","380","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 36, LiftID = 170, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 36, LiftID = 170, IsOpen = True })",""
"passed","Fri Oct 21 17:15:41 MSK 2022","Fri Oct 21 17:15:41 MSK 2022","424","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 214, SlopeName = slopeNamee5fc88ae-0001-42d4-9b86-1173e91be719, IsOpen = True, DifficultyLevel = 212, ConnectedLifts =  }, slope2: Slope { SlopeID = 105, SlopeName = slopeName2596e9dc-b17c-4b6d-9bfd-6250ac020993, IsOpen = False, DifficultyLevel = 5, ConnectedLifts =  }, lift1: Lift { LiftID = 108, LiftName = liftName5df3d6a5-1178-4f95-84b2-62a1c547b41f, IsOpen = True, SeatsAmount = 182, LiftingTime = 213, QueueTime = 75, ConnectedSlopes =  }, lift2: Lift { LiftID = 127, LiftName = liftName670100e9-39ba-41d5-a935-9216f775786f, IsOpen = False, SeatsAmount = 93, LiftingTime = 255, QueueTime = 88, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 214, SlopeName = slopeNamee5fc88ae-0001-42d4-9b86-1173e91be719, IsOpen = True, DifficultyLevel = 212, ConnectedLifts =  }, slope2: Slope { SlopeID = 105, SlopeName = slopeName2596e9dc-b17c-4b6d-9bfd-6250ac020993, IsOpen = False, DifficultyLevel = 5, ConnectedLifts =  }, lift1: Lift { LiftID = 108, LiftName = liftName5df3d6a5-1178-4f95-84b2-62a1c547b41f, IsOpen = True, SeatsAmount = 182, LiftingTime = 213, QueueTime = 75, ConnectedSlopes =  }, lift2: Lift { LiftID = 127, LiftName = liftName670100e9-39ba-41d5-a935-9216f775786f, IsOpen = False, SeatsAmount = 93, LiftingTime = 255, QueueTime = 88, ConnectedSlopes =  })",""
"passed","Fri Oct 21 17:15:30 MSK 2022","Fri Oct 21 17:15:30 MSK 2022","391","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 215, LiftName = liftNamec8101d99-5753-4edb-9d5e-8608885d0330, IsOpen = True, SeatsAmount = 223, LiftingTime = 166, QueueTime = 245, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 215, LiftName = liftNamec8101d99-5753-4edb-9d5e-8608885d0330, IsOpen = True, SeatsAmount = 223, LiftingTime = 166, QueueTime = 245, ConnectedSlopes =  })",""
"passed","Fri Oct 21 17:15:39 MSK 2022","Fri Oct 21 17:15:39 MSK 2022","360","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 49)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 49)",""
"passed","Fri Oct 21 17:15:43 MSK 2022","Fri Oct 21 17:15:43 MSK 2022","360","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty",""
"passed","Fri Oct 21 17:15:43 MSK 2022","Fri Oct 21 17:15:44 MSK 2022","390","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 155, SlopeName = slopeName11e96ccc-8012-4754-82ca-97a8ec3ffd77, IsOpen = True, DifficultyLevel = 19, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 155, SlopeName = slopeName11e96ccc-8012-4754-82ca-97a8ec3ffd77, IsOpen = True, DifficultyLevel = 19, ConnectedLifts =  })",""
"passed","Fri Oct 21 17:15:40 MSK 2022","Fri Oct 21 17:15:41 MSK 2022","390","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk",""
"passed","Fri Oct 21 17:15:29 MSK 2022","Fri Oct 21 17:15:29 MSK 2022","392","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 40, LiftName = liftName58f9a586-8718-4bd4-bd3c-35c7f6f05fc8, IsOpen = True, SeatsAmount = 204, LiftingTime = 252, QueueTime = 104, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 40, LiftName = liftName58f9a586-8718-4bd4-bd3c-35c7f6f05fc8, IsOpen = True, SeatsAmount = 204, LiftingTime = 252, QueueTime = 104, ConnectedSlopes =  })",""
"passed","Fri Oct 21 17:15:29 MSK 2022","Fri Oct 21 17:15:30 MSK 2022","360","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 174)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 174)",""
"passed","Fri Oct 21 17:15:32 MSK 2022","Fri Oct 21 17:15:33 MSK 2022","386","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 132, CardID = 133, UserEmail = UserEmailba0e0465-1771-4217-978d-0661e6cbdc60, Password = password549acf68-6593-45be-a599-72b08e488f24, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 132, CardID = 133, UserEmail = UserEmailba0e0465-1771-4217-978d-0661e6cbdc60, Password = password549acf68-6593-45be-a599-72b08e488f24, Permissions = UNAUTHORIZED })",""
"passed","Fri Oct 21 17:15:30 MSK 2022","Fri Oct 21 17:15:31 MSK 2022","360","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty",""
"passed","Fri Oct 21 17:15:42 MSK 2022","Fri Oct 21 17:15:42 MSK 2022","359","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamefde63f9e-c53d-4a92-a75b-f2c966418ed4"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamefde63f9e-c53d-4a92-a75b-f2c966418ed4"")",""
"passed","Fri Oct 21 17:15:39 MSK 2022","Fri Oct 21 17:15:40 MSK 2022","380","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 18, LiftID = 145, SlopeID = 210 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 18, LiftID = 145, SlopeID = 210 })",""
"passed","Fri Oct 21 17:15:36 MSK 2022","Fri Oct 21 17:15:37 MSK 2022","391","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk",""
"passed","Fri Oct 21 17:15:32 MSK 2022","Fri Oct 21 17:15:32 MSK 2022","361","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty",""
"passed","Fri Oct 21 17:15:29 MSK 2022","Fri Oct 21 17:15:29 MSK 2022","494","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk",""
"passed","Fri Oct 21 17:15:44 MSK 2022","Fri Oct 21 17:15:44 MSK 2022","389","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 217, SlopeName = slopeNamefc4af299-4d57-4bb0-a41b-a8384f7af8a9, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 217, SlopeName = slopeNamefc4af299-4d57-4bb0-a41b-a8384f7af8a9, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  })",""
"passed","Fri Oct 21 17:15:38 MSK 2022","Fri Oct 21 17:15:38 MSK 2022","390","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 94, LiftID = 144, SlopeID = 100 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 94, LiftID = 144, SlopeID = 100 })",""
"passed","Fri Oct 21 17:15:34 MSK 2022","Fri Oct 21 17:15:34 MSK 2022","359","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 219)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 219)",""
"passed","Fri Oct 21 17:15:31 MSK 2022","Fri Oct 21 17:15:31 MSK 2022","360","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNameacfd8749-a67d-4a45-88c2-d4366b2d49e9"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNameacfd8749-a67d-4a45-88c2-d4366b2d49e9"")",""
"passed","Fri Oct 21 17:15:35 MSK 2022","Fri Oct 21 17:15:36 MSK 2022","483","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 252)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 252)",""
"passed","Fri Oct 21 17:15:38 MSK 2022","Fri Oct 21 17:15:39 MSK 2022","390","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 187, LiftID = 60, SlopeID = 59 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 187, LiftID = 60, SlopeID = 59 })",""
"passed","Fri Oct 21 17:15:37 MSK 2022","Fri Oct 21 17:15:38 MSK 2022","391","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 208, LiftID = 108, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 208, LiftID = 108, IsOpen = True })",""
"passed","Fri Oct 21 17:15:34 MSK 2022","Fri Oct 21 17:15:35 MSK 2022","400","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk",""
"passed","Fri Oct 21 17:15:34 MSK 2022","Fri Oct 21 17:15:34 MSK 2022","390","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 172, CardID = 153, UserEmail = UserEmail4a3b3601-5f15-4c7b-b87f-761a97ec7c36, Password = password0ffa8ebb-0410-4d47-abbd-89a02092fd70, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 172, CardID = 153, UserEmail = UserEmail4a3b3601-5f15-4c7b-b87f-761a97ec7c36, Password = password0ffa8ebb-0410-4d47-abbd-89a02092fd70, Permissions = UNAUTHORIZED })",""
"passed","Fri Oct 21 17:15:42 MSK 2022","Fri Oct 21 17:15:42 MSK 2022","391","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk",""
"passed","Fri Oct 21 17:15:33 MSK 2022","Fri Oct 21 17:15:33 MSK 2022","361","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail59794708-a3bf-47fb-8a88-2a4b0ee31caf"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail59794708-a3bf-47fb-8a88-2a4b0ee31caf"")",""
"passed","Fri Oct 21 17:15:40 MSK 2022","Fri Oct 21 17:15:40 MSK 2022","392","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 254, LiftID = 43, SlopeID = 203 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 254, LiftID = 43, SlopeID = 203 })",""
"passed","Fri Oct 21 17:15:33 MSK 2022","Fri Oct 21 17:15:34 MSK 2022","390","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 96, CardID = 6, UserEmail = UserEmaild6222275-1a65-4a07-a317-4218efc7a2b3, Password = passworde03256f0-c0b7-4af7-ad05-e00c93e8c067, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 96, CardID = 6, UserEmail = UserEmaild6222275-1a65-4a07-a317-4218efc7a2b3, Password = passworde03256f0-c0b7-4af7-ad05-e00c93e8c067, Permissions = UNAUTHORIZED })",""
"passed","Fri Oct 21 17:15:35 MSK 2022","Fri Oct 21 17:15:35 MSK 2022","360","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty",""
"passed","Fri Oct 21 17:15:43 MSK 2022","Fri Oct 21 17:15:43 MSK 2022","361","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 29)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 29)",""
"passed","Fri Oct 21 17:15:37 MSK 2022","Fri Oct 21 17:15:37 MSK 2022","390","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 51, LiftID = 192, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 51, LiftID = 192, IsOpen = True })",""
"passed","Fri Oct 21 17:15:33 MSK 2022","Fri Oct 21 17:15:33 MSK 2022","360","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaile104bc56-c34e-4d8a-b3ba-ca5b8a6a4395"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaile104bc56-c34e-4d8a-b3ba-ca5b8a6a4395"")",""
"passed","Fri Oct 21 17:15:31 MSK 2022","Fri Oct 21 17:15:32 MSK 2022","382","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 75, CardID = 199, UserEmail = UserEmail7cdcef06-c62f-4f81-ba4b-51905cfbe27c, Password = passwordee1b62a4-0438-4121-8999-bb0fdb27a7f8, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 75, CardID = 199, UserEmail = UserEmail7cdcef06-c62f-4f81-ba4b-51905cfbe27c, Password = passwordee1b62a4-0438-4121-8999-bb0fdb27a7f8, Permissions = UNAUTHORIZED })",""
"passed","Fri Oct 21 17:15:37 MSK 2022","Fri Oct 21 17:15:37 MSK 2022","359","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 233)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 233)",""
"passed","Fri Oct 21 17:15:41 MSK 2022","Fri Oct 21 17:15:41 MSK 2022","360","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty",""
"passed","Fri Oct 21 17:15:31 MSK 2022","Fri Oct 21 17:15:31 MSK 2022","381","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 226, LiftName = liftName039f039a-2dfe-42a8-bf00-d68cc4b20a35, IsOpen = True, SeatsAmount = 48, LiftingTime = 172, QueueTime = 214, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 226, LiftName = liftName039f039a-2dfe-42a8-bf00-d68cc4b20a35, IsOpen = True, SeatsAmount = 48, LiftingTime = 172, QueueTime = 214, ConnectedSlopes =  })",""
"passed","Fri Oct 21 17:15:41 MSK 2022","Fri Oct 21 17:15:42 MSK 2022","382","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 109, SlopeName = slopeName9f75b98c-8c16-4727-99a1-8ac79fa4a1db, IsOpen = True, DifficultyLevel = 130, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 109, SlopeName = slopeName9f75b98c-8c16-4727-99a1-8ac79fa4a1db, IsOpen = True, DifficultyLevel = 130, ConnectedLifts =  })",""
"passed","Fri Oct 21 17:15:39 MSK 2022","Fri Oct 21 17:15:39 MSK 2022","380","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 181, LiftID = 11, SlopeID = 96 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 181, LiftID = 11, SlopeID = 96 })",""
