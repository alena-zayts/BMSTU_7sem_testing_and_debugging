"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","7","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 245, lift: Lift { LiftID = 85, LiftName = liftName61821629-e8a4-4b52-9aa7-70720a17b772, IsOpen = True, SeatsAmount = 117, LiftingTime = 198, QueueTime = 212, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 245, lift: Lift { LiftID = 85, LiftName = liftName61821629-e8a4-4b52-9aa7-70720a17b772, IsOpen = True, SeatsAmount = 117, LiftingTime = 198, QueueTime = 212, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminDeleteUser","BL.Tests.UsersServiceTests.TestAdminDeleteUser",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","4","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 130, turnstile: Turnstile { TurnstileID = 48, LiftID = 226, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 130, turnstile: Turnstile { TurnstileID = 48, LiftID = 226, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","6","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","11","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 174, slope: Slope { SlopeID = 154, SlopeName = slopeName40105d29-2645-4611-9291-53c65657cd5e, IsOpen = True, DifficultyLevel = 32, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 174, slope: Slope { SlopeID = 154, SlopeName = slopeName40105d29-2645-4611-9291-53c65657cd5e, IsOpen = True, DifficultyLevel = 32, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","8","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 114, slope: Slope { SlopeID = 88, SlopeName = slopeName500b73ab-aca1-4583-8baf-8352ac7c4834, IsOpen = True, DifficultyLevel = 123, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 114, slope: Slope { SlopeID = 88, SlopeName = slopeName500b73ab-aca1-4583-8baf-8352ac7c4834, IsOpen = True, DifficultyLevel = 123, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","64","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 255, turnstile: Turnstile { TurnstileID = 34, LiftID = 126, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 255, turnstile: Turnstile { TurnstileID = 34, LiftID = 126, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","65","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 171, lift: Lift { LiftID = 137, LiftName = liftName999d5d9c-d714-4909-8e90-278f44d55b07, IsOpen = True, SeatsAmount = 108, LiftingTime = 16, QueueTime = 88, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 171, lift: Lift { LiftID = 137, LiftName = liftName999d5d9c-d714-4909-8e90-278f44d55b07, IsOpen = True, SeatsAmount = 108, LiftingTime = 16, QueueTime = 88, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 245, turnstile: Turnstile { TurnstileID = 217, LiftID = 71, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 245, turnstile: Turnstile { TurnstileID = 217, LiftID = 71, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","65","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","7","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminUpdateUser","BL.Tests.UsersServiceTests.TestAdminUpdateUser",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","66","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUsers","BL.Tests.UsersServiceTests.TestAdminGetUsers",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","12","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 217, LiftName = liftNamef2da324f-cde3-46cc-be2e-34cce7d41267, IsOpen = True, SeatsAmount = 101, LiftingTime = 105, QueueTime = 49, ConnectedSlopes =  }, slope: Slope { SlopeID = 44, SlopeName = slopeNamee1eb9f21-8148-49e7-a416-76648cf299f8, IsOpen = False, DifficultyLevel = 103, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 217, LiftName = liftNamef2da324f-cde3-46cc-be2e-34cce7d41267, IsOpen = True, SeatsAmount = 101, LiftingTime = 105, QueueTime = 49, ConnectedSlopes =  }, slope: Slope { SlopeID = 44, SlopeName = slopeNamee1eb9f21-8148-49e7-a416-76648cf299f8, IsOpen = False, DifficultyLevel = 103, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","66","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 118, LiftID = 101, SlopeID = 109 }, LiftSlope { RecordID = 35, LiftID = 13, SlopeID = 84 }, LiftSlope { RecordID = 170, LiftID = 79, SlopeID = 11 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 118, LiftID = 101, SlopeID = 109 }, LiftSlope { RecordID = 35, LiftID = 13, SlopeID = 84 }, LiftSlope { RecordID = 170, LiftID = 79, SlopeID = 11 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","8","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 209, slope: Slope { SlopeID = 167, SlopeName = slopeName32448a88-85a0-410a-9d53-7fd924cd2995, IsOpen = True, DifficultyLevel = 234, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 209, slope: Slope { SlopeID = 167, SlopeName = slopeName32448a88-85a0-410a-9d53-7fd924cd2995, IsOpen = True, DifficultyLevel = 234, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","14","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 46, initialLifts: [Lift { LiftID = 212, LiftName = liftNamec82a662b-1bd6-448f-836b-243ea36fefca, IsOpen = True, SeatsAmount = 119, LiftingTime = 51, QueueTime = 89, ConnectedSlopes =  }, Lift { LiftID = 233, LiftName = liftName33144263-4294-406f-802c-e988849fbe46, IsOpen = False, SeatsAmount = 214, LiftingTime = 207, QueueTime = 58, ConnectedSlopes =  }, Lift { LiftID = 181, LiftName = liftName9a001ed9-c0d5-4ae4-bd7b-4d050bb6937e, IsOpen = True, SeatsAmount = 93, LiftingTime = 254, QueueTime = 199, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 46, initialLifts: [Lift { LiftID = 212, LiftName = liftNamec82a662b-1bd6-448f-836b-243ea36fefca, IsOpen = True, SeatsAmount = 119, LiftingTime = 51, QueueTime = 89, ConnectedSlopes =  }, Lift { LiftID = 233, LiftName = liftName33144263-4294-406f-802c-e988849fbe46, IsOpen = False, SeatsAmount = 214, LiftingTime = 207, QueueTime = 58, ConnectedSlopes =  }, Lift { LiftID = 181, LiftName = liftName9a001ed9-c0d5-4ae4-bd7b-4d050bb6937e, IsOpen = True, SeatsAmount = 93, LiftingTime = 254, QueueTime = 199, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","12","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 176, turnstile: Turnstile { TurnstileID = 4, LiftID = 245, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 176, turnstile: Turnstile { TurnstileID = 4, LiftID = 245, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","8","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 20, LiftName = liftName17eabe39-abfa-4f35-8838-cb3aac3f4f6a, IsOpen = True, SeatsAmount = 228, LiftingTime = 114, QueueTime = 239, ConnectedSlopes =  }, slope: Slope { SlopeID = 145, SlopeName = slopeNamee5ff5e11-ed19-44de-b30f-626c9ada9c43, IsOpen = False, DifficultyLevel = 248, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 20, LiftName = liftName17eabe39-abfa-4f35-8838-cb3aac3f4f6a, IsOpen = True, SeatsAmount = 228, LiftingTime = 114, QueueTime = 239, ConnectedSlopes =  }, slope: Slope { SlopeID = 145, SlopeName = slopeNamee5ff5e11-ed19-44de-b30f-626c9ada9c43, IsOpen = False, DifficultyLevel = 248, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","5","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","7","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 240, slope: Slope { SlopeID = 98, SlopeName = slopeName1a654772-31d8-4514-93c3-260a58bbfa9b, IsOpen = True, DifficultyLevel = 104, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 240, slope: Slope { SlopeID = 98, SlopeName = slopeName1a654772-31d8-4514-93c3-260a58bbfa9b, IsOpen = True, DifficultyLevel = 104, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInOk","BL.Tests.UsersServiceTests.TestLogInOk",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","11","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterOk","BL.Tests.UsersServiceTests.TestRegisterOk",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","12","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 190, lift: Lift { LiftID = 122, LiftName = liftName9b6b8d16-a755-4479-b4a2-f14c11dff62a, IsOpen = True, SeatsAmount = 86, LiftingTime = 40, QueueTime = 180, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 190, lift: Lift { LiftID = 122, LiftName = liftName9b6b8d16-a755-4479-b4a2-f14c11dff62a, IsOpen = True, SeatsAmount = 86, LiftingTime = 40, QueueTime = 180, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","5","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 40, slope: Slope { SlopeID = 235, SlopeName = slopeName77eb7400-44ef-4303-84d4-3c3ec8058430, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 40, slope: Slope { SlopeID = 235, SlopeName = slopeName77eb7400-44ef-4303-84d4-3c3ec8058430, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","5","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","7","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 228, lift: Lift { LiftID = 50, LiftName = liftNameacbd487c-b192-43c2-8bbe-1fbffdae8ef7, IsOpen = True, SeatsAmount = 78, LiftingTime = 241, QueueTime = 6, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 228, lift: Lift { LiftID = 50, LiftName = liftNameacbd487c-b192-43c2-8bbe-1fbffdae8ef7, IsOpen = True, SeatsAmount = 78, LiftingTime = 241, QueueTime = 6, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","4","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 105, initialTurnstiles: [Turnstile { TurnstileID = 152, LiftID = 95, IsOpen = True }, Turnstile { TurnstileID = 192, LiftID = 236, IsOpen = False }, Turnstile { TurnstileID = 115, LiftID = 141, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 105, initialTurnstiles: [Turnstile { TurnstileID = 152, LiftID = 95, IsOpen = True }, Turnstile { TurnstileID = 192, LiftID = 236, IsOpen = False }, Turnstile { TurnstileID = 115, LiftID = 141, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","93","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 12, initialSlopes: [Slope { SlopeID = 163, SlopeName = slopeNamea5f6b535-8e65-40a0-94b9-41aba7ba6f56, IsOpen = True, DifficultyLevel = 202, ConnectedLifts =  }, Slope { SlopeID = 216, SlopeName = slopeName20a225fb-51aa-4f13-b9eb-6a41d0284ba4, IsOpen = False, DifficultyLevel = 114, ConnectedLifts =  }, Slope { SlopeID = 188, SlopeName = slopeName61b2bfe2-3409-460b-aaad-683b0ccdf518, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 12, initialSlopes: [Slope { SlopeID = 163, SlopeName = slopeNamea5f6b535-8e65-40a0-94b9-41aba7ba6f56, IsOpen = True, DifficultyLevel = 202, ConnectedLifts =  }, Slope { SlopeID = 216, SlopeName = slopeName20a225fb-51aa-4f13-b9eb-6a41d0284ba4, IsOpen = False, DifficultyLevel = 114, ConnectedLifts =  }, Slope { SlopeID = 188, SlopeName = slopeName61b2bfe2-3409-460b-aaad-683b0ccdf518, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","7","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser",""
"passed","Thu Nov 03 09:35:25 MSK 2022","Thu Nov 03 09:35:25 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword",""
"passed","Thu Nov 03 09:36:08 MSK 2022","Thu Nov 03 09:36:08 MSK 2022","396","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 168, LiftID = 238, SlopeID = 253 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 168, LiftID = 238, SlopeID = 253 })",""
"passed","Thu Nov 03 09:35:59 MSK 2022","Thu Nov 03 09:36:00 MSK 2022","388","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 238, CardID = 20, UserEmail = UserEmailea93621e-fe44-4ab5-9949-3b4f6612900d, Password = password9ba4f7f2-bdad-4db3-be06-f291edcdae9b, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 238, CardID = 20, UserEmail = UserEmailea93621e-fe44-4ab5-9949-3b4f6612900d, Password = password9ba4f7f2-bdad-4db3-be06-f291edcdae9b, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 09:35:43 MSK 2022","Thu Nov 03 09:35:43 MSK 2022","385","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 188, LiftID = 176, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 188, LiftID = 176, IsOpen = True })",""
"failed","Thu Nov 03 09:36:09 MSK 2022","Thu Nov 03 09:36:09 MSK 2022","46","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 29)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 29)",""
"passed","Thu Nov 03 09:36:07 MSK 2022","Thu Nov 03 09:36:08 MSK 2022","384","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 251, LiftID = 241, SlopeID = 243 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 251, LiftID = 241, SlopeID = 243 })",""
"passed","Thu Nov 03 09:36:10 MSK 2022","Thu Nov 03 09:36:10 MSK 2022","397","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 220, LiftID = 219, SlopeID = 176 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 220, LiftID = 219, SlopeID = 176 })",""
"passed","Thu Nov 03 09:35:47 MSK 2022","Thu Nov 03 09:35:47 MSK 2022","381","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 103, SlopeName = slopeNamedfc167ac-b450-4133-a659-d62eccc7de42, IsOpen = True, DifficultyLevel = 207, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 103, SlopeName = slopeNamedfc167ac-b450-4133-a659-d62eccc7de42, IsOpen = True, DifficultyLevel = 207, ConnectedLifts =  })",""
"passed","Thu Nov 03 09:36:08 MSK 2022","Thu Nov 03 09:36:09 MSK 2022","425","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 216, SlopeName = slopeNamebd6519e2-7d29-4e05-835d-3ede90986f9f, IsOpen = True, DifficultyLevel = 201, ConnectedLifts =  }, slope2: Slope { SlopeID = 210, SlopeName = slopeNameb470e1b5-2353-478f-a6ee-bc2c6af22130, IsOpen = False, DifficultyLevel = 126, ConnectedLifts =  }, lift1: Lift { LiftID = 161, LiftName = liftNameb8218959-1c6a-415f-aa09-85b5fbd7dbaf, IsOpen = True, SeatsAmount = 152, LiftingTime = 215, QueueTime = 164, ConnectedSlopes =  }, lift2: Lift { LiftID = 181, LiftName = liftNamebb25829d-000a-42f1-86b5-a56f27cb66d4, IsOpen = False, SeatsAmount = 52, LiftingTime = 173, QueueTime = 220, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 216, SlopeName = slopeNamebd6519e2-7d29-4e05-835d-3ede90986f9f, IsOpen = True, DifficultyLevel = 201, ConnectedLifts =  }, slope2: Slope { SlopeID = 210, SlopeName = slopeNameb470e1b5-2353-478f-a6ee-bc2c6af22130, IsOpen = False, DifficultyLevel = 126, ConnectedLifts =  }, lift1: Lift { LiftID = 161, LiftName = liftNameb8218959-1c6a-415f-aa09-85b5fbd7dbaf, IsOpen = True, SeatsAmount = 152, LiftingTime = 215, QueueTime = 164, ConnectedSlopes =  }, lift2: Lift { LiftID = 181, LiftName = liftNamebb25829d-000a-42f1-86b5-a56f27cb66d4, IsOpen = False, SeatsAmount = 52, LiftingTime = 173, QueueTime = 220, ConnectedSlopes =  })",""
"passed","Thu Nov 03 09:35:43 MSK 2022","Thu Nov 03 09:35:43 MSK 2022","364","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty",""
"passed","Thu Nov 03 09:36:09 MSK 2022","Thu Nov 03 09:36:09 MSK 2022","393","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk",""
"passed","Thu Nov 03 09:36:12 MSK 2022","Thu Nov 03 09:36:12 MSK 2022","394","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 161, LiftName = liftName01717f20-df51-43b1-acfb-d8d8c77e25d5, IsOpen = True, SeatsAmount = 131, LiftingTime = 84, QueueTime = 15, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 161, LiftName = liftName01717f20-df51-43b1-acfb-d8d8c77e25d5, IsOpen = True, SeatsAmount = 131, LiftingTime = 84, QueueTime = 15, ConnectedSlopes =  })",""
"passed","Thu Nov 03 09:36:09 MSK 2022","Thu Nov 03 09:36:10 MSK 2022","369","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty",""
"passed","Thu Nov 03 09:36:13 MSK 2022","Thu Nov 03 09:36:13 MSK 2022","362","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName5a858d5a-c9e2-4f91-ba88-2b88e4340dc5"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName5a858d5a-c9e2-4f91-ba88-2b88e4340dc5"")",""
"passed","Thu Nov 03 09:36:10 MSK 2022","Thu Nov 03 09:36:10 MSK 2022","389","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 17, LiftID = 78, SlopeID = 241 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 17, LiftID = 78, SlopeID = 241 })",""
"passed","Thu Nov 03 09:35:45 MSK 2022","Thu Nov 03 09:35:46 MSK 2022","1396","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName4c4639dd-910b-440c-82b1-1835ed82f55b"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName4c4639dd-910b-440c-82b1-1835ed82f55b"")",""
"passed","Thu Nov 03 09:36:13 MSK 2022","Thu Nov 03 09:36:14 MSK 2022","362","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 10)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 10)",""
"passed","Thu Nov 03 09:35:44 MSK 2022","Thu Nov 03 09:35:44 MSK 2022","409","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk",""
"passed","Thu Nov 03 09:35:48 MSK 2022","Thu Nov 03 09:35:48 MSK 2022","393","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk",""
"passed","Thu Nov 03 09:35:47 MSK 2022","Thu Nov 03 09:35:47 MSK 2022","394","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 24, SlopeName = slopeNamec85185ee-e0be-43e7-916c-ade878464ead, IsOpen = True, DifficultyLevel = 205, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 24, SlopeName = slopeNamec85185ee-e0be-43e7-916c-ade878464ead, IsOpen = True, DifficultyLevel = 205, ConnectedLifts =  })",""
"passed","Thu Nov 03 09:36:01 MSK 2022","Thu Nov 03 09:36:01 MSK 2022","399","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 147, CardID = 181, UserEmail = UserEmail00bee88d-b180-442a-940e-8ec3ae6466f3, Password = password5e0defe5-dab9-48ae-8ba4-97c52edfee01, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 147, CardID = 181, UserEmail = UserEmail00bee88d-b180-442a-940e-8ec3ae6466f3, Password = password5e0defe5-dab9-48ae-8ba4-97c52edfee01, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 09:35:44 MSK 2022","Thu Nov 03 09:35:45 MSK 2022","509","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 130)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 130)",""
"passed","Thu Nov 03 09:35:47 MSK 2022","Thu Nov 03 09:35:48 MSK 2022","366","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 223)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 223)",""
"passed","Thu Nov 03 09:35:39 MSK 2022","Thu Nov 03 09:35:42 MSK 2022","3612","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 246, LiftID = 143, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 246, LiftID = 143, IsOpen = True })",""
"passed","Thu Nov 03 09:35:42 MSK 2022","Thu Nov 03 09:35:43 MSK 2022","398","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 109, LiftID = 238, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 109, LiftID = 238, IsOpen = True })",""
"passed","Thu Nov 03 09:36:10 MSK 2022","Thu Nov 03 09:36:12 MSK 2022","1407","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk",""
"passed","Thu Nov 03 09:36:12 MSK 2022","Thu Nov 03 09:36:13 MSK 2022","386","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 193, LiftName = liftName30e9de4a-2e3d-42e6-9636-b638d376f3ca, IsOpen = True, SeatsAmount = 251, LiftingTime = 113, QueueTime = 243, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 193, LiftName = liftName30e9de4a-2e3d-42e6-9636-b638d376f3ca, IsOpen = True, SeatsAmount = 251, LiftingTime = 113, QueueTime = 243, ConnectedSlopes =  })",""
"passed","Thu Nov 03 09:35:49 MSK 2022","Thu Nov 03 09:35:59 MSK 2022","10739","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty",""
"passed","Thu Nov 03 09:36:00 MSK 2022","Thu Nov 03 09:36:01 MSK 2022","363","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emailcbe48b7c-a97c-43c9-b21f-054b64803a23"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emailcbe48b7c-a97c-43c9-b21f-054b64803a23"")",""
"passed","Thu Nov 03 09:36:03 MSK 2022","Thu Nov 03 09:36:07 MSK 2022","4846","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 197, LiftID = 47, SlopeID = 220 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 197, LiftID = 47, SlopeID = 220 })",""
"passed","Thu Nov 03 09:35:48 MSK 2022","Thu Nov 03 09:35:49 MSK 2022","362","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty",""
"passed","Thu Nov 03 09:36:02 MSK 2022","Thu Nov 03 09:36:02 MSK 2022","361","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmailb72d66fe-1b02-42d9-9e2a-7a934b5cf798"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmailb72d66fe-1b02-42d9-9e2a-7a934b5cf798"")",""
"passed","Thu Nov 03 09:36:01 MSK 2022","Thu Nov 03 09:36:01 MSK 2022","366","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 176)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 176)",""
"passed","Thu Nov 03 09:36:13 MSK 2022","Thu Nov 03 09:36:13 MSK 2022","361","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty",""
"passed","Thu Nov 03 09:36:01 MSK 2022","Thu Nov 03 09:36:02 MSK 2022","396","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 144, CardID = 174, UserEmail = UserEmail6f81ca5f-d67e-416a-893a-b2b29a017f64, Password = passworddec291bf-51e2-4139-87d0-73070f0461f4, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 144, CardID = 174, UserEmail = UserEmail6f81ca5f-d67e-416a-893a-b2b29a017f64, Password = passworddec291bf-51e2-4139-87d0-73070f0461f4, Permissions = UNAUTHORIZED })",""
"passed","Thu Nov 03 09:36:14 MSK 2022","Thu Nov 03 09:36:14 MSK 2022","394","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 97, LiftName = liftName5a49f231-d687-4e70-87cd-f649dcd27740, IsOpen = True, SeatsAmount = 252, LiftingTime = 55, QueueTime = 224, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 97, LiftName = liftName5a49f231-d687-4e70-87cd-f649dcd27740, IsOpen = True, SeatsAmount = 252, LiftingTime = 55, QueueTime = 224, ConnectedSlopes =  })",""
"passed","Thu Nov 03 09:35:46 MSK 2022","Thu Nov 03 09:35:47 MSK 2022","393","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 214, SlopeName = slopeName84f0284a-6cd7-4db8-96c8-29679f8be816, IsOpen = True, DifficultyLevel = 29, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 214, SlopeName = slopeName84f0284a-6cd7-4db8-96c8-29679f8be816, IsOpen = True, DifficultyLevel = 29, ConnectedLifts =  })",""
"passed","Thu Nov 03 09:35:43 MSK 2022","Thu Nov 03 09:35:44 MSK 2022","363","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 11)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 11)",""
"passed","Thu Nov 03 09:36:02 MSK 2022","Thu Nov 03 09:36:03 MSK 2022","407","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk",""
"passed","Thu Nov 03 09:36:00 MSK 2022","Thu Nov 03 09:36:00 MSK 2022","387","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 210, CardID = 16, UserEmail = UserEmailc43eb4d6-3d05-4a20-b180-16770b2fe8dc, Password = password694827b9-7540-48f4-bbd9-21bfff39efec, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 210, CardID = 16, UserEmail = UserEmailc43eb4d6-3d05-4a20-b180-16770b2fe8dc, Password = password694827b9-7540-48f4-bbd9-21bfff39efec, Permissions = UNAUTHORIZED })",""
