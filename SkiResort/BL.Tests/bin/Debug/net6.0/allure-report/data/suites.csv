"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","46","","","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 28, lift: Lift { LiftID = 141, LiftName = liftNameea83b641-b3f5-4445-b874-02d48f6d996b, IsOpen = True, SeatsAmount = 123, LiftingTime = 124, QueueTime = 29, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryMock: Mock<ILiftsRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 28, lift: Lift { LiftID = 141, LiftName = liftNameea83b641-b3f5-4445-b874-02d48f6d996b, IsOpen = True, SeatsAmount = 123, LiftingTime = 124, QueueTime = 29, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryMock: Mock<ILiftsRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","5","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 72, slope: Slope { SlopeID = 98, SlopeName = slopeName1f051ae7-3547-494b-a47c-889855e4a2ce, IsOpen = True, DifficultyLevel = 199, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 72, slope: Slope { SlopeID = 98, SlopeName = slopeName1f051ae7-3547-494b-a47c-889855e4a2ce, IsOpen = True, DifficultyLevel = 199, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:31:17 MSK 2022","Mon Oct 10 16:31:17 MSK 2022","5","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 27, slope: Slope { SlopeID = 137, SlopeName = slopeName13ca055e-9f84-4adb-bf7d-2a46ddd0bf67, IsOpen = True, DifficultyLevel = 50, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 27, slope: Slope { SlopeID = 137, SlopeName = slopeName13ca055e-9f84-4adb-bf7d-2a46ddd0bf67, IsOpen = True, DifficultyLevel = 50, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","2","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","46","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Mon Oct 10 16:31:26 MSK 2022","Mon Oct 10 16:31:26 MSK 2022","7","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 251, slope: Slope { SlopeID = 2, SlopeName = slopeName23551409-a0ac-4e2e-a387-cc62a1c4ec99, IsOpen = True, DifficultyLevel = 108, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 251, slope: Slope { SlopeID = 2, SlopeName = slopeName23551409-a0ac-4e2e-a387-cc62a1c4ec99, IsOpen = True, DifficultyLevel = 108, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:31:17 MSK 2022","Mon Oct 10 16:31:17 MSK 2022","70","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 223, initialSlopes: [Slope { SlopeID = 31, SlopeName = slopeName78a8a4d2-1296-4546-80db-50681699b5ba, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }, Slope { SlopeID = 136, SlopeName = slopeName79aeb278-46b8-4014-afab-0eee616d54c1, IsOpen = False, DifficultyLevel = 5, ConnectedLifts =  }, Slope { SlopeID = 191, SlopeName = slopeNamea8b74bba-ea7f-4d17-995d-21836a578578, IsOpen = True, DifficultyLevel = 195, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 223, initialSlopes: [Slope { SlopeID = 31, SlopeName = slopeName78a8a4d2-1296-4546-80db-50681699b5ba, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }, Slope { SlopeID = 136, SlopeName = slopeName79aeb278-46b8-4014-afab-0eee616d54c1, IsOpen = False, DifficultyLevel = 5, ConnectedLifts =  }, Slope { SlopeID = 191, SlopeName = slopeNamea8b74bba-ea7f-4d17-995d-21836a578578, IsOpen = True, DifficultyLevel = 195, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:41:04 MSK 2022","Mon Oct 10 16:41:04 MSK 2022","10","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 41, slope: Slope { SlopeID = 11, SlopeName = slopeName5bd06b6e-2a58-4286-ad55-a236778ef590, IsOpen = True, DifficultyLevel = 73, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 41, slope: Slope { SlopeID = 11, SlopeName = slopeName5bd06b6e-2a58-4286-ad55-a236778ef590, IsOpen = True, DifficultyLevel = 73, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:30:52 MSK 2022","Mon Oct 10 16:30:52 MSK 2022","61","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 239, slope: Slope { SlopeID = 85, SlopeName = slopeName35e39d39-1f38-4771-b8d2-1508dfcd356a, IsOpen = True, DifficultyLevel = 2, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 239, slope: Slope { SlopeID = 85, SlopeName = slopeName35e39d39-1f38-4771-b8d2-1508dfcd356a, IsOpen = True, DifficultyLevel = 2, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","8","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 234, slope: Slope { SlopeID = 11, SlopeName = slopeName153bfd6b-d995-4d70-bd98-78a561d0aa14, IsOpen = True, DifficultyLevel = 67, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 234, slope: Slope { SlopeID = 11, SlopeName = slopeName153bfd6b-d995-4d70-bd98-78a561d0aa14, IsOpen = True, DifficultyLevel = 67, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:6>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","2","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Mon Oct 10 16:31:35 MSK 2022","Mon Oct 10 16:31:35 MSK 2022","7","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 127, slope: Slope { SlopeID = 152, SlopeName = slopeName9a498a68-fdd0-4fa7-b6cb-475c65aeb7c1, IsOpen = True, DifficultyLevel = 118, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 127, slope: Slope { SlopeID = 152, SlopeName = slopeName9a498a68-fdd0-4fa7-b6cb-475c65aeb7c1, IsOpen = True, DifficultyLevel = 118, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:31:35 MSK 2022","Mon Oct 10 16:31:35 MSK 2022","4","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 32, slope: Slope { SlopeID = 89, SlopeName = slopeName7a6e54f5-2b92-4b7c-9a5f-849a7a00fcc5, IsOpen = True, DifficultyLevel = 12, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 32, slope: Slope { SlopeID = 89, SlopeName = slopeName7a6e54f5-2b92-4b7c-9a5f-849a7a00fcc5, IsOpen = True, DifficultyLevel = 12, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","9","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterOk","BL.Tests.UsersServiceTests.TestRegisterOk",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","2","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","1","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","1","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","37","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 29, initialSlopes: [Slope { SlopeID = 138, SlopeName = slopeName0b944e55-a2e6-49bc-b5ff-ce1c35418aac, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  }, Slope { SlopeID = 141, SlopeName = slopeNamef7e65efa-d860-4059-98b1-f53e3a6b6be8, IsOpen = False, DifficultyLevel = 78, ConnectedLifts =  }, Slope { SlopeID = 132, SlopeName = slopeName45738300-b381-4080-be93-c24bc8f3eb19, IsOpen = True, DifficultyLevel = 31, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:7>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 29, initialSlopes: [Slope { SlopeID = 138, SlopeName = slopeName0b944e55-a2e6-49bc-b5ff-ce1c35418aac, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  }, Slope { SlopeID = 141, SlopeName = slopeNamef7e65efa-d860-4059-98b1-f53e3a6b6be8, IsOpen = False, DifficultyLevel = 78, ConnectedLifts =  }, Slope { SlopeID = 132, SlopeName = slopeName45738300-b381-4080-be93-c24bc8f3eb19, IsOpen = True, DifficultyLevel = 31, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:7>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","2","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","2","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions",""
"passed","Mon Oct 10 16:31:34 MSK 2022","Mon Oct 10 16:31:35 MSK 2022","52","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 249, slope: Slope { SlopeID = 65, SlopeName = slopeName69068406-4ade-4c95-8d90-0de8683f1f65, IsOpen = True, DifficultyLevel = 37, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 249, slope: Slope { SlopeID = 65, SlopeName = slopeName69068406-4ade-4c95-8d90-0de8683f1f65, IsOpen = True, DifficultyLevel = 37, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:41:04 MSK 2022","Mon Oct 10 16:41:04 MSK 2022","37","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 205, slope: Slope { SlopeID = 225, SlopeName = slopeNamee189c965-1176-4fb1-9b28-ce9faaffb14c, IsOpen = True, DifficultyLevel = 122, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 205, slope: Slope { SlopeID = 225, SlopeName = slopeNamee189c965-1176-4fb1-9b28-ce9faaffb14c, IsOpen = True, DifficultyLevel = 122, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:31:17 MSK 2022","Mon Oct 10 16:31:17 MSK 2022","8","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 31, slope: Slope { SlopeID = 88, SlopeName = slopeName19f8c60e-63de-444e-a29b-26ea5f5f5957, IsOpen = True, DifficultyLevel = 113, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 31, slope: Slope { SlopeID = 88, SlopeName = slopeName19f8c60e-63de-444e-a29b-26ea5f5f5957, IsOpen = True, DifficultyLevel = 113, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","2","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","1","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","46","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 73, slope: Slope { SlopeID = 36, SlopeName = slopeNameeb4f862d-3188-4d25-8477-c97dfbcc8dc5, IsOpen = True, DifficultyLevel = 103, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 73, slope: Slope { SlopeID = 36, SlopeName = slopeNameeb4f862d-3188-4d25-8477-c97dfbcc8dc5, IsOpen = True, DifficultyLevel = 103, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","7","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 64, slope: Slope { SlopeID = 22, SlopeName = slopeName9709641c-3b87-4828-9753-f7d3f8872237, IsOpen = True, DifficultyLevel = 236, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 64, slope: Slope { SlopeID = 22, SlopeName = slopeName9709641c-3b87-4828-9753-f7d3f8872237, IsOpen = True, DifficultyLevel = 236, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","4","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword",""
"passed","Mon Oct 10 16:31:26 MSK 2022","Mon Oct 10 16:31:26 MSK 2022","4","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 176, slope: Slope { SlopeID = 197, SlopeName = slopeNameb1b87d17-4e5d-4267-8480-2c90a2d14cd5, IsOpen = True, DifficultyLevel = 83, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 176, slope: Slope { SlopeID = 197, SlopeName = slopeNameb1b87d17-4e5d-4267-8480-2c90a2d14cd5, IsOpen = True, DifficultyLevel = 83, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:41:04 MSK 2022","Mon Oct 10 16:41:04 MSK 2022","18","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 21, slope: Slope { SlopeID = 242, SlopeName = slopeNamec14b7dc3-f676-4d8c-827b-c33e8295fca2, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 21, slope: Slope { SlopeID = 242, SlopeName = slopeNamec14b7dc3-f676-4d8c-827b-c33e8295fca2, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","4","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminDeleteUser","BL.Tests.UsersServiceTests.TestAdminDeleteUser",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","10","","","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 122, lift: Lift { LiftID = 227, LiftName = liftName7592aa65-4c01-445c-93fa-9b613b8c4b89, IsOpen = True, SeatsAmount = 82, LiftingTime = 137, QueueTime = 45, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryMock: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 122, lift: Lift { LiftID = 227, LiftName = liftName7592aa65-4c01-445c-93fa-9b613b8c4b89, IsOpen = True, SeatsAmount = 82, LiftingTime = 137, QueueTime = 45, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryMock: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","6","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","9","","","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 105, lift: Lift { LiftID = 74, LiftName = liftName8a81764d-e70e-4f65-a4e7-48dfc19594b8, IsOpen = True, SeatsAmount = 223, LiftingTime = 245, QueueTime = 205, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryMock: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 105, lift: Lift { LiftID = 74, LiftName = liftName8a81764d-e70e-4f65-a4e7-48dfc19594b8, IsOpen = True, SeatsAmount = 223, LiftingTime = 245, QueueTime = 205, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryMock: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Mon Oct 10 16:31:17 MSK 2022","Mon Oct 10 16:31:17 MSK 2022","7","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 127, slope: Slope { SlopeID = 101, SlopeName = slopeNameead2f45e-b1c9-463a-80d9-7e808d9478b6, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 127, slope: Slope { SlopeID = 101, SlopeName = slopeNameead2f45e-b1c9-463a-80d9-7e808d9478b6, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","3","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions",""
"passed","Mon Oct 10 16:41:04 MSK 2022","Mon Oct 10 16:41:04 MSK 2022","11","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 129, initialSlopes: [Slope { SlopeID = 87, SlopeName = slopeName4ce50c4e-b32a-4a14-9902-1386d8847275, IsOpen = True, DifficultyLevel = 114, ConnectedLifts =  }, Slope { SlopeID = 76, SlopeName = slopeName06010062-e1fd-4c71-b762-6ab0b2a44644, IsOpen = False, DifficultyLevel = 90, ConnectedLifts =  }, Slope { SlopeID = 147, SlopeName = slopeName617a6f08-4429-408b-9c9e-3235c6f4fcea, IsOpen = True, DifficultyLevel = 160, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 129, initialSlopes: [Slope { SlopeID = 87, SlopeName = slopeName4ce50c4e-b32a-4a14-9902-1386d8847275, IsOpen = True, DifficultyLevel = 114, ConnectedLifts =  }, Slope { SlopeID = 76, SlopeName = slopeName06010062-e1fd-4c71-b762-6ab0b2a44644, IsOpen = False, DifficultyLevel = 90, ConnectedLifts =  }, Slope { SlopeID = 147, SlopeName = slopeName617a6f08-4429-408b-9c9e-3235c6f4fcea, IsOpen = True, DifficultyLevel = 160, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","2","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","5","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminUpdateUser","BL.Tests.UsersServiceTests.TestAdminUpdateUser",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","3","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","9","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 213, slope: Slope { SlopeID = 108, SlopeName = slopeName30a41f44-2fd9-4f9a-b76f-0eaa03c6ef33, IsOpen = True, DifficultyLevel = 186, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 213, slope: Slope { SlopeID = 108, SlopeName = slopeName30a41f44-2fd9-4f9a-b76f-0eaa03c6ef33, IsOpen = True, DifficultyLevel = 186, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:31:17 MSK 2022","Mon Oct 10 16:31:17 MSK 2022","9","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 16, slope: Slope { SlopeID = 147, SlopeName = slopeName0688a58f-74c8-47c2-b163-110daba12a42, IsOpen = True, DifficultyLevel = 211, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 16, slope: Slope { SlopeID = 147, SlopeName = slopeName0688a58f-74c8-47c2-b163-110daba12a42, IsOpen = True, DifficultyLevel = 211, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, slopesRepositoryMock: Mock<ISlopesRepository:1>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:1>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:41:04 MSK 2022","Mon Oct 10 16:41:04 MSK 2022","11","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 189, slope: Slope { SlopeID = 5, SlopeName = slopeName8eee5d24-5b6c-407a-9b34-95e7330dcd30, IsOpen = True, DifficultyLevel = 122, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 189, slope: Slope { SlopeID = 5, SlopeName = slopeName8eee5d24-5b6c-407a-9b34-95e7330dcd30, IsOpen = True, DifficultyLevel = 122, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryMock: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:31:35 MSK 2022","Mon Oct 10 16:31:35 MSK 2022","8","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 115, slope: Slope { SlopeID = 41, SlopeName = slopeNameb42fc5b6-289b-435c-9cb8-de91e77cf073, IsOpen = True, DifficultyLevel = 244, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 115, slope: Slope { SlopeID = 41, SlopeName = slopeNameb42fc5b6-289b-435c-9cb8-de91e77cf073, IsOpen = True, DifficultyLevel = 244, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","49","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUsers","BL.Tests.UsersServiceTests.TestAdminGetUsers",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","4","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync",""
"passed","Mon Oct 10 16:31:25 MSK 2022","Mon Oct 10 16:31:26 MSK 2022","123","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 28, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeName3cbce152-a660-413d-a369-4c6754534653, IsOpen = True, DifficultyLevel = 215, ConnectedLifts =  }, Slope { SlopeID = 35, SlopeName = slopeNameaa1464a1-21f3-458e-9a19-d612b3f55764, IsOpen = False, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 121, SlopeName = slopeNamed58fcd05-ce89-4416-a6b2-a8f5a0054be3, IsOpen = True, DifficultyLevel = 16, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 28, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeName3cbce152-a660-413d-a369-4c6754534653, IsOpen = True, DifficultyLevel = 215, ConnectedLifts =  }, Slope { SlopeID = 35, SlopeName = slopeNameaa1464a1-21f3-458e-9a19-d612b3f55764, IsOpen = False, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 121, SlopeName = slopeNamed58fcd05-ce89-4416-a6b2-a8f5a0054be3, IsOpen = True, DifficultyLevel = 16, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","10","","","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 117, lift: Lift { LiftID = 14, LiftName = liftName96b88304-beca-4703-99cd-10db07a6d4df, IsOpen = True, SeatsAmount = 106, LiftingTime = 13, QueueTime = 85, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryMock: Mock<ILiftsRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 117, lift: Lift { LiftID = 14, LiftName = liftName96b88304-beca-4703-99cd-10db07a6d4df, IsOpen = True, SeatsAmount = 106, LiftingTime = 13, QueueTime = 85, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryMock: Mock<ILiftsRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","3","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInOk","BL.Tests.UsersServiceTests.TestLogInOk",""
"passed","Mon Oct 10 16:31:35 MSK 2022","Mon Oct 10 16:31:35 MSK 2022","5","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 54, slope: Slope { SlopeID = 70, SlopeName = slopeName016d439f-6a54-4620-80f7-be111ab5b719, IsOpen = True, DifficultyLevel = 74, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 54, slope: Slope { SlopeID = 70, SlopeName = slopeName016d439f-6a54-4620-80f7-be111ab5b719, IsOpen = True, DifficultyLevel = 74, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:31:26 MSK 2022","Mon Oct 10 16:31:26 MSK 2022","10","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 21, slope: Slope { SlopeID = 77, SlopeName = slopeName4fc814ac-b495-4c05-b9a3-f17c28ff2514, IsOpen = True, DifficultyLevel = 220, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 21, slope: Slope { SlopeID = 77, SlopeName = slopeName4fc814ac-b495-4c05-b9a3-f17c28ff2514, IsOpen = True, DifficultyLevel = 220, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","4","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","1","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","4","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions",""
"passed","Mon Oct 10 16:41:04 MSK 2022","Mon Oct 10 16:41:04 MSK 2022","7","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 227, slope: Slope { SlopeID = 34, SlopeName = slopeNamec9513f12-8f0b-4d81-9316-e40dee1efc33, IsOpen = True, DifficultyLevel = 106, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 227, slope: Slope { SlopeID = 34, SlopeName = slopeNamec9513f12-8f0b-4d81-9316-e40dee1efc33, IsOpen = True, DifficultyLevel = 106, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","11","","","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser",""
"passed","Mon Oct 10 16:31:01 MSK 2022","Mon Oct 10 16:31:17 MSK 2022","15384","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 220, slope: Slope { SlopeID = 130, SlopeName = slopeNamea5d73b94-fe5d-4a8e-bf5c-8e3a0d9f1e61, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 220, slope: Slope { SlopeID = 130, SlopeName = slopeNamea5d73b94-fe5d-4a8e-bf5c-8e3a0d9f1e61, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, slopesRepositoryMock: Mock<ISlopesRepository:5>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:31:35 MSK 2022","Mon Oct 10 16:31:35 MSK 2022","28","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 242, initialSlopes: [Slope { SlopeID = 14, SlopeName = slopeName519a380c-c7ce-42a9-9372-72a4b67b84b8, IsOpen = True, DifficultyLevel = 216, ConnectedLifts =  }, Slope { SlopeID = 57, SlopeName = slopeNameb7623e6d-44ef-4de2-94d5-accc8d51dc6d, IsOpen = False, DifficultyLevel = 9, ConnectedLifts =  }, Slope { SlopeID = 16, SlopeName = slopeName643724a8-be91-40e5-b1e9-bc8aeaf7f199, IsOpen = True, DifficultyLevel = 183, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 242, initialSlopes: [Slope { SlopeID = 14, SlopeName = slopeName519a380c-c7ce-42a9-9372-72a4b67b84b8, IsOpen = True, DifficultyLevel = 216, ConnectedLifts =  }, Slope { SlopeID = 57, SlopeName = slopeNameb7623e6d-44ef-4de2-94d5-accc8d51dc6d, IsOpen = False, DifficultyLevel = 9, ConnectedLifts =  }, Slope { SlopeID = 16, SlopeName = slopeName643724a8-be91-40e5-b1e9-bc8aeaf7f199, IsOpen = True, DifficultyLevel = 183, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","6","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","34","","","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 182, initialLifts: [Lift { LiftID = 24, LiftName = liftNamed4cfe2ad-872d-4ee0-9602-dc10d1e9fad2, IsOpen = True, SeatsAmount = 85, LiftingTime = 140, QueueTime = 175, ConnectedSlopes =  }, Lift { LiftID = 14, LiftName = liftName3453a9c7-a048-483c-9649-f25f17ba6256, IsOpen = False, SeatsAmount = 124, LiftingTime = 4, QueueTime = 68, ConnectedSlopes =  }, Lift { LiftID = 150, LiftName = liftName05279d3f-1261-4cf2-abed-b095eee3cc5f, IsOpen = True, SeatsAmount = 29, LiftingTime = 101, QueueTime = 62, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryMock: Mock<ILiftsRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 182, initialLifts: [Lift { LiftID = 24, LiftName = liftNamed4cfe2ad-872d-4ee0-9602-dc10d1e9fad2, IsOpen = True, SeatsAmount = 85, LiftingTime = 140, QueueTime = 175, ConnectedSlopes =  }, Lift { LiftID = 14, LiftName = liftName3453a9c7-a048-483c-9649-f25f17ba6256, IsOpen = False, SeatsAmount = 124, LiftingTime = 4, QueueTime = 68, ConnectedSlopes =  }, Lift { LiftID = 150, LiftName = liftName05279d3f-1261-4cf2-abed-b095eee3cc5f, IsOpen = True, SeatsAmount = 29, LiftingTime = 101, QueueTime = 62, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryMock: Mock<ILiftsRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Mon Oct 10 16:31:26 MSK 2022","Mon Oct 10 16:31:26 MSK 2022","6","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 91, slope: Slope { SlopeID = 189, SlopeName = slopeName72623265-03f5-40b8-bafe-b5ee0cbc9f26, IsOpen = True, DifficultyLevel = 237, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 91, slope: Slope { SlopeID = 189, SlopeName = slopeName72623265-03f5-40b8-bafe-b5ee0cbc9f26, IsOpen = True, DifficultyLevel = 237, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, slopesRepositoryMock: Mock<ISlopesRepository:3>, sut: SlopesService { })",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","6","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Mon Oct 10 16:46:26 MSK 2022","Mon Oct 10 16:46:26 MSK 2022","1","","","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Mon Oct 10 16:31:26 MSK 2022","Mon Oct 10 16:31:26 MSK 2022","4","","Suite for SlopesService class","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 39, slope: Slope { SlopeID = 92, SlopeName = slopeNameb10c8ad4-4682-41a9-af75-e33b0dea85fd, IsOpen = True, DifficultyLevel = 91, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 39, slope: Slope { SlopeID = 92, SlopeName = slopeNameb10c8ad4-4682-41a9-af75-e33b0dea85fd, IsOpen = True, DifficultyLevel = 91, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, slopesRepositoryMock: Mock<ISlopesRepository:4>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:4>, sut: SlopesService { })",""
