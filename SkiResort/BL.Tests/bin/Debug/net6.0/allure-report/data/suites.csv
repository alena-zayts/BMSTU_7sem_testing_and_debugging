"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","7","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 227, LiftName = liftNameda191cfe-a92a-4a78-9d62-66a32b13bd4e, IsOpen = True, SeatsAmount = 30, LiftingTime = 86, QueueTime = 32, ConnectedSlopes =  }, slope: Slope { SlopeID = 123, SlopeName = slopeName0f654a43-7709-445b-aa49-17ccee2581ab, IsOpen = False, DifficultyLevel = 154, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 227, LiftName = liftNameda191cfe-a92a-4a78-9d62-66a32b13bd4e, IsOpen = True, SeatsAmount = 30, LiftingTime = 86, QueueTime = 32, ConnectedSlopes =  }, slope: Slope { SlopeID = 123, SlopeName = slopeName0f654a43-7709-445b-aa49-17ccee2581ab, IsOpen = False, DifficultyLevel = 154, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","74","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 75, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeNamea2ca06be-ff37-431e-a7ed-9952d6db4776, IsOpen = True, DifficultyLevel = 30, ConnectedLifts =  }, Slope { SlopeID = 178, SlopeName = slopeName9f971881-2744-4c02-970e-a24e59b2af42, IsOpen = False, DifficultyLevel = 15, ConnectedLifts =  }, Slope { SlopeID = 187, SlopeName = slopeName698ef345-9dd2-441a-ac35-6fda20387cd1, IsOpen = True, DifficultyLevel = 106, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 75, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeNamea2ca06be-ff37-431e-a7ed-9952d6db4776, IsOpen = True, DifficultyLevel = 30, ConnectedLifts =  }, Slope { SlopeID = 178, SlopeName = slopeName9f971881-2744-4c02-970e-a24e59b2af42, IsOpen = False, DifficultyLevel = 15, ConnectedLifts =  }, Slope { SlopeID = 187, SlopeName = slopeName698ef345-9dd2-441a-ac35-6fda20387cd1, IsOpen = True, DifficultyLevel = 106, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","47","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 90, turnstile: Turnstile { TurnstileID = 26, LiftID = 205, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 90, turnstile: Turnstile { TurnstileID = 26, LiftID = 205, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","7","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","18","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 205, lift: Lift { LiftID = 225, LiftName = liftName22556448-98df-4fb0-ad5d-d6d46477cc97, IsOpen = True, SeatsAmount = 30, LiftingTime = 117, QueueTime = 83, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 205, lift: Lift { LiftID = 225, LiftName = liftName22556448-98df-4fb0-ad5d-d6d46477cc97, IsOpen = True, SeatsAmount = 30, LiftingTime = 117, QueueTime = 83, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 140, turnstile: Turnstile { TurnstileID = 209, LiftID = 13, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 140, turnstile: Turnstile { TurnstileID = 209, LiftID = 13, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","8","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 64, lift: Lift { LiftID = 119, LiftName = liftName9a8f169f-4d02-43b5-a365-e781b71f634f, IsOpen = True, SeatsAmount = 185, LiftingTime = 207, QueueTime = 20, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 64, lift: Lift { LiftID = 119, LiftName = liftName9a8f169f-4d02-43b5-a365-e781b71f634f, IsOpen = True, SeatsAmount = 185, LiftingTime = 207, QueueTime = 20, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","46","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 38, LiftName = liftName224aa56c-5f0e-4a80-8a1a-e01fc472ef55, IsOpen = True, SeatsAmount = 253, LiftingTime = 98, QueueTime = 20, ConnectedSlopes =  }, slope: Slope { SlopeID = 120, SlopeName = slopeName202d0f60-5526-4249-88b3-e0d2a0c6ba29, IsOpen = False, DifficultyLevel = 205, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 38, LiftName = liftName224aa56c-5f0e-4a80-8a1a-e01fc472ef55, IsOpen = True, SeatsAmount = 253, LiftingTime = 98, QueueTime = 20, ConnectedSlopes =  }, slope: Slope { SlopeID = 120, SlopeName = slopeName202d0f60-5526-4249-88b3-e0d2a0c6ba29, IsOpen = False, DifficultyLevel = 205, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","4","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 169, turnstile: Turnstile { TurnstileID = 164, LiftID = 151, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 169, turnstile: Turnstile { TurnstileID = 164, LiftID = 151, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","21","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 123, lift: Lift { LiftID = 47, LiftName = liftNamec86791e5-d4e5-4bd0-9c49-ebe1908cc467, IsOpen = True, SeatsAmount = 25, LiftingTime = 238, QueueTime = 172, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 123, lift: Lift { LiftID = 47, LiftName = liftNamec86791e5-d4e5-4bd0-9c49-ebe1908cc467, IsOpen = True, SeatsAmount = 25, LiftingTime = 238, QueueTime = 172, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","49","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUsers","BL.Tests.UsersServiceTests.TestAdminGetUsers",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","7","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 192, slope: Slope { SlopeID = 59, SlopeName = slopeNamed80f0dfd-a094-4635-9ea5-67c90647d562, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 192, slope: Slope { SlopeID = 59, SlopeName = slopeNamed80f0dfd-a094-4635-9ea5-67c90647d562, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","10","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 165, lift: Lift { LiftID = 117, LiftName = liftName789cc12c-4f8a-415b-b280-3d09a1db7072, IsOpen = True, SeatsAmount = 147, LiftingTime = 46, QueueTime = 23, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 165, lift: Lift { LiftID = 117, LiftName = liftName789cc12c-4f8a-415b-b280-3d09a1db7072, IsOpen = True, SeatsAmount = 147, LiftingTime = 46, QueueTime = 23, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","9","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 71, slope: Slope { SlopeID = 137, SlopeName = slopeName9ccc01ce-a839-43ed-920b-2e5228eaa10f, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 71, slope: Slope { SlopeID = 137, SlopeName = slopeName9ccc01ce-a839-43ed-920b-2e5228eaa10f, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","1","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","4","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 136, LiftID = 121, SlopeID = 45 }, LiftSlope { RecordID = 190, LiftID = 179, SlopeID = 100 }, LiftSlope { RecordID = 11, LiftID = 51, SlopeID = 177 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 136, LiftID = 121, SlopeID = 45 }, LiftSlope { RecordID = 190, LiftID = 179, SlopeID = 100 }, LiftSlope { RecordID = 11, LiftID = 51, SlopeID = 177 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","7","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminUpdateUser","BL.Tests.UsersServiceTests.TestAdminUpdateUser",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","6","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 23, initialTurnstiles: [Turnstile { TurnstileID = 150, LiftID = 110, IsOpen = True }, Turnstile { TurnstileID = 142, LiftID = 131, IsOpen = False }, Turnstile { TurnstileID = 123, LiftID = 194, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 23, initialTurnstiles: [Turnstile { TurnstileID = 150, LiftID = 110, IsOpen = True }, Turnstile { TurnstileID = 142, LiftID = 131, IsOpen = False }, Turnstile { TurnstileID = 123, LiftID = 194, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","47","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","20","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterOk","BL.Tests.UsersServiceTests.TestRegisterOk",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","5","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 237, slope: Slope { SlopeID = 180, SlopeName = slopeName81ff0399-5c03-4b57-9ab3-d0bab7835b7d, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 237, slope: Slope { SlopeID = 180, SlopeName = slopeName81ff0399-5c03-4b57-9ab3-d0bab7835b7d, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminDeleteUser","BL.Tests.UsersServiceTests.TestAdminDeleteUser",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 4, turnstile: Turnstile { TurnstileID = 179, LiftID = 158, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 4, turnstile: Turnstile { TurnstileID = 179, LiftID = 158, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInOk","BL.Tests.UsersServiceTests.TestLogInOk",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","74","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 20, initialLifts: [Lift { LiftID = 191, LiftName = liftName04f20b64-9486-46d5-ada7-03e888e49b51, IsOpen = True, SeatsAmount = 158, LiftingTime = 17, QueueTime = 146, ConnectedSlopes =  }, Lift { LiftID = 170, LiftName = liftName764d076a-314d-4fa5-bba5-b1fe1f172b30, IsOpen = False, SeatsAmount = 134, LiftingTime = 57, QueueTime = 154, ConnectedSlopes =  }, Lift { LiftID = 164, LiftName = liftName8980b385-f408-484e-b0c0-9f1146b95988, IsOpen = True, SeatsAmount = 9, LiftingTime = 18, QueueTime = 169, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 20, initialLifts: [Lift { LiftID = 191, LiftName = liftName04f20b64-9486-46d5-ada7-03e888e49b51, IsOpen = True, SeatsAmount = 158, LiftingTime = 17, QueueTime = 146, ConnectedSlopes =  }, Lift { LiftID = 170, LiftName = liftName764d076a-314d-4fa5-bba5-b1fe1f172b30, IsOpen = False, SeatsAmount = 134, LiftingTime = 57, QueueTime = 154, ConnectedSlopes =  }, Lift { LiftID = 164, LiftName = liftName8980b385-f408-484e-b0c0-9f1146b95988, IsOpen = True, SeatsAmount = 9, LiftingTime = 18, QueueTime = 169, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 110, slope: Slope { SlopeID = 192, SlopeName = slopeName4d76e99d-ab7d-49a8-bab7-ba7b75ef7982, IsOpen = True, DifficultyLevel = 38, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 110, slope: Slope { SlopeID = 192, SlopeName = slopeName4d76e99d-ab7d-49a8-bab7-ba7b75ef7982, IsOpen = True, DifficultyLevel = 38, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","5","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 222, slope: Slope { SlopeID = 75, SlopeName = slopeNamef604257f-d298-48d0-9770-73170ffb70a7, IsOpen = True, DifficultyLevel = 173, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 222, slope: Slope { SlopeID = 75, SlopeName = slopeNamef604257f-d298-48d0-9770-73170ffb70a7, IsOpen = True, DifficultyLevel = 173, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","3","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail",""
