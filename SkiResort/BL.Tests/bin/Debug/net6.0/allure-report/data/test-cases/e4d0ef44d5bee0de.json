{"uid":"e4d0ef44d5bee0de","name":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 28, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeName3cbce152-a660-413d-a369-4c6754534653, IsOpen = True, DifficultyLevel = 215, ConnectedLifts =  }, Slope { SlopeID = 35, SlopeName = slopeNameaa1464a1-21f3-458e-9a19-d612b3f55764, IsOpen = False, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 121, SlopeName = slopeNamed58fcd05-ce89-4416-a6b2-a8f5a0054be3, IsOpen = True, DifficultyLevel = 16, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","fullName":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 28, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeName3cbce152-a660-413d-a369-4c6754534653, IsOpen = True, DifficultyLevel = 215, ConnectedLifts =  }, Slope { SlopeID = 35, SlopeName = slopeNameaa1464a1-21f3-458e-9a19-d612b3f55764, IsOpen = False, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 121, SlopeName = slopeNamed58fcd05-ce89-4416-a6b2-a8f5a0054be3, IsOpen = True, DifficultyLevel = 16, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","historyId":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 28, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeName3cbce152-a660-413d-a369-4c6754534653, IsOpen = True, DifficultyLevel = 215, ConnectedLifts =  }, Slope { SlopeID = 35, SlopeName = slopeNameaa1464a1-21f3-458e-9a19-d612b3f55764, IsOpen = False, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 121, SlopeName = slopeNamed58fcd05-ce89-4416-a6b2-a8f5a0054be3, IsOpen = True, DifficultyLevel = 16, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","time":{"start":1665408685978,"stop":1665408686101,"duration":123},"status":"passed","statusMessage":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"BL.Tests.SlopesServiceTest"},{"name":"testMethod","value":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 28, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeName3cbce152-a660-413d-a369-4c6754534653, IsOpen = True, DifficultyLevel = 215, ConnectedLifts =  }, Slope { SlopeID = 35, SlopeName = slopeNameaa1464a1-21f3-458e-9a19-d612b3f55764, IsOpen = False, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 121, SlopeName = slopeNamed58fcd05-ce89-4416-a6b2-a8f5a0054be3, IsOpen = True, DifficultyLevel = 16, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })"},{"name":"package","value":"BL.Tests.SlopesServiceTest"},{"name":"suite","value":"Suite for SlopesService class"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"e4d0ef44d5bee0de.json","parameterValues":[]}