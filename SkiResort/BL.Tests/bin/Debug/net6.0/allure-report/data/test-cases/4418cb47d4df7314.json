{"uid":"4418cb47d4df7314","name":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 129, initialSlopes: [Slope { SlopeID = 87, SlopeName = slopeName4ce50c4e-b32a-4a14-9902-1386d8847275, IsOpen = True, DifficultyLevel = 114, ConnectedLifts =  }, Slope { SlopeID = 76, SlopeName = slopeName06010062-e1fd-4c71-b762-6ab0b2a44644, IsOpen = False, DifficultyLevel = 90, ConnectedLifts =  }, Slope { SlopeID = 147, SlopeName = slopeName617a6f08-4429-408b-9c9e-3235c6f4fcea, IsOpen = True, DifficultyLevel = 160, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","fullName":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 129, initialSlopes: [Slope { SlopeID = 87, SlopeName = slopeName4ce50c4e-b32a-4a14-9902-1386d8847275, IsOpen = True, DifficultyLevel = 114, ConnectedLifts =  }, Slope { SlopeID = 76, SlopeName = slopeName06010062-e1fd-4c71-b762-6ab0b2a44644, IsOpen = False, DifficultyLevel = 90, ConnectedLifts =  }, Slope { SlopeID = 147, SlopeName = slopeName617a6f08-4429-408b-9c9e-3235c6f4fcea, IsOpen = True, DifficultyLevel = 160, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","historyId":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 129, initialSlopes: [Slope { SlopeID = 87, SlopeName = slopeName4ce50c4e-b32a-4a14-9902-1386d8847275, IsOpen = True, DifficultyLevel = 114, ConnectedLifts =  }, Slope { SlopeID = 76, SlopeName = slopeName06010062-e1fd-4c71-b762-6ab0b2a44644, IsOpen = False, DifficultyLevel = 90, ConnectedLifts =  }, Slope { SlopeID = 147, SlopeName = slopeName617a6f08-4429-408b-9c9e-3235c6f4fcea, IsOpen = True, DifficultyLevel = 160, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","time":{"start":1665409264558,"stop":1665409264569,"duration":11},"status":"passed","statusMessage":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"BL.Tests.SlopesServiceTest"},{"name":"testMethod","value":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 129, initialSlopes: [Slope { SlopeID = 87, SlopeName = slopeName4ce50c4e-b32a-4a14-9902-1386d8847275, IsOpen = True, DifficultyLevel = 114, ConnectedLifts =  }, Slope { SlopeID = 76, SlopeName = slopeName06010062-e1fd-4c71-b762-6ab0b2a44644, IsOpen = False, DifficultyLevel = 90, ConnectedLifts =  }, Slope { SlopeID = 147, SlopeName = slopeName617a6f08-4429-408b-9c9e-3235c6f4fcea, IsOpen = True, DifficultyLevel = 160, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })"},{"name":"package","value":"BL.Tests.SlopesServiceTest"},{"name":"suite","value":"Suite for SlopesService class"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"4418cb47d4df7314.json","parameterValues":[]}