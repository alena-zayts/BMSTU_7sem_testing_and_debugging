{"uid":"19423f457b0a5d46","name":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 223, initialSlopes: [Slope { SlopeID = 31, SlopeName = slopeName78a8a4d2-1296-4546-80db-50681699b5ba, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }, Slope { SlopeID = 136, SlopeName = slopeName79aeb278-46b8-4014-afab-0eee616d54c1, IsOpen = False, DifficultyLevel = 5, ConnectedLifts =  }, Slope { SlopeID = 191, SlopeName = slopeNamea8b74bba-ea7f-4d17-995d-21836a578578, IsOpen = True, DifficultyLevel = 195, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","fullName":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 223, initialSlopes: [Slope { SlopeID = 31, SlopeName = slopeName78a8a4d2-1296-4546-80db-50681699b5ba, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }, Slope { SlopeID = 136, SlopeName = slopeName79aeb278-46b8-4014-afab-0eee616d54c1, IsOpen = False, DifficultyLevel = 5, ConnectedLifts =  }, Slope { SlopeID = 191, SlopeName = slopeNamea8b74bba-ea7f-4d17-995d-21836a578578, IsOpen = True, DifficultyLevel = 195, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","historyId":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 223, initialSlopes: [Slope { SlopeID = 31, SlopeName = slopeName78a8a4d2-1296-4546-80db-50681699b5ba, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }, Slope { SlopeID = 136, SlopeName = slopeName79aeb278-46b8-4014-afab-0eee616d54c1, IsOpen = False, DifficultyLevel = 5, ConnectedLifts =  }, Slope { SlopeID = 191, SlopeName = slopeNamea8b74bba-ea7f-4d17-995d-21836a578578, IsOpen = True, DifficultyLevel = 195, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })","time":{"start":1665408677146,"stop":1665408677216,"duration":70},"status":"passed","statusMessage":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"BL.Tests.SlopesServiceTest"},{"name":"testMethod","value":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 223, initialSlopes: [Slope { SlopeID = 31, SlopeName = slopeName78a8a4d2-1296-4546-80db-50681699b5ba, IsOpen = True, DifficultyLevel = 142, ConnectedLifts =  }, Slope { SlopeID = 136, SlopeName = slopeName79aeb278-46b8-4014-afab-0eee616d54c1, IsOpen = False, DifficultyLevel = 5, ConnectedLifts =  }, Slope { SlopeID = 191, SlopeName = slopeNamea8b74bba-ea7f-4d17-995d-21836a578578, IsOpen = True, DifficultyLevel = 195, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:2>, sut: SlopesService { })"},{"name":"package","value":"BL.Tests.SlopesServiceTest"},{"name":"suite","value":"Suite for SlopesService class"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"19423f457b0a5d46.json","parameterValues":[]}