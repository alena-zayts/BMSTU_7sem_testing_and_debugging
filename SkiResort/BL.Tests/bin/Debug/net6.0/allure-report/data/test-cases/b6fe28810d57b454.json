{"uid":"b6fe28810d57b454","name":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 29, initialSlopes: [Slope { SlopeID = 138, SlopeName = slopeName0b944e55-a2e6-49bc-b5ff-ce1c35418aac, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  }, Slope { SlopeID = 141, SlopeName = slopeNamef7e65efa-d860-4059-98b1-f53e3a6b6be8, IsOpen = False, DifficultyLevel = 78, ConnectedLifts =  }, Slope { SlopeID = 132, SlopeName = slopeName45738300-b381-4080-be93-c24bc8f3eb19, IsOpen = True, DifficultyLevel = 31, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:7>, sut: SlopesService { })","fullName":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 29, initialSlopes: [Slope { SlopeID = 138, SlopeName = slopeName0b944e55-a2e6-49bc-b5ff-ce1c35418aac, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  }, Slope { SlopeID = 141, SlopeName = slopeNamef7e65efa-d860-4059-98b1-f53e3a6b6be8, IsOpen = False, DifficultyLevel = 78, ConnectedLifts =  }, Slope { SlopeID = 132, SlopeName = slopeName45738300-b381-4080-be93-c24bc8f3eb19, IsOpen = True, DifficultyLevel = 31, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:7>, sut: SlopesService { })","historyId":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 29, initialSlopes: [Slope { SlopeID = 138, SlopeName = slopeName0b944e55-a2e6-49bc-b5ff-ce1c35418aac, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  }, Slope { SlopeID = 141, SlopeName = slopeNamef7e65efa-d860-4059-98b1-f53e3a6b6be8, IsOpen = False, DifficultyLevel = 78, ConnectedLifts =  }, Slope { SlopeID = 132, SlopeName = slopeName45738300-b381-4080-be93-c24bc8f3eb19, IsOpen = True, DifficultyLevel = 31, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:7>, sut: SlopesService { })","time":{"start":1665409586500,"stop":1665409586537,"duration":37},"status":"passed","statusMessage":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"BL.Tests.SlopesServiceTest"},{"name":"testMethod","value":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 29, initialSlopes: [Slope { SlopeID = 138, SlopeName = slopeName0b944e55-a2e6-49bc-b5ff-ce1c35418aac, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  }, Slope { SlopeID = 141, SlopeName = slopeNamef7e65efa-d860-4059-98b1-f53e3a6b6be8, IsOpen = False, DifficultyLevel = 78, ConnectedLifts =  }, Slope { SlopeID = 132, SlopeName = slopeName45738300-b381-4080-be93-c24bc8f3eb19, IsOpen = True, DifficultyLevel = 31, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryMock: Mock<ISlopesRepository:2>, liftsSlopesRepositoryMock: Mock<ILiftsSlopesRepository:7>, sut: SlopesService { })"},{"name":"package","value":"BL.Tests.SlopesServiceTest"},{"name":"suite","value":"Suite for SlopesService class"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"b6fe28810d57b454.json","parameterValues":[]}