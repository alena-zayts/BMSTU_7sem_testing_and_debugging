<assemblies timestamp="10/10/2022 16:42:32">
  <assembly name="C:\Users\alena\Desktop\7_sem\testing_and_debugging\SkiResort\BL.Tests\bin\Debug\net6.0\BL.Tests.dll" run-date="2022-10-10" run-time="16:42:32" total="47" passed="47" failed="0" skipped="0" time="1.727" errors="0">
    <errors />
    <collection total="17" passed="17" failed="0" skipped="0" name="Test collection for BL.Tests.CheckPermissionsServiceTests" time="0.066">
      <test name="BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: &quot;MarkMessageReadByUserAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="UnauthorizedHasNoAccessToAdminSkiPatrolFunctions" time="0.0306590" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: &quot;GetLiftsSlopesInfoAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="UnauthorizedHasNoAccessToAdminSkiPatrolFunctions" time="0.0016517" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: &quot;GetMessagesAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="UnauthorizedHasNoAccessToAdminSkiPatrolFunctions" time="0.0013902" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: &quot;SendMessageAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="UnauthorizedHasNoAccessToAuthorizedFunctions" time="0.0028771" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: &quot;LogOutAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="UnauthorizedHasNoAccessToAuthorizedFunctions" time="0.0016027" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: &quot;GetLiftsSlopesInfoAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="SkiPatrolHasAccessToAdminSkiPatrolFunctions" time="0.0063664" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: &quot;MarkMessageReadByUserAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="SkiPatrolHasAccessToAdminSkiPatrolFunctions" time="0.0013653" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: &quot;GetMessagesAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="SkiPatrolHasAccessToAdminSkiPatrolFunctions" time="0.0010753" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions" type="BL.Tests.CheckPermissionsServiceTests" method="AuthorizedHasNoAccessToAdminFunctions" time="0.0032625" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: &quot;GetMessagesAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="AuthorizedHasNoAccessToAdminSkiPatrolFunctions" time="0.0027280" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: &quot;MarkMessageReadByUserAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="AuthorizedHasNoAccessToAdminSkiPatrolFunctions" time="0.0012285" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: &quot;GetLiftsSlopesInfoAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="AuthorizedHasNoAccessToAdminSkiPatrolFunctions" time="0.0013666" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: &quot;SendMessageAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="AuthorizedHasAccessToAuthorizedFunctions" time="0.0021265" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: &quot;LogOutAsync&quot;)" type="BL.Tests.CheckPermissionsServiceTests" method="AuthorizedHasAccessToAuthorizedFunctions" time="0.0011241" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions" type="BL.Tests.CheckPermissionsServiceTests" method="UnauthorizedHasNoAccessToAdminFunctions" time="0.0024101" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions" type="BL.Tests.CheckPermissionsServiceTests" method="SkiPatrolHasNoAccessToAdminFunctions" time="0.0026489" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions" type="BL.Tests.CheckPermissionsServiceTests" method="AdminHasAccessToAllFunctions" time="0.0020657" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for BL.Tests.LiftsServiceTest" time="0.117">
      <test name="BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 20, initialLifts: [Lift { LiftID = 191, LiftName = liftName04f20b64-9486-46d5-ada7-03e888e49b51, IsOpen = True, SeatsAmount = 158, LiftingTime = 17, QueueTime = 146, ConnectedSlopes =  }, Lift { LiftID = 170, LiftName = liftName764d076a-314d-4fa5-bba5-b1fe1f172b30, IsOpen = False, SeatsAmount = 134, LiftingTime = 57, QueueTime = 154, ConnectedSlopes =  }, Lift { LiftID = 164, LiftName ..." type="BL.Tests.LiftsServiceTest" method="TestGetLiftsInfoAsync" time="0.0620185" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 64, lift: Lift { LiftID = 119, LiftName = liftName9a8f169f-4d02-43b5-a365-e781b71f634f, IsOpen = True, SeatsAmount = 185, LiftingTime = 207, QueueTime = 20, ConnectedSlopes =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:3&gt;, liftsRepositoryStub: Mock&lt;ILiftsRepository:3&gt;, sut: LiftsService { })" type="BL.Tests.LiftsServiceTest" method="TestUpdateLiftInfoAsync" time="0.0074622" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 123, lift: Lift { LiftID = 47, LiftName = liftNamec86791e5-d4e5-4bd0-9c49-ebe1908cc467, IsOpen = True, SeatsAmount = 25, LiftingTime = 238, QueueTime = 172, ConnectedSlopes =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:4&gt;, liftsRepositoryStub: Mock&lt;ILiftsRepository:4&gt;, liftsSlopesRepositoryStub: Mock&lt;ILiftsSlopesRepository:4&gt;, sut: LiftsService { })" type="BL.Tests.LiftsServiceTest" method="TestAdminDeleteLiftAsync" time="0.0205612" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 205, lift: Lift { LiftID = 225, LiftName = liftName22556448-98df-4fb0-ad5d-d6d46477cc97, IsOpen = True, SeatsAmount = 30, LiftingTime = 117, QueueTime = 83, ConnectedSlopes =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:1&gt;, liftsRepositoryStub: Mock&lt;ILiftsRepository:1&gt;, liftsSlopesRepositoryStub: Mock&lt;ILiftsSlopesRepository:1&gt;, sut: LiftsService { })" type="BL.Tests.LiftsServiceTest" method="TestGetLiftInfoAsync" time="0.0174318" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 165, lift: Lift { LiftID = 117, LiftName = liftName789cc12c-4f8a-415b-b280-3d09a1db7072, IsOpen = True, SeatsAmount = 147, LiftingTime = 46, QueueTime = 23, ConnectedSlopes =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:5&gt;, liftsRepositoryStub: Mock&lt;ILiftsRepository:5&gt;, sut: LiftsService { })" type="BL.Tests.LiftsServiceTest" method="TestAdminAddAutoIncrementLiftAsync" time="0.0093532" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for BL.Tests.LiftsSlopesServiceTests" time="0.042">
      <test name="BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 38, LiftName = liftName224aa56c-5f0e-4a80-8a1a-e01fc472ef55, IsOpen = True, SeatsAmount = 253, LiftingTime = 98, QueueTime = 20, ConnectedSlopes =  }, slope: Slope { SlopeID = 120, SlopeName = slopeName202d0f60-5526-4249-88b3-e0d2a0c6ba29, IsOpen = False, DifficultyLevel = 205, ConnectedLifts =  }, slopesRepositoryStub: Mock&lt;ISlopesRepository:2&gt;, liftsRepos..." type="BL.Tests.LiftsSlopesServiceTests" method="TestAdminDeleteLiftSlopeAsync" time="0.0305857" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 227, LiftName = liftNameda191cfe-a92a-4a78-9d62-66a32b13bd4e, IsOpen = True, SeatsAmount = 30, LiftingTime = 86, QueueTime = 32, ConnectedSlopes =  }, slope: Slope { SlopeID = 123, SlopeName = slopeName0f654a43-7709-445b-aa49-17ccee2581ab, IsOpen = False, DifficultyLevel = 154, ConnectedLifts =  }, slopesRepositoryStub: Mock&lt;ISlopesRepository:3&gt;, ..." type="BL.Tests.LiftsSlopesServiceTests" method="TestAdminAddAutoIncrementLiftSlopeAsync" time="0.0070063" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 136, LiftID = 121, SlopeID = 45 }, LiftSlope { RecordID = 190, LiftID = 179, SlopeID = 100 }, LiftSlope { RecordID = 11, LiftID = 51, SlopeID = 177 }], slopesRepositoryStub: Mock&lt;ISlopesRepository:1&gt;, liftsRepositoryStub: Mock&lt;ILiftsRepository:6&gt;, liftsSlopesRepositoryStub: Mock&lt;ILiftsSlopesRepository:6&gt;)" type="BL.Tests.LiftsSlopesServiceTests" method="TestGetLiftsSlopesInfoAsync" time="0.0046574" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for BL.Tests.SlopesServiceTest" time="0.094">
      <test name="BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 75, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeNamea2ca06be-ff37-431e-a7ed-9952d6db4776, IsOpen = True, DifficultyLevel = 30, ConnectedLifts =  }, Slope { SlopeID = 178, SlopeName = slopeName9f971881-2744-4c02-970e-a24e59b2af42, IsOpen = False, DifficultyLevel = 15, ConnectedLifts =  }, Slope { SlopeID = 187, SlopeName = slopeName698ef345-9dd2-441a-ac35-6fda20387cd1, IsO..." type="BL.Tests.SlopesServiceTest" method="TestGetSlopesInfoAsync" time="0.0620206" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 110, slope: Slope { SlopeID = 192, SlopeName = slopeName4d76e99d-ab7d-49a8-bab7-ba7b75ef7982, IsOpen = True, DifficultyLevel = 38, ConnectedLifts =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:8&gt;, slopesRepositoryStub: Mock&lt;ISlopesRepository:6&gt;, sut: SlopesService { })" type="BL.Tests.SlopesServiceTest" method="TestUpdateSlopeInfoAsync" time="0.0061697" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 222, slope: Slope { SlopeID = 75, SlopeName = slopeNamef604257f-d298-48d0-9770-73170ffb70a7, IsOpen = True, DifficultyLevel = 173, ConnectedLifts =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:9&gt;, slopesRepositoryStub: Mock&lt;ISlopesRepository:7&gt;, liftsSlopesRepositoryStub: Mock&lt;ILiftsSlopesRepository:12&gt;, sut: SlopesService { })" type="BL.Tests.SlopesServiceTest" method="TestAdminDeleteSlopeAsync" time="0.0049615" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 192, slope: Slope { SlopeID = 59, SlopeName = slopeNamed80f0dfd-a094-4635-9ea5-67c90647d562, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:6&gt;, slopesRepositoryStub: Mock&lt;ISlopesRepository:4&gt;, liftsSlopesRepositoryStub: Mock&lt;ILiftsSlopesRepository:9&gt;, sut: SlopesService { })" type="BL.Tests.SlopesServiceTest" method="TestGetSlopeInfoAsync" time="0.0072280" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 71, slope: Slope { SlopeID = 137, SlopeName = slopeName9ccc01ce-a839-43ed-920b-2e5228eaa10f, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:10&gt;, slopesRepositoryStub: Mock&lt;ISlopesRepository:8&gt;, sut: SlopesService { })" type="BL.Tests.SlopesServiceTest" method="TestAdminAddAutoIncrementSlopeAsync" time="0.0084664" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 237, slope: Slope { SlopeID = 180, SlopeName = slopeName81ff0399-5c03-4b57-9ab3-d0bab7835b7d, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:11&gt;, slopesRepositoryStub: Mock&lt;ISlopesRepository:9&gt;, sut: SlopesService { })" type="BL.Tests.SlopesServiceTest" method="TestAdminAddSlopeAsync" time="0.0052697" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for BL.Tests.TurnstilesServiceTest" time="0.053">
      <test name="BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 90, turnstile: Turnstile { TurnstileID = 26, LiftID = 205, IsOpen = True }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:16&gt;, turnstilesRepositoryStub: Mock&lt;ITurnstilesRepository:10&gt;, sut: TurnstilesService { })" type="BL.Tests.TurnstilesServiceTest" method="TestAdminAddAutoIncrementTurnstileAsync" time="0.0324472" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 4, turnstile: Turnstile { TurnstileID = 179, LiftID = 158, IsOpen = True }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:12&gt;, turnstilesRepositoryStub: Mock&lt;ITurnstilesRepository:6&gt;, sut: TurnstilesService { })" type="BL.Tests.TurnstilesServiceTest" method="TestAdminGetTurnstileAsync" time="0.0050135" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 23, initialTurnstiles: [Turnstile { TurnstileID = 150, LiftID = 110, IsOpen = True }, Turnstile { TurnstileID = 142, LiftID = 131, IsOpen = False }, Turnstile { TurnstileID = 123, LiftID = 194, IsOpen = True }], checkPermissionServiceMock: Mock&lt;ICheckPermissionService:13&gt;, turnstilesRepositoryStub: Mock&lt;ITurnstilesRepository:7&gt;, sut: TurnstilesService { })" type="BL.Tests.TurnstilesServiceTest" method="TestAdminGetTurnstilesAsync" time="0.0051987" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 140, turnstile: Turnstile { TurnstileID = 209, LiftID = 13, IsOpen = True }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:14&gt;, turnstilesRepositoryStub: Mock&lt;ITurnstilesRepository:8&gt;, sut: TurnstilesService { })" type="BL.Tests.TurnstilesServiceTest" method="TestAdminUpdateTurnstileAsync" time="0.0059425" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 169, turnstile: Turnstile { TurnstileID = 164, LiftID = 151, IsOpen = True }, checkPermissionServiceMock: Mock&lt;ICheckPermissionService:15&gt;, turnstilesRepositoryStub: Mock&lt;ITurnstilesRepository:9&gt;, sut: TurnstilesService { })" type="BL.Tests.TurnstilesServiceTest" method="TestAdminDeleteTurnstileAsync" time="0.0043462" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="11" passed="11" failed="0" skipped="0" name="Test collection for BL.Tests.UsersServiceTests" time="0.091">
      <test name="BL.Tests.UsersServiceTests.TestAdminGetUsers" type="BL.Tests.UsersServiceTests" method="TestAdminGetUsers" time="0.0368106" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail" type="BL.Tests.UsersServiceTests" method="TestRegisterUserWithNoEmail" time="0.0026638" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword" type="BL.Tests.UsersServiceTests" method="TestRegisterUserWithNoPassword" time="0.0018113" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail" type="BL.Tests.UsersServiceTests" method="TestRegisterUserWithRepeatedEmail" time="0.0036549" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestAdminUpdateUser" type="BL.Tests.UsersServiceTests" method="TestAdminUpdateUser" time="0.0070674" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestRegisterOk" type="BL.Tests.UsersServiceTests" method="TestRegisterOk" time="0.0203676" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestLogInOk" type="BL.Tests.UsersServiceTests" method="TestLogInOk" time="0.0032501" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestLogInWithWrongPassword" type="BL.Tests.UsersServiceTests" method="TestLogInWithWrongPassword" time="0.0017801" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser" type="BL.Tests.UsersServiceTests" method="TestAdminAddAutoIncrementUser" time="0.0069162" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync" type="BL.Tests.UsersServiceTests" method="TestAdminGetUserByIDAsync" time="0.0041533" result="Pass">
        <traits />
      </test>
      <test name="BL.Tests.UsersServiceTests.TestAdminDeleteUser" type="BL.Tests.UsersServiceTests" method="TestAdminDeleteUser" time="0.0023109" result="Pass">
        <traits />
      </test>
    </collection>
  </assembly>
</assemblies>