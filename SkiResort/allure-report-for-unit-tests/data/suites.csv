"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 70, turnstile: Turnstile { TurnstileID = 129, LiftID = 16, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 70, turnstile: Turnstile { TurnstileID = 129, LiftID = 16, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","10","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 35, turnstile: Turnstile { TurnstileID = 112, LiftID = 6, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 35, turnstile: Turnstile { TurnstileID = 112, LiftID = 6, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 184, slope: Slope { SlopeID = 73, SlopeName = slopeName105b5cb0-f691-4879-a56c-d8b9f34f3d75, IsOpen = True, DifficultyLevel = 110, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 184, slope: Slope { SlopeID = 73, SlopeName = slopeName105b5cb0-f691-4879-a56c-d8b9f34f3d75, IsOpen = True, DifficultyLevel = 110, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","5","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 232, LiftID = 92, SlopeID = 228 }, LiftSlope { RecordID = 25, LiftID = 241, SlopeID = 36 }, LiftSlope { RecordID = 143, LiftID = 185, SlopeID = 208 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 232, LiftID = 92, SlopeID = 228 }, LiftSlope { RecordID = 25, LiftID = 241, SlopeID = 36 }, LiftSlope { RecordID = 143, LiftID = 185, SlopeID = 208 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","55","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 105, initialLifts: [Lift { LiftID = 121, LiftName = liftName52e5fb2d-bf3d-4ede-b593-c5803e0a6948, IsOpen = True, SeatsAmount = 108, LiftingTime = 48, QueueTime = 65, ConnectedSlopes =  }, Lift { LiftID = 40, LiftName = liftName8f4a4ec9-cf4b-404f-9024-e530da4a8128, IsOpen = False, SeatsAmount = 224, LiftingTime = 136, QueueTime = 31, ConnectedSlopes =  }, Lift { LiftID = 83, LiftName = liftName4d3aa2e6-19df-4c0c-988d-10b778f4c72c, IsOpen = True, SeatsAmount = 205, LiftingTime = 55, QueueTime = 199, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 105, initialLifts: [Lift { LiftID = 121, LiftName = liftName52e5fb2d-bf3d-4ede-b593-c5803e0a6948, IsOpen = True, SeatsAmount = 108, LiftingTime = 48, QueueTime = 65, ConnectedSlopes =  }, Lift { LiftID = 40, LiftName = liftName8f4a4ec9-cf4b-404f-9024-e530da4a8128, IsOpen = False, SeatsAmount = 224, LiftingTime = 136, QueueTime = 31, ConnectedSlopes =  }, Lift { LiftID = 83, LiftName = liftName4d3aa2e6-19df-4c0c-988d-10b778f4c72c, IsOpen = True, SeatsAmount = 205, LiftingTime = 55, QueueTime = 199, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","4","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 136, LiftID = 121, SlopeID = 45 }, LiftSlope { RecordID = 190, LiftID = 179, SlopeID = 100 }, LiftSlope { RecordID = 11, LiftID = 51, SlopeID = 177 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 136, LiftID = 121, SlopeID = 45 }, LiftSlope { RecordID = 190, LiftID = 179, SlopeID = 100 }, LiftSlope { RecordID = 11, LiftID = 51, SlopeID = 177 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","12","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 104, lift: Lift { LiftID = 144, LiftName = liftNamea53da203-ea23-4961-a7e6-b09656bb0bbe, IsOpen = True, SeatsAmount = 161, LiftingTime = 159, QueueTime = 177, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 104, lift: Lift { LiftID = 144, LiftName = liftNamea53da203-ea23-4961-a7e6-b09656bb0bbe, IsOpen = True, SeatsAmount = 161, LiftingTime = 159, QueueTime = 177, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","6","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync","BL.Tests.UsersServiceTests.TestAdminGetUserByIDAsync",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","8","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 181, slope: Slope { SlopeID = 205, SlopeName = slopeNamea9418c0e-d7f8-4f79-ade3-674fc2777243, IsOpen = True, DifficultyLevel = 60, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 181, slope: Slope { SlopeID = 205, SlopeName = slopeNamea9418c0e-d7f8-4f79-ade3-674fc2777243, IsOpen = True, DifficultyLevel = 60, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","5","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 240, LiftID = 218, SlopeID = 18 }, LiftSlope { RecordID = 144, LiftID = 32, SlopeID = 6 }, LiftSlope { RecordID = 109, LiftID = 123, SlopeID = 236 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 240, LiftID = 218, SlopeID = 18 }, LiftSlope { RecordID = 144, LiftID = 32, SlopeID = 6 }, LiftSlope { RecordID = 109, LiftID = 123, SlopeID = 236 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 64, turnstile: Turnstile { TurnstileID = 188, LiftID = 200, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 64, turnstile: Turnstile { TurnstileID = 188, LiftID = 200, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 220, slope: Slope { SlopeID = 108, SlopeName = slopeName645fcf5b-4ddc-4f60-b37c-d5fcad79601d, IsOpen = True, DifficultyLevel = 12, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 220, slope: Slope { SlopeID = 108, SlopeName = slopeName645fcf5b-4ddc-4f60-b37c-d5fcad79601d, IsOpen = True, DifficultyLevel = 12, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 252, turnstile: Turnstile { TurnstileID = 39, LiftID = 43, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 252, turnstile: Turnstile { TurnstileID = 39, LiftID = 43, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","10","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 110, initialSlopes: [Slope { SlopeID = 199, SlopeName = slopeNamea9abc54f-844f-4eb0-beb2-89626e2e218a, IsOpen = True, DifficultyLevel = 102, ConnectedLifts =  }, Slope { SlopeID = 204, SlopeName = slopeName951a6b09-e431-4168-8855-efcd0fd1c59d, IsOpen = False, DifficultyLevel = 44, ConnectedLifts =  }, Slope { SlopeID = 90, SlopeName = slopeName9772d706-919d-46d9-bd4b-3e8c80eb034d, IsOpen = True, DifficultyLevel = 53, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 110, initialSlopes: [Slope { SlopeID = 199, SlopeName = slopeNamea9abc54f-844f-4eb0-beb2-89626e2e218a, IsOpen = True, DifficultyLevel = 102, ConnectedLifts =  }, Slope { SlopeID = 204, SlopeName = slopeName951a6b09-e431-4168-8855-efcd0fd1c59d, IsOpen = False, DifficultyLevel = 44, ConnectedLifts =  }, Slope { SlopeID = 90, SlopeName = slopeName9772d706-919d-46d9-bd4b-3e8c80eb034d, IsOpen = True, DifficultyLevel = 53, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","7","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 27, LiftName = liftName9f02056c-4299-4d93-ac4b-0105f6a48e81, IsOpen = True, SeatsAmount = 111, LiftingTime = 20, QueueTime = 46, ConnectedSlopes =  }, slope: Slope { SlopeID = 84, SlopeName = slopeName58452c21-27cf-47ac-a103-c254d6136027, IsOpen = False, DifficultyLevel = 22, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 27, LiftName = liftName9f02056c-4299-4d93-ac4b-0105f6a48e81, IsOpen = True, SeatsAmount = 111, LiftingTime = 20, QueueTime = 46, ConnectedSlopes =  }, slope: Slope { SlopeID = 84, SlopeName = slopeName58452c21-27cf-47ac-a103-c254d6136027, IsOpen = False, DifficultyLevel = 22, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","17","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 5, initialLifts: [Lift { LiftID = 12, LiftName = liftName3d4d049e-1a0a-4da8-9b37-36f787265af4, IsOpen = True, SeatsAmount = 127, LiftingTime = 162, QueueTime = 49, ConnectedSlopes =  }, Lift { LiftID = 113, LiftName = liftName44ab37c6-b14a-43a1-aae1-7bcae20ea5c2, IsOpen = False, SeatsAmount = 192, LiftingTime = 130, QueueTime = 86, ConnectedSlopes =  }, Lift { LiftID = 64, LiftName = liftName1d7338df-d16d-4454-993d-28a19a474dfc, IsOpen = True, SeatsAmount = 35, LiftingTime = 243, QueueTime = 96, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 5, initialLifts: [Lift { LiftID = 12, LiftName = liftName3d4d049e-1a0a-4da8-9b37-36f787265af4, IsOpen = True, SeatsAmount = 127, LiftingTime = 162, QueueTime = 49, ConnectedSlopes =  }, Lift { LiftID = 113, LiftName = liftName44ab37c6-b14a-43a1-aae1-7bcae20ea5c2, IsOpen = False, SeatsAmount = 192, LiftingTime = 130, QueueTime = 86, ConnectedSlopes =  }, Lift { LiftID = 64, LiftName = liftName1d7338df-d16d-4454-993d-28a19a474dfc, IsOpen = True, SeatsAmount = 35, LiftingTime = 243, QueueTime = 96, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","18","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 205, lift: Lift { LiftID = 225, LiftName = liftName22556448-98df-4fb0-ad5d-d6d46477cc97, IsOpen = True, SeatsAmount = 30, LiftingTime = 117, QueueTime = 83, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 205, lift: Lift { LiftID = 225, LiftName = liftName22556448-98df-4fb0-ad5d-d6d46477cc97, IsOpen = True, SeatsAmount = 30, LiftingTime = 117, QueueTime = 83, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","6","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 200, lift: Lift { LiftID = 223, LiftName = liftNamed9a2e955-77e7-424f-b63a-ba3f40976980, IsOpen = True, SeatsAmount = 131, LiftingTime = 254, QueueTime = 6, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 200, lift: Lift { LiftID = 223, LiftName = liftNamed9a2e955-77e7-424f-b63a-ba3f40976980, IsOpen = True, SeatsAmount = 131, LiftingTime = 254, QueueTime = 6, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","4","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminFunctions",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","14","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","11","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 137, turnstile: Turnstile { TurnstileID = 61, LiftID = 248, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 137, turnstile: Turnstile { TurnstileID = 61, LiftID = 248, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","4","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 242, initialTurnstiles: [Turnstile { TurnstileID = 49, LiftID = 76, IsOpen = True }, Turnstile { TurnstileID = 218, LiftID = 177, IsOpen = False }, Turnstile { TurnstileID = 162, LiftID = 75, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 242, initialTurnstiles: [Turnstile { TurnstileID = 49, LiftID = 76, IsOpen = True }, Turnstile { TurnstileID = 218, LiftID = 177, IsOpen = False }, Turnstile { TurnstileID = 162, LiftID = 75, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","6","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 70, LiftName = liftName9ed3fdf7-185c-4175-a36f-7f9774f4c72b, IsOpen = True, SeatsAmount = 202, LiftingTime = 67, QueueTime = 33, ConnectedSlopes =  }, slope: Slope { SlopeID = 225, SlopeName = slopeName30aa1aaf-d80d-4a97-a9f5-5bdb4aaf8094, IsOpen = False, DifficultyLevel = 62, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 70, LiftName = liftName9ed3fdf7-185c-4175-a36f-7f9774f4c72b, IsOpen = True, SeatsAmount = 202, LiftingTime = 67, QueueTime = 33, ConnectedSlopes =  }, slope: Slope { SlopeID = 225, SlopeName = slopeName30aa1aaf-d80d-4a97-a9f5-5bdb4aaf8094, IsOpen = False, DifficultyLevel = 62, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","71","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 242, LiftName = liftNameb80b916a-a6f4-4b62-9a42-523a171c88d1, IsOpen = True, SeatsAmount = 118, LiftingTime = 135, QueueTime = 190, ConnectedSlopes =  }, slope: Slope { SlopeID = 167, SlopeName = slopeNameac7bf6e1-2871-4a08-8e1b-ce9d97572610, IsOpen = False, DifficultyLevel = 193, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 242, LiftName = liftNameb80b916a-a6f4-4b62-9a42-523a171c88d1, IsOpen = True, SeatsAmount = 118, LiftingTime = 135, QueueTime = 190, ConnectedSlopes =  }, slope: Slope { SlopeID = 167, SlopeName = slopeNameac7bf6e1-2871-4a08-8e1b-ce9d97572610, IsOpen = False, DifficultyLevel = 193, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 173, turnstile: Turnstile { TurnstileID = 146, LiftID = 108, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 173, turnstile: Turnstile { TurnstileID = 146, LiftID = 108, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","84","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 158, initialLifts: [Lift { LiftID = 176, LiftName = liftName362ea918-4225-411a-96fd-17acbf8bc50f, IsOpen = True, SeatsAmount = 50, LiftingTime = 49, QueueTime = 5, ConnectedSlopes =  }, Lift { LiftID = 201, LiftName = liftName55a76fd9-aa62-4792-9139-8149e6872e4c, IsOpen = False, SeatsAmount = 237, LiftingTime = 197, QueueTime = 105, ConnectedSlopes =  }, Lift { LiftID = 73, LiftName = liftName6acb2e19-7c8a-441b-8d00-d0f464789aee, IsOpen = True, SeatsAmount = 80, LiftingTime = 93, QueueTime = 130, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 158, initialLifts: [Lift { LiftID = 176, LiftName = liftName362ea918-4225-411a-96fd-17acbf8bc50f, IsOpen = True, SeatsAmount = 50, LiftingTime = 49, QueueTime = 5, ConnectedSlopes =  }, Lift { LiftID = 201, LiftName = liftName55a76fd9-aa62-4792-9139-8149e6872e4c, IsOpen = False, SeatsAmount = 237, LiftingTime = 197, QueueTime = 105, ConnectedSlopes =  }, Lift { LiftID = 73, LiftName = liftName6acb2e19-7c8a-441b-8d00-d0f464789aee, IsOpen = True, SeatsAmount = 80, LiftingTime = 93, QueueTime = 130, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","12","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterOk","BL.Tests.UsersServiceTests.TestRegisterOk",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasNoAccessToAdminFunctions",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","10","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 23, LiftName = liftName68f23f2d-66d7-446a-92d3-2a519ec29d9b, IsOpen = True, SeatsAmount = 37, LiftingTime = 7, QueueTime = 152, ConnectedSlopes =  }, slope: Slope { SlopeID = 107, SlopeName = slopeName8bca5f23-18cb-4387-8677-c8b2bd15ffbf, IsOpen = False, DifficultyLevel = 143, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 23, LiftName = liftName68f23f2d-66d7-446a-92d3-2a519ec29d9b, IsOpen = True, SeatsAmount = 37, LiftingTime = 7, QueueTime = 152, ConnectedSlopes =  }, slope: Slope { SlopeID = 107, SlopeName = slopeName8bca5f23-18cb-4387-8677-c8b2bd15ffbf, IsOpen = False, DifficultyLevel = 143, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","21","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 123, lift: Lift { LiftID = 47, LiftName = liftNamec86791e5-d4e5-4bd0-9c49-ebe1908cc467, IsOpen = True, SeatsAmount = 25, LiftingTime = 238, QueueTime = 172, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 123, lift: Lift { LiftID = 47, LiftName = liftNamec86791e5-d4e5-4bd0-9c49-ebe1908cc467, IsOpen = True, SeatsAmount = 25, LiftingTime = 238, QueueTime = 172, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithNoEmail",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","72","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 100, lift: Lift { LiftID = 233, LiftName = liftName41ed5fed-cbd4-4d78-a66b-ff95b7fbe60b, IsOpen = True, SeatsAmount = 151, LiftingTime = 210, QueueTime = 94, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 100, lift: Lift { LiftID = 233, LiftName = liftName41ed5fed-cbd4-4d78-a66b-ff95b7fbe60b, IsOpen = True, SeatsAmount = 151, LiftingTime = 210, QueueTime = 94, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","7","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 227, slope: Slope { SlopeID = 33, SlopeName = slopeName17bce321-363e-47d3-9872-39b36d4a8e6c, IsOpen = True, DifficultyLevel = 62, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 227, slope: Slope { SlopeID = 33, SlopeName = slopeName17bce321-363e-47d3-9872-39b36d4a8e6c, IsOpen = True, DifficultyLevel = 62, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","5","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInOk","BL.Tests.UsersServiceTests.TestLogInOk",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","7","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 155, lift: Lift { LiftID = 85, LiftName = liftNameda6fdc6c-fc53-4c40-a20e-e35631624e31, IsOpen = True, SeatsAmount = 52, LiftingTime = 89, QueueTime = 162, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 155, lift: Lift { LiftID = 85, LiftName = liftNameda6fdc6c-fc53-4c40-a20e-e35631624e31, IsOpen = True, SeatsAmount = 52, LiftingTime = 89, QueueTime = 162, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","71","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 170, slope: Slope { SlopeID = 126, SlopeName = slopeNamec370dd99-eb91-4521-ac64-f60379c81865, IsOpen = True, DifficultyLevel = 244, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 170, slope: Slope { SlopeID = 126, SlopeName = slopeNamec370dd99-eb91-4521-ac64-f60379c81865, IsOpen = True, DifficultyLevel = 244, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","10","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 165, lift: Lift { LiftID = 117, LiftName = liftName789cc12c-4f8a-415b-b280-3d09a1db7072, IsOpen = True, SeatsAmount = 147, LiftingTime = 46, QueueTime = 23, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 165, lift: Lift { LiftID = 117, LiftName = liftName789cc12c-4f8a-415b-b280-3d09a1db7072, IsOpen = True, SeatsAmount = 147, LiftingTime = 46, QueueTime = 23, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 140, turnstile: Turnstile { TurnstileID = 209, LiftID = 13, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 140, turnstile: Turnstile { TurnstileID = 209, LiftID = 13, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","7","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 192, slope: Slope { SlopeID = 59, SlopeName = slopeNamed80f0dfd-a094-4635-9ea5-67c90647d562, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 192, slope: Slope { SlopeID = 59, SlopeName = slopeNamed80f0dfd-a094-4635-9ea5-67c90647d562, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 110, slope: Slope { SlopeID = 192, SlopeName = slopeName4d76e99d-ab7d-49a8-bab7-ba7b75ef7982, IsOpen = True, DifficultyLevel = 38, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 110, slope: Slope { SlopeID = 192, SlopeName = slopeName4d76e99d-ab7d-49a8-bab7-ba7b75ef7982, IsOpen = True, DifficultyLevel = 38, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","74","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 75, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeNamea2ca06be-ff37-431e-a7ed-9952d6db4776, IsOpen = True, DifficultyLevel = 30, ConnectedLifts =  }, Slope { SlopeID = 178, SlopeName = slopeName9f971881-2744-4c02-970e-a24e59b2af42, IsOpen = False, DifficultyLevel = 15, ConnectedLifts =  }, Slope { SlopeID = 187, SlopeName = slopeName698ef345-9dd2-441a-ac35-6fda20387cd1, IsOpen = True, DifficultyLevel = 106, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 75, initialSlopes: [Slope { SlopeID = 219, SlopeName = slopeNamea2ca06be-ff37-431e-a7ed-9952d6db4776, IsOpen = True, DifficultyLevel = 30, ConnectedLifts =  }, Slope { SlopeID = 178, SlopeName = slopeName9f971881-2744-4c02-970e-a24e59b2af42, IsOpen = False, DifficultyLevel = 15, ConnectedLifts =  }, Slope { SlopeID = 187, SlopeName = slopeName698ef345-9dd2-441a-ac35-6fda20387cd1, IsOpen = True, DifficultyLevel = 106, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 247, slope: Slope { SlopeID = 90, SlopeName = slopeName9e9f8068-4385-4d1d-b75f-f0bdb16c8932, IsOpen = True, DifficultyLevel = 2, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 247, slope: Slope { SlopeID = 90, SlopeName = slopeName9e9f8068-4385-4d1d-b75f-f0bdb16c8932, IsOpen = True, DifficultyLevel = 2, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","28","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 61, initialSlopes: [Slope { SlopeID = 198, SlopeName = slopeName2a7c17a1-5164-4dfa-a77f-6e2970eb33a9, IsOpen = True, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 200, SlopeName = slopeName4d91670e-96a9-49fc-bf68-2f5d7194ac48, IsOpen = False, DifficultyLevel = 172, ConnectedLifts =  }, Slope { SlopeID = 124, SlopeName = slopeName337d9de1-83cd-4fdc-9648-8c28a5a76159, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 61, initialSlopes: [Slope { SlopeID = 198, SlopeName = slopeName2a7c17a1-5164-4dfa-a77f-6e2970eb33a9, IsOpen = True, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 200, SlopeName = slopeName4d91670e-96a9-49fc-bf68-2f5d7194ac48, IsOpen = False, DifficultyLevel = 172, ConnectedLifts =  }, Slope { SlopeID = 124, SlopeName = slopeName337d9de1-83cd-4fdc-9648-8c28a5a76159, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","5","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 241, slope: Slope { SlopeID = 253, SlopeName = slopeName54c0fc12-59a6-4974-a08c-03f4626cad5e, IsOpen = True, DifficultyLevel = 255, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestUpdateSlopeInfoAsync(userID: 241, slope: Slope { SlopeID = 253, SlopeName = slopeName54c0fc12-59a6-4974-a08c-03f4626cad5e, IsOpen = True, DifficultyLevel = 255, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:8>, slopesRepositoryStub: Mock<ISlopesRepository:6>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","11","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 130, lift: Lift { LiftID = 79, LiftName = liftName4bac656a-3d84-4545-be31-10acf4a70bca, IsOpen = True, SeatsAmount = 67, LiftingTime = 186, QueueTime = 48, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 130, lift: Lift { LiftID = 79, LiftName = liftName4bac656a-3d84-4545-be31-10acf4a70bca, IsOpen = True, SeatsAmount = 67, LiftingTime = 186, QueueTime = 48, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","74","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminGetUsers","BL.Tests.UsersServiceTests.TestAdminGetUsers",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","71","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 235, turnstile: Turnstile { TurnstileID = 106, LiftID = 75, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 235, turnstile: Turnstile { TurnstileID = 106, LiftID = 75, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","46","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 38, LiftName = liftName224aa56c-5f0e-4a80-8a1a-e01fc472ef55, IsOpen = True, SeatsAmount = 253, LiftingTime = 98, QueueTime = 20, ConnectedSlopes =  }, slope: Slope { SlopeID = 120, SlopeName = slopeName202d0f60-5526-4249-88b3-e0d2a0c6ba29, IsOpen = False, DifficultyLevel = 205, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 38, LiftName = liftName224aa56c-5f0e-4a80-8a1a-e01fc472ef55, IsOpen = True, SeatsAmount = 253, LiftingTime = 98, QueueTime = 20, ConnectedSlopes =  }, slope: Slope { SlopeID = 120, SlopeName = slopeName202d0f60-5526-4249-88b3-e0d2a0c6ba29, IsOpen = False, DifficultyLevel = 205, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","71","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 23, initialTurnstiles: [Turnstile { TurnstileID = 150, LiftID = 110, IsOpen = True }, Turnstile { TurnstileID = 142, LiftID = 131, IsOpen = False }, Turnstile { TurnstileID = 123, LiftID = 194, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 23, initialTurnstiles: [Turnstile { TurnstileID = 150, LiftID = 110, IsOpen = True }, Turnstile { TurnstileID = 142, LiftID = 131, IsOpen = False }, Turnstile { TurnstileID = 123, LiftID = 194, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail","BL.Tests.UsersServiceTests.TestRegisterUserWithRepeatedEmail",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","58","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 133, initialTurnstiles: [Turnstile { TurnstileID = 228, LiftID = 128, IsOpen = True }, Turnstile { TurnstileID = 26, LiftID = 15, IsOpen = False }, Turnstile { TurnstileID = 214, LiftID = 151, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 133, initialTurnstiles: [Turnstile { TurnstileID = 228, LiftID = 128, IsOpen = True }, Turnstile { TurnstileID = 26, LiftID = 15, IsOpen = False }, Turnstile { TurnstileID = 214, LiftID = 151, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","7","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 93, slope: Slope { SlopeID = 201, SlopeName = slopeNameaef0d4d6-2e1c-48db-9061-637248c6d1d7, IsOpen = True, DifficultyLevel = 196, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 93, slope: Slope { SlopeID = 201, SlopeName = slopeNameaef0d4d6-2e1c-48db-9061-637248c6d1d7, IsOpen = True, DifficultyLevel = 196, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","8","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 43, lift: Lift { LiftID = 237, LiftName = liftName3af2ef9a-b981-47c9-a07a-c11c1ebb6b61, IsOpen = True, SeatsAmount = 180, LiftingTime = 114, QueueTime = 19, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 43, lift: Lift { LiftID = 237, LiftName = liftName3af2ef9a-b981-47c9-a07a-c11c1ebb6b61, IsOpen = True, SeatsAmount = 180, LiftingTime = 114, QueueTime = 19, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","4","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminFunctions",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","7","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 227, LiftName = liftNameda191cfe-a92a-4a78-9d62-66a32b13bd4e, IsOpen = True, SeatsAmount = 30, LiftingTime = 86, QueueTime = 32, ConnectedSlopes =  }, slope: Slope { SlopeID = 123, SlopeName = slopeName0f654a43-7709-445b-aa49-17ccee2581ab, IsOpen = False, DifficultyLevel = 154, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 227, LiftName = liftNameda191cfe-a92a-4a78-9d62-66a32b13bd4e, IsOpen = True, SeatsAmount = 30, LiftingTime = 86, QueueTime = 32, ConnectedSlopes =  }, slope: Slope { SlopeID = 123, SlopeName = slopeName0f654a43-7709-445b-aa49-17ccee2581ab, IsOpen = False, DifficultyLevel = 154, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","71","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 247, LiftName = liftName0607e24a-79bf-48ad-901a-d0566dc91a34, IsOpen = True, SeatsAmount = 143, LiftingTime = 177, QueueTime = 122, ConnectedSlopes =  }, slope: Slope { SlopeID = 232, SlopeName = slopeName97f9dfa2-6b21-44cb-b812-08644933a9d9, IsOpen = False, DifficultyLevel = 100, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)","BL.Tests.LiftsSlopesServiceTests.TestAdminAddAutoIncrementLiftSlopeAsync(lift: Lift { LiftID = 247, LiftName = liftName0607e24a-79bf-48ad-901a-d0566dc91a34, IsOpen = True, SeatsAmount = 143, LiftingTime = 177, QueueTime = 122, ConnectedSlopes =  }, slope: Slope { SlopeID = 232, SlopeName = slopeName97f9dfa2-6b21-44cb-b812-08644933a9d9, IsOpen = False, DifficultyLevel = 100, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:3>, liftsRepositoryStub: Mock<ILiftsRepository:8>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:8>)",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","58","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 108, slope: Slope { SlopeID = 68, SlopeName = slopeName1de8fba2-2073-48cf-8d6a-52d4b7aaea9e, IsOpen = True, DifficultyLevel = 230, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 108, slope: Slope { SlopeID = 68, SlopeName = slopeName1de8fba2-2073-48cf-8d6a-52d4b7aaea9e, IsOpen = True, DifficultyLevel = 230, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","14","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 17, slope: Slope { SlopeID = 75, SlopeName = slopeName0bba86c9-a379-4373-afd4-c32358fe1c79, IsOpen = True, DifficultyLevel = 119, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 17, slope: Slope { SlopeID = 75, SlopeName = slopeName0bba86c9-a379-4373-afd4-c32358fe1c79, IsOpen = True, DifficultyLevel = 119, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","74","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 20, initialLifts: [Lift { LiftID = 191, LiftName = liftName04f20b64-9486-46d5-ada7-03e888e49b51, IsOpen = True, SeatsAmount = 158, LiftingTime = 17, QueueTime = 146, ConnectedSlopes =  }, Lift { LiftID = 170, LiftName = liftName764d076a-314d-4fa5-bba5-b1fe1f172b30, IsOpen = False, SeatsAmount = 134, LiftingTime = 57, QueueTime = 154, ConnectedSlopes =  }, Lift { LiftID = 164, LiftName = liftName8980b385-f408-484e-b0c0-9f1146b95988, IsOpen = True, SeatsAmount = 9, LiftingTime = 18, QueueTime = 169, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftsInfoAsync(userID: 20, initialLifts: [Lift { LiftID = 191, LiftName = liftName04f20b64-9486-46d5-ada7-03e888e49b51, IsOpen = True, SeatsAmount = 158, LiftingTime = 17, QueueTime = 146, ConnectedSlopes =  }, Lift { LiftID = 170, LiftName = liftName764d076a-314d-4fa5-bba5-b1fe1f172b30, IsOpen = False, SeatsAmount = 134, LiftingTime = 57, QueueTime = 154, ConnectedSlopes =  }, Lift { LiftID = 164, LiftName = liftName8980b385-f408-484e-b0c0-9f1146b95988, IsOpen = True, SeatsAmount = 9, LiftingTime = 18, QueueTime = 169, ConnectedSlopes =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:2>, liftsRepositoryStub: Mock<ILiftsRepository:2>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:2>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","4","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetMessagesAsync"")",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","12","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 96, LiftID = 157, SlopeID = 103 }, LiftSlope { RecordID = 81, LiftID = 160, SlopeID = 38 }, LiftSlope { RecordID = 211, LiftID = 177, SlopeID = 73 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)","BL.Tests.LiftsSlopesServiceTests.TestGetLiftsSlopesInfoAsync(liftsSlopes: [LiftSlope { RecordID = 96, LiftID = 157, SlopeID = 103 }, LiftSlope { RecordID = 81, LiftID = 160, SlopeID = 38 }, LiftSlope { RecordID = 211, LiftID = 177, SlopeID = 73 }], slopesRepositoryStub: Mock<ISlopesRepository:1>, liftsRepositoryStub: Mock<ILiftsRepository:6>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:6>)",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","3","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.UnauthorizedHasNoAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","71","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 87, lift: Lift { LiftID = 120, LiftName = liftName259dc660-5ccb-4441-9c0d-ca2f919d63eb, IsOpen = True, SeatsAmount = 162, LiftingTime = 75, QueueTime = 145, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 87, lift: Lift { LiftID = 120, LiftName = liftName259dc660-5ccb-4441-9c0d-ca2f919d63eb, IsOpen = True, SeatsAmount = 162, LiftingTime = 75, QueueTime = 145, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")","BL.Tests.CheckPermissionsServiceTests.SkiPatrolHasAccessToAdminSkiPatrolFunctions(functionName: ""MarkMessageReadByUserAsync"")",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","7","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 215, slope: Slope { SlopeID = 70, SlopeName = slopeName0aec1ba7-eea0-4a64-b13f-31b45cabf7c6, IsOpen = True, DifficultyLevel = 122, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopeInfoAsync(userID: 215, slope: Slope { SlopeID = 70, SlopeName = slopeName0aec1ba7-eea0-4a64-b13f-31b45cabf7c6, IsOpen = True, DifficultyLevel = 122, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:6>, slopesRepositoryStub: Mock<ISlopesRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:9>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","15","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 229, turnstile: Turnstile { TurnstileID = 227, LiftID = 168, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 229, turnstile: Turnstile { TurnstileID = 227, LiftID = 168, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","9","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 71, slope: Slope { SlopeID = 137, SlopeName = slopeName9ccc01ce-a839-43ed-920b-2e5228eaa10f, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 71, slope: Slope { SlopeID = 137, SlopeName = slopeName9ccc01ce-a839-43ed-920b-2e5228eaa10f, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","104","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 171, initialSlopes: [Slope { SlopeID = 192, SlopeName = slopeName40c05038-f63b-4e8c-9dea-f8645ece65c4, IsOpen = True, DifficultyLevel = 237, ConnectedLifts =  }, Slope { SlopeID = 1, SlopeName = slopeNamea63c0374-262b-4de7-9e4a-fe4c46140661, IsOpen = False, DifficultyLevel = 129, ConnectedLifts =  }, Slope { SlopeID = 152, SlopeName = slopeName263276d9-6cea-4963-8bbb-b59f6ad9fc66, IsOpen = True, DifficultyLevel = 8, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 171, initialSlopes: [Slope { SlopeID = 192, SlopeName = slopeName40c05038-f63b-4e8c-9dea-f8645ece65c4, IsOpen = True, DifficultyLevel = 237, ConnectedLifts =  }, Slope { SlopeID = 1, SlopeName = slopeNamea63c0374-262b-4de7-9e4a-fe4c46140661, IsOpen = False, DifficultyLevel = 129, ConnectedLifts =  }, Slope { SlopeID = 152, SlopeName = slopeName263276d9-6cea-4963-8bbb-b59f6ad9fc66, IsOpen = True, DifficultyLevel = 8, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","8","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 185, lift: Lift { LiftID = 234, LiftName = liftName359c4b69-13f0-46ef-ac7d-cd997a8b9fab, IsOpen = True, SeatsAmount = 33, LiftingTime = 147, QueueTime = 155, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 185, lift: Lift { LiftID = 234, LiftName = liftName359c4b69-13f0-46ef-ac7d-cd997a8b9fab, IsOpen = True, SeatsAmount = 33, LiftingTime = 147, QueueTime = 155, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","7","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminUpdateUser","BL.Tests.UsersServiceTests.TestAdminUpdateUser",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasNoAccessToAdminSkiPatrolFunctions(functionName: ""GetLiftsSlopesInfoAsync"")",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","7","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 234, initialTurnstiles: [Turnstile { TurnstileID = 82, LiftID = 81, IsOpen = True }, Turnstile { TurnstileID = 135, LiftID = 251, IsOpen = False }, Turnstile { TurnstileID = 118, LiftID = 126, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstilesAsync(userID: 234, initialTurnstiles: [Turnstile { TurnstileID = 82, LiftID = 81, IsOpen = True }, Turnstile { TurnstileID = 135, LiftID = 251, IsOpen = False }, Turnstile { TurnstileID = 118, LiftID = 126, IsOpen = True }], checkPermissionServiceMock: Mock<ICheckPermissionService:13>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:7>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","8","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 64, lift: Lift { LiftID = 119, LiftName = liftName9a8f169f-4d02-43b5-a365-e781b71f634f, IsOpen = True, SeatsAmount = 185, LiftingTime = 207, QueueTime = 20, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 64, lift: Lift { LiftID = 119, LiftName = liftName9a8f169f-4d02-43b5-a365-e781b71f634f, IsOpen = True, SeatsAmount = 185, LiftingTime = 207, QueueTime = 20, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","13","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 184, lift: Lift { LiftID = 18, LiftName = liftName62bd7cfc-40c3-492d-8a1d-c226d567a9c5, IsOpen = True, SeatsAmount = 75, LiftingTime = 123, QueueTime = 100, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestUpdateLiftInfoAsync(userID: 184, lift: Lift { LiftID = 18, LiftName = liftName62bd7cfc-40c3-492d-8a1d-c226d567a9c5, IsOpen = True, SeatsAmount = 75, LiftingTime = 123, QueueTime = 100, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:3>, liftsRepositoryStub: Mock<ILiftsRepository:3>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""SendMessageAsync"")",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","5","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 222, slope: Slope { SlopeID = 75, SlopeName = slopeNamef604257f-d298-48d0-9770-73170ffb70a7, IsOpen = True, DifficultyLevel = 173, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminDeleteSlopeAsync(userID: 222, slope: Slope { SlopeID = 75, SlopeName = slopeNamef604257f-d298-48d0-9770-73170ffb70a7, IsOpen = True, DifficultyLevel = 173, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:9>, slopesRepositoryStub: Mock<ISlopesRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:12>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","5","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 237, slope: Slope { SlopeID = 180, SlopeName = slopeName81ff0399-5c03-4b57-9ab3-d0bab7835b7d, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 237, slope: Slope { SlopeID = 180, SlopeName = slopeName81ff0399-5c03-4b57-9ab3-d0bab7835b7d, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","7","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 173, turnstile: Turnstile { TurnstileID = 170, LiftID = 22, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 173, turnstile: Turnstile { TurnstileID = 170, LiftID = 22, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword","BL.Tests.UsersServiceTests.TestLogInWithWrongPassword",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","11","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 47, lift: Lift { LiftID = 219, LiftName = liftName4a71cbef-3b85-42cb-84cc-609089ac30e6, IsOpen = True, SeatsAmount = 59, LiftingTime = 150, QueueTime = 154, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminDeleteLiftAsync(userID: 47, lift: Lift { LiftID = 219, LiftName = liftName4a71cbef-3b85-42cb-84cc-609089ac30e6, IsOpen = True, SeatsAmount = 59, LiftingTime = 150, QueueTime = 154, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:4>, liftsRepositoryStub: Mock<ILiftsRepository:4>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:4>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","7","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 107, turnstile: Turnstile { TurnstileID = 203, LiftID = 91, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 107, turnstile: Turnstile { TurnstileID = 203, LiftID = 91, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","5","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 4, turnstile: Turnstile { TurnstileID = 179, LiftID = 158, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminGetTurnstileAsync(userID: 4, turnstile: Turnstile { TurnstileID = 179, LiftID = 158, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:12>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:6>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","1","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")","BL.Tests.CheckPermissionsServiceTests.AuthorizedHasAccessToAuthorizedFunctions(functionName: ""LogOutAsync"")",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","11","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 177, slope: Slope { SlopeID = 182, SlopeName = slopeNamea568cba1-d126-4847-b813-cc350c9b2fa6, IsOpen = True, DifficultyLevel = 25, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 177, slope: Slope { SlopeID = 182, SlopeName = slopeNamea568cba1-d126-4847-b813-cc350c9b2fa6, IsOpen = True, DifficultyLevel = 25, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","13","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser","BL.Tests.UsersServiceTests.TestAdminAddAutoIncrementUser",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","6","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 221, slope: Slope { SlopeID = 252, SlopeName = slopeNamec4acf6e3-aa5e-4112-9def-bef1dea9348a, IsOpen = True, DifficultyLevel = 94, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 221, slope: Slope { SlopeID = 252, SlopeName = slopeNamec4acf6e3-aa5e-4112-9def-bef1dea9348a, IsOpen = True, DifficultyLevel = 94, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","6","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 90, turnstile: Turnstile { TurnstileID = 185, LiftID = 151, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminUpdateTurnstileAsync(userID: 90, turnstile: Turnstile { TurnstileID = 185, LiftID = 151, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:14>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:8>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","2","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword","BL.Tests.UsersServiceTests.TestRegisterUserWithNoPassword",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","5","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 63, slope: Slope { SlopeID = 133, SlopeName = slopeName1405de70-18b5-4174-8d5d-c989e119199b, IsOpen = True, DifficultyLevel = 202, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddSlopeAsync(userID: 63, slope: Slope { SlopeID = 133, SlopeName = slopeName1405de70-18b5-4174-8d5d-c989e119199b, IsOpen = True, DifficultyLevel = 202, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:11>, slopesRepositoryStub: Mock<ISlopesRepository:9>, sut: SlopesService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","47","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 90, turnstile: Turnstile { TurnstileID = 26, LiftID = 205, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminAddAutoIncrementTurnstileAsync(userID: 90, turnstile: Turnstile { TurnstileID = 26, LiftID = 205, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:16>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:10>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","2","","CheckPermissionsServiceSuite","","BL.Tests.CheckPermissionsServiceTests","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions","BL.Tests.CheckPermissionsServiceTests.AdminHasAccessToAllFunctions",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","7","","SlopesServiceSuite","","BL.Tests.SlopesServiceTest","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 89, slope: Slope { SlopeID = 62, SlopeName = slopeNamee3457bd3-8aac-49c5-bc93-ea2a74439ba9, IsOpen = True, DifficultyLevel = 244, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })","BL.Tests.SlopesServiceTest.TestAdminAddAutoIncrementSlopeAsync(userID: 89, slope: Slope { SlopeID = 62, SlopeName = slopeNamee3457bd3-8aac-49c5-bc93-ea2a74439ba9, IsOpen = True, DifficultyLevel = 244, ConnectedLifts =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:10>, slopesRepositoryStub: Mock<ISlopesRepository:8>, sut: SlopesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","15","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 29, lift: Lift { LiftID = 59, LiftName = liftName8da1b3e6-82f3-4173-938c-26497db73349, IsOpen = True, SeatsAmount = 183, LiftingTime = 72, QueueTime = 162, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestAdminAddAutoIncrementLiftAsync(userID: 29, lift: Lift { LiftID = 59, LiftName = liftName8da1b3e6-82f3-4173-938c-26497db73349, IsOpen = True, SeatsAmount = 183, LiftingTime = 72, QueueTime = 162, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:5>, liftsRepositoryStub: Mock<ILiftsRepository:5>, sut: LiftsService { })",""
"passed","Mon Oct 10 19:42:33 MSK 2022","Mon Oct 10 19:42:33 MSK 2022","4","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 169, turnstile: Turnstile { TurnstileID = 164, LiftID = 151, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 169, turnstile: Turnstile { TurnstileID = 164, LiftID = 151, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:20:17 MSK 2022","Tue Oct 11 00:20:17 MSK 2022","72","","TurnstilesServiceSuite","","BL.Tests.TurnstilesServiceTest","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 55, turnstile: Turnstile { TurnstileID = 247, LiftID = 6, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })","BL.Tests.TurnstilesServiceTest.TestAdminDeleteTurnstileAsync(userID: 55, turnstile: Turnstile { TurnstileID = 247, LiftID = 6, IsOpen = True }, checkPermissionServiceMock: Mock<ICheckPermissionService:15>, turnstilesRepositoryStub: Mock<ITurnstilesRepository:9>, sut: TurnstilesService { })",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","4","","UsersServiceSuite","","BL.Tests.UsersServiceTests","BL.Tests.UsersServiceTests.TestAdminDeleteUser","BL.Tests.UsersServiceTests.TestAdminDeleteUser",""
"passed","Tue Oct 11 00:23:56 MSK 2022","Tue Oct 11 00:23:56 MSK 2022","18","","LiftsServiceSuite","","BL.Tests.LiftsServiceTest","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 71, lift: Lift { LiftID = 140, LiftName = liftNamefaf1104c-b27e-4f6a-86ef-dddd8e15c2e9, IsOpen = True, SeatsAmount = 42, LiftingTime = 126, QueueTime = 234, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })","BL.Tests.LiftsServiceTest.TestGetLiftInfoAsync(userID: 71, lift: Lift { LiftID = 140, LiftName = liftNamefaf1104c-b27e-4f6a-86ef-dddd8e15c2e9, IsOpen = True, SeatsAmount = 42, LiftingTime = 126, QueueTime = 234, ConnectedSlopes =  }, checkPermissionServiceMock: Mock<ICheckPermissionService:1>, liftsRepositoryStub: Mock<ILiftsRepository:1>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:1>, sut: LiftsService { })",""
"passed","Tue Oct 11 00:18:56 MSK 2022","Tue Oct 11 00:18:56 MSK 2022","58","","LiftsSlopesServiceSuite","","BL.Tests.LiftsSlopesServiceTests","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 39, LiftName = liftNamef407c9ce-fe22-4251-8743-d9781261b5d7, IsOpen = True, SeatsAmount = 224, LiftingTime = 21, QueueTime = 138, ConnectedSlopes =  }, slope: Slope { SlopeID = 56, SlopeName = slopeName4404cb6c-9ceb-4e9e-92b8-146aee0ff54c, IsOpen = False, DifficultyLevel = 222, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)","BL.Tests.LiftsSlopesServiceTests.TestAdminDeleteLiftSlopeAsync(lift: Lift { LiftID = 39, LiftName = liftNamef407c9ce-fe22-4251-8743-d9781261b5d7, IsOpen = True, SeatsAmount = 224, LiftingTime = 21, QueueTime = 138, ConnectedSlopes =  }, slope: Slope { SlopeID = 56, SlopeName = slopeName4404cb6c-9ceb-4e9e-92b8-146aee0ff54c, IsOpen = False, DifficultyLevel = 222, ConnectedLifts =  }, slopesRepositoryStub: Mock<ISlopesRepository:2>, liftsRepositoryStub: Mock<ILiftsRepository:7>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:7>)",""
"passed","Tue Oct 11 18:24:23 MSK 2022","Tue Oct 11 18:24:24 MSK 2022","609","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 206)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 206)",""
"passed","Tue Oct 11 15:10:46 MSK 2022","Tue Oct 11 15:10:47 MSK 2022","634","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 221, CardID = 253, UserEmail = UserEmail7298c468-cd46-490f-b255-69bb95ef0e19, Password = password63ad2ab4-23dc-42c4-afde-cc4947b2e821, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 221, CardID = 253, UserEmail = UserEmail7298c468-cd46-490f-b255-69bb95ef0e19, Password = password63ad2ab4-23dc-42c4-afde-cc4947b2e821, Permissions = UNAUTHORIZED })",""
"failed","Tue Oct 11 21:16:17 MSK 2022","Tue Oct 11 21:16:17 MSK 2022","24","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 178, SlopeName = slopeName2b658860-5efd-4791-b07e-50087ce3be0f, IsOpen = True, DifficultyLevel = 59, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 178, SlopeName = slopeName2b658860-5efd-4791-b07e-50087ce3be0f, IsOpen = True, DifficultyLevel = 59, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:01:51 MSK 2022","Tue Oct 11 19:01:52 MSK 2022","567","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 206)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 206)",""
"passed","Tue Oct 11 21:20:06 MSK 2022","Tue Oct 11 21:20:07 MSK 2022","715","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 168, LiftID = 243, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 168, LiftID = 243, IsOpen = True })",""
"failed","Tue Oct 11 09:10:58 MSK 2022","Tue Oct 11 09:10:58 MSK 2022","69","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 238)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 238)",""
"passed","Tue Oct 11 21:16:16 MSK 2022","Tue Oct 11 21:16:16 MSK 2022","596","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail420870af-5c70-4aae-9f7e-298b1045fcb3"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail420870af-5c70-4aae-9f7e-298b1045fcb3"")",""
"passed","Tue Oct 11 19:14:09 MSK 2022","Tue Oct 11 19:14:10 MSK 2022","847","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 181)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 181)",""
"passed","Tue Oct 11 09:15:49 MSK 2022","Tue Oct 11 09:15:50 MSK 2022","646","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 21, SlopeName = slopeNameef36cc4b-af3d-4cea-93fc-d3a79eed2794, IsOpen = True, DifficultyLevel = 130, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 21, SlopeName = slopeNameef36cc4b-af3d-4cea-93fc-d3a79eed2794, IsOpen = True, DifficultyLevel = 130, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:29:55 MSK 2022","Tue Oct 11 21:29:56 MSK 2022","687","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 59, CardID = 3, UserEmail = UserEmail1ed902df-445d-4534-892e-41f2b43ed77d, Password = passwordb0d1afa1-e5c2-4b56-b325-0fff918b9c48, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 59, CardID = 3, UserEmail = UserEmail1ed902df-445d-4534-892e-41f2b43ed77d, Password = passwordb0d1afa1-e5c2-4b56-b325-0fff918b9c48, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 09:13:05 MSK 2022","Tue Oct 11 09:13:06 MSK 2022","662","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 35, SlopeName = slopeNamee48b81d4-ad5b-4bac-bf75-98d5b3f2e924, IsOpen = True, DifficultyLevel = 126, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 35, SlopeName = slopeNamee48b81d4-ad5b-4bac-bf75-98d5b3f2e924, IsOpen = True, DifficultyLevel = 126, ConnectedLifts =  })",""
"passed","Tue Oct 11 15:11:03 MSK 2022","Tue Oct 11 15:11:03 MSK 2022","652","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 160, LiftID = 192, SlopeID = 138 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 160, LiftID = 192, SlopeID = 138 })",""
"passed","Tue Oct 11 18:59:25 MSK 2022","Tue Oct 11 18:59:26 MSK 2022","599","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 81, CardID = 18, UserEmail = UserEmail774d17d2-0e48-4fd0-9d97-7e42f6aced5d, Password = passwordf22783a1-6ae6-4fb9-9ed4-b690314ee93a, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 81, CardID = 18, UserEmail = UserEmail774d17d2-0e48-4fd0-9d97-7e42f6aced5d, Password = passwordf22783a1-6ae6-4fb9-9ed4-b690314ee93a, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:25:46 MSK 2022","Tue Oct 11 18:25:47 MSK 2022","653","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 230, LiftName = liftNamea30541e1-17bf-4db7-aaa9-2060a34eb258, IsOpen = True, SeatsAmount = 148, LiftingTime = 204, QueueTime = 29, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 230, LiftName = liftNamea30541e1-17bf-4db7-aaa9-2060a34eb258, IsOpen = True, SeatsAmount = 148, LiftingTime = 204, QueueTime = 29, ConnectedSlopes =  })",""
"failed","Tue Oct 11 19:14:04 MSK 2022","Tue Oct 11 19:14:04 MSK 2022","68","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 168)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 168)",""
"failed","Tue Oct 11 19:01:37 MSK 2022","Tue Oct 11 19:01:37 MSK 2022","66","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 51, SlopeName = slopeNamec9202c85-7cba-47d3-9adb-30269d97d1be, IsOpen = True, DifficultyLevel = 80, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 51, SlopeName = slopeNamec9202c85-7cba-47d3-9adb-30269d97d1be, IsOpen = True, DifficultyLevel = 80, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:19:50 MSK 2022","Tue Oct 11 09:19:50 MSK 2022","650","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 50, LiftName = liftName966e4b16-c7af-40e0-aa8c-c09dcd78e335, IsOpen = True, SeatsAmount = 245, LiftingTime = 82, QueueTime = 43, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 50, LiftName = liftName966e4b16-c7af-40e0-aa8c-c09dcd78e335, IsOpen = True, SeatsAmount = 245, LiftingTime = 82, QueueTime = 43, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:25:46 MSK 2022","Tue Oct 11 18:25:46 MSK 2022","609","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName63bd2d8c-c5e9-42c1-ad6a-3999a21d6786"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName63bd2d8c-c5e9-42c1-ad6a-3999a21d6786"")",""
"passed","Tue Oct 11 19:01:37 MSK 2022","Tue Oct 11 19:01:38 MSK 2022","565","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName882300bd-984a-43bf-a2d6-583595deddfa"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName882300bd-984a-43bf-a2d6-583595deddfa"")",""
"passed","Tue Oct 11 09:12:26 MSK 2022","Tue Oct 11 09:12:27 MSK 2022","659","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 166, SlopeName = slopeName229d84be-dbb5-4f63-95cc-45b8a364ca1e, IsOpen = True, DifficultyLevel = 220, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 166, SlopeName = slopeName229d84be-dbb5-4f63-95cc-45b8a364ca1e, IsOpen = True, DifficultyLevel = 220, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:11:53 MSK 2022","Tue Oct 11 09:11:54 MSK 2022","622","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamefc15a747-bfe8-4e04-bc0e-aff8a43e3335"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamefc15a747-bfe8-4e04-bc0e-aff8a43e3335"")",""
"passed","Tue Oct 11 21:30:04 MSK 2022","Tue Oct 11 21:30:05 MSK 2022","666","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 38, LiftName = liftName8050d2f0-240d-401a-838d-4e7b66592e2f, IsOpen = True, SeatsAmount = 215, LiftingTime = 104, QueueTime = 182, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 38, LiftName = liftName8050d2f0-240d-401a-838d-4e7b66592e2f, IsOpen = True, SeatsAmount = 215, LiftingTime = 104, QueueTime = 182, ConnectedSlopes =  })",""
"passed","Tue Oct 11 00:34:16 MSK 2022","Tue Oct 11 00:34:17 MSK 2022","645","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 97, SlopeName = slopeNamef71bfb9a-c7ad-4e3f-a4f6-116f9f365fbd, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 97, SlopeName = slopeNamef71bfb9a-c7ad-4e3f-a4f6-116f9f365fbd, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:59:26 MSK 2022","Tue Oct 11 18:59:26 MSK 2022","607","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 253, CardID = 235, UserEmail = UserEmailf9a80cd5-bee5-4b32-acf5-77c062bb7fea, Password = password84c84e27-3637-4944-9102-bfb15ad723b1, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 253, CardID = 235, UserEmail = UserEmailf9a80cd5-bee5-4b32-acf5-77c062bb7fea, Password = password84c84e27-3637-4944-9102-bfb15ad723b1, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:25:57 MSK 2022","Tue Oct 11 18:25:58 MSK 2022","640","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 80, CardID = 182, UserEmail = UserEmaile4243eae-17dd-4e83-9193-a59c240926b7, Password = passworde8a1c03c-130b-4674-a9d2-9e0ca9fa4615, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 80, CardID = 182, UserEmail = UserEmaile4243eae-17dd-4e83-9193-a59c240926b7, Password = passworde8a1c03c-130b-4674-a9d2-9e0ca9fa4615, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:25:48 MSK 2022","Tue Oct 11 18:25:48 MSK 2022","637","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 85, LiftName = liftName862889b3-981b-47e6-83cb-d7bac328a8cf, IsOpen = True, SeatsAmount = 229, LiftingTime = 243, QueueTime = 132, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 85, LiftName = liftName862889b3-981b-47e6-83cb-d7bac328a8cf, IsOpen = True, SeatsAmount = 229, LiftingTime = 243, QueueTime = 132, ConnectedSlopes =  })",""
"passed","Tue Oct 11 15:10:51 MSK 2022","Tue Oct 11 15:10:51 MSK 2022","625","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName58ebb6f3-8709-4b17-8942-9cf06433094f"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName58ebb6f3-8709-4b17-8942-9cf06433094f"")",""
"passed","Tue Oct 11 09:13:06 MSK 2022","Tue Oct 11 09:13:06 MSK 2022","664","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 224, SlopeName = slopeNameace27226-0bc5-49e8-8a72-5ab1072f8508, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 224, SlopeName = slopeNameace27226-0bc5-49e8-8a72-5ab1072f8508, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:13:57 MSK 2022","Tue Oct 11 19:13:58 MSK 2022","650","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 89, SlopeName = slopeNamea512b67e-135a-4d0f-88f1-8c18efdfb5d9, IsOpen = True, DifficultyLevel = 172, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 89, SlopeName = slopeNamea512b67e-135a-4d0f-88f1-8c18efdfb5d9, IsOpen = True, DifficultyLevel = 172, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:13:33 MSK 2022","Tue Oct 11 09:13:34 MSK 2022","647","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 143, SlopeName = slopeName74a06746-7388-4f29-a801-76b004ac5573, IsOpen = True, DifficultyLevel = 188, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 143, SlopeName = slopeName74a06746-7388-4f29-a801-76b004ac5573, IsOpen = True, DifficultyLevel = 188, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:24:22 MSK 2022","Tue Oct 11 18:24:22 MSK 2022","615","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName4780a607-6b09-4aca-99ac-8341b55573b0"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName4780a607-6b09-4aca-99ac-8341b55573b0"")",""
"passed","Tue Oct 11 21:16:13 MSK 2022","Tue Oct 11 21:16:14 MSK 2022","656","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 71, CardID = 131, UserEmail = UserEmaila107603f-d39c-4996-909b-e61c4764b522, Password = password361033d6-d463-4408-a825-4c78bf515216, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 71, CardID = 131, UserEmail = UserEmaila107603f-d39c-4996-909b-e61c4764b522, Password = password361033d6-d463-4408-a825-4c78bf515216, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 00:37:02 MSK 2022","Tue Oct 11 00:37:02 MSK 2022","606","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName41867bf9-52d8-4be0-861a-4c2f252a95bf"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName41867bf9-52d8-4be0-861a-4c2f252a95bf"")",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 24, LiftID = 123, SlopeID = 101 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 24, LiftID = 123, SlopeID = 101 })",""
"passed","Tue Oct 11 19:01:50 MSK 2022","Tue Oct 11 19:01:51 MSK 2022","620","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 51, LiftName = liftName95251c43-b65f-4eaf-91d7-942ce40b55c2, IsOpen = True, SeatsAmount = 210, LiftingTime = 27, QueueTime = 146, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 51, LiftName = liftName95251c43-b65f-4eaf-91d7-942ce40b55c2, IsOpen = True, SeatsAmount = 210, LiftingTime = 27, QueueTime = 146, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:20:16 MSK 2022","Tue Oct 11 21:20:17 MSK 2022","778","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 59, LiftName = liftNameea1f6d2b-8463-405a-a6cc-4803402715f8, IsOpen = True, SeatsAmount = 30, LiftingTime = 26, QueueTime = 90, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 59, LiftName = liftNameea1f6d2b-8463-405a-a6cc-4803402715f8, IsOpen = True, SeatsAmount = 30, LiftingTime = 26, QueueTime = 90, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:19:51 MSK 2022","Tue Oct 11 09:19:52 MSK 2022","663","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 18, LiftName = liftNameb0a8c6e0-1fef-4868-9c31-765d4f32f0db, IsOpen = True, SeatsAmount = 81, LiftingTime = 213, QueueTime = 149, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 18, LiftName = liftNameb0a8c6e0-1fef-4868-9c31-765d4f32f0db, IsOpen = True, SeatsAmount = 81, LiftingTime = 213, QueueTime = 149, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:19:52 MSK 2022","Tue Oct 11 09:19:53 MSK 2022","618","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName58bb84cb-f3e2-48a9-a10e-0fdee533068f"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName58bb84cb-f3e2-48a9-a10e-0fdee533068f"")",""
"passed","Tue Oct 11 09:06:52 MSK 2022","Tue Oct 11 09:06:53 MSK 2022","649","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 75, SlopeName = slopeNameae99e3c7-05af-4601-9751-ea006ed1a99c, IsOpen = True, DifficultyLevel = 101, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 75, SlopeName = slopeNameae99e3c7-05af-4601-9751-ea006ed1a99c, IsOpen = True, DifficultyLevel = 101, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:25:55 MSK 2022","Tue Oct 11 18:25:55 MSK 2022","614","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 173)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 173)",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail3c251d14-b7a5-44e8-940f-f08386890d4d"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail3c251d14-b7a5-44e8-940f-f08386890d4d"")",""
"failed","Tue Oct 11 19:01:51 MSK 2022","Tue Oct 11 19:01:51 MSK 2022","31","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 143, LiftName = liftNamebce3c25f-e667-445f-a3fd-87e41b2e3165, IsOpen = True, SeatsAmount = 57, LiftingTime = 91, QueueTime = 224, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 143, LiftName = liftNamebce3c25f-e667-445f-a3fd-87e41b2e3165, IsOpen = True, SeatsAmount = 57, LiftingTime = 91, QueueTime = 224, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:30:00 MSK 2022","Tue Oct 11 21:30:01 MSK 2022","687","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 203, LiftID = 41, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 203, LiftID = 41, IsOpen = True })",""
"passed","Tue Oct 11 21:19:59 MSK 2022","Tue Oct 11 21:19:59 MSK 2022","825","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 131, SlopeName = slopeNamed476c7fc-1b18-4f90-af4e-3d3f83fa98a8, IsOpen = True, DifficultyLevel = 182, ConnectedLifts =  }, slope2: Slope { SlopeID = 94, SlopeName = slopeNamec0b06bb9-d1a3-485e-8737-8cdd1742c9c1, IsOpen = False, DifficultyLevel = 190, ConnectedLifts =  }, lift1: Lift { LiftID = 20, LiftName = liftName599290ea-f946-403e-8bc2-e27f3f88652a, IsOpen = True, SeatsAmount = 46, LiftingTime = 124, QueueTime = 17, ConnectedSlopes =  }, lift2: Lift { LiftID = 219, LiftName = liftName5c49bbcd-8441-47bf-9604-14089880c9a9, IsOpen = False, SeatsAmount = 186, LiftingTime = 170, QueueTime = 4, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 131, SlopeName = slopeNamed476c7fc-1b18-4f90-af4e-3d3f83fa98a8, IsOpen = True, DifficultyLevel = 182, ConnectedLifts =  }, slope2: Slope { SlopeID = 94, SlopeName = slopeNamec0b06bb9-d1a3-485e-8737-8cdd1742c9c1, IsOpen = False, DifficultyLevel = 190, ConnectedLifts =  }, lift1: Lift { LiftID = 20, LiftName = liftName599290ea-f946-403e-8bc2-e27f3f88652a, IsOpen = True, SeatsAmount = 46, LiftingTime = 124, QueueTime = 17, ConnectedSlopes =  }, lift2: Lift { LiftID = 219, LiftName = liftName5c49bbcd-8441-47bf-9604-14089880c9a9, IsOpen = False, SeatsAmount = 186, LiftingTime = 170, QueueTime = 4, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:24:22 MSK 2022","Tue Oct 11 18:24:23 MSK 2022","635","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 87, SlopeName = slopeNamebd8d9070-92b6-4db4-ac9c-912523e0af29, IsOpen = True, DifficultyLevel = 65, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 87, SlopeName = slopeNamebd8d9070-92b6-4db4-ac9c-912523e0af29, IsOpen = True, DifficultyLevel = 65, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:29:59 MSK 2022","Tue Oct 11 21:30:00 MSK 2022","671","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 23, LiftID = 25, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 23, LiftID = 25, IsOpen = True })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","6","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 52, CardID = 202, UserEmail = UserEmail4e047ac7-a469-44ad-848c-0c9093c24715, Password = passwordda53d1ad-6131-4b7a-86d7-15e45d26feef, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 52, CardID = 202, UserEmail = UserEmail4e047ac7-a469-44ad-848c-0c9093c24715, Password = passwordda53d1ad-6131-4b7a-86d7-15e45d26feef, Permissions = UNAUTHORIZED })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","6","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 215, CardID = 196, UserEmail = UserEmaildb3b50a2-b5e6-45c3-b9d6-a15aa64a2156, Password = password065455a2-c438-44bc-aeb5-3f20490f6a0a, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 215, CardID = 196, UserEmail = UserEmaildb3b50a2-b5e6-45c3-b9d6-a15aa64a2156, Password = password065455a2-c438-44bc-aeb5-3f20490f6a0a, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:25:58 MSK 2022","Tue Oct 11 18:25:59 MSK 2022","606","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email7fe1c0ef-1abb-4ce2-be52-df942d30206f"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email7fe1c0ef-1abb-4ce2-be52-df942d30206f"")",""
"passed","Tue Oct 11 21:16:16 MSK 2022","Tue Oct 11 21:16:17 MSK 2022","700","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 231, CardID = 86, UserEmail = UserEmail4ef6e464-72c0-4a96-b9bd-8296e2fd0956, Password = password3052f999-3cd7-4fc0-aab0-3a2d7b4e56b6, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 231, CardID = 86, UserEmail = UserEmail4ef6e464-72c0-4a96-b9bd-8296e2fd0956, Password = password3052f999-3cd7-4fc0-aab0-3a2d7b4e56b6, Permissions = UNAUTHORIZED })",""
"failed","Tue Oct 11 09:19:53 MSK 2022","Tue Oct 11 09:19:53 MSK 2022","2","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 65, SlopeName = slopeName15282802-8a88-4432-a993-5ee4f28d308e, IsOpen = True, DifficultyLevel = 180, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 65, SlopeName = slopeName15282802-8a88-4432-a993-5ee4f28d308e, IsOpen = True, DifficultyLevel = 180, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:11:02 MSK 2022","Tue Oct 11 09:11:03 MSK 2022","615","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamed14ecee2-6bcf-4ca9-80a3-6172aec4b68b"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamed14ecee2-6bcf-4ca9-80a3-6172aec4b68b"")",""
"passed","Tue Oct 11 09:12:41 MSK 2022","Tue Oct 11 09:12:41 MSK 2022","661","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 227, SlopeName = slopeName566b5566-8ea5-4dfc-83d7-20567f6b0616, IsOpen = True, DifficultyLevel = 211, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 227, SlopeName = slopeName566b5566-8ea5-4dfc-83d7-20567f6b0616, IsOpen = True, DifficultyLevel = 211, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:25:57 MSK 2022","Tue Oct 11 18:25:57 MSK 2022","645","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 174, CardID = 149, UserEmail = UserEmail1042b23f-42bd-4962-8f5a-5ca8f8d3abf2, Password = password73be3c51-5d33-4ebe-b9d8-c28eb6e0711f, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 174, CardID = 149, UserEmail = UserEmail1042b23f-42bd-4962-8f5a-5ca8f8d3abf2, Password = password73be3c51-5d33-4ebe-b9d8-c28eb6e0711f, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 21:19:59 MSK 2022","Tue Oct 11 21:20:00 MSK 2022","765","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 139, LiftID = 131, SlopeID = 58 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 139, LiftID = 131, SlopeID = 58 })",""
"passed","Tue Oct 11 21:16:10 MSK 2022","Tue Oct 11 21:16:10 MSK 2022","640","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 44, LiftID = 216, SlopeID = 6 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 44, LiftID = 216, SlopeID = 6 })",""
"passed","Tue Oct 11 09:15:50 MSK 2022","Tue Oct 11 09:15:50 MSK 2022","661","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 146, SlopeName = slopeName8f7017c0-b4f0-4a63-b974-3cf49782f24d, IsOpen = True, DifficultyLevel = 2, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 146, SlopeName = slopeName8f7017c0-b4f0-4a63-b974-3cf49782f24d, IsOpen = True, DifficultyLevel = 2, ConnectedLifts =  })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 222, LiftName = liftName80a1e859-f4f1-434b-affc-15ae21348cc0, IsOpen = True, SeatsAmount = 178, LiftingTime = 126, QueueTime = 28, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 222, LiftName = liftName80a1e859-f4f1-434b-affc-15ae21348cc0, IsOpen = True, SeatsAmount = 178, LiftingTime = 126, QueueTime = 28, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:16:07 MSK 2022","Tue Oct 11 21:16:07 MSK 2022","654","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 24, LiftID = 196, SlopeID = 219 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 24, LiftID = 196, SlopeID = 219 })",""
"passed","Tue Oct 11 18:25:56 MSK 2022","Tue Oct 11 18:25:57 MSK 2022","653","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 163, CardID = 84, UserEmail = UserEmail44dc4229-dda7-4a77-9376-5e75317decd9, Password = password84509d4c-04aa-4dcb-a95c-fd6528996ea6, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 163, CardID = 84, UserEmail = UserEmail44dc4229-dda7-4a77-9376-5e75317decd9, Password = password84509d4c-04aa-4dcb-a95c-fd6528996ea6, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 09:15:44 MSK 2022","Tue Oct 11 09:15:45 MSK 2022","657","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 104, LiftName = liftName94ede4fe-b74c-486e-81db-fee95e0b6cb2, IsOpen = True, SeatsAmount = 131, LiftingTime = 97, QueueTime = 71, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 104, LiftName = liftName94ede4fe-b74c-486e-81db-fee95e0b6cb2, IsOpen = True, SeatsAmount = 131, LiftingTime = 97, QueueTime = 71, ConnectedSlopes =  })",""
"failed","Tue Oct 11 09:13:01 MSK 2022","Tue Oct 11 09:13:02 MSK 2022","666","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 191, LiftName = liftNamec992b484-41d7-486c-9cff-1fe3a7dc3d3b, IsOpen = True, SeatsAmount = 69, LiftingTime = 115, QueueTime = 169, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 191, LiftName = liftNamec992b484-41d7-486c-9cff-1fe3a7dc3d3b, IsOpen = True, SeatsAmount = 69, LiftingTime = 115, QueueTime = 169, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:59:14 MSK 2022","Tue Oct 11 18:59:14 MSK 2022","569","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 122)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 122)",""
"passed","Tue Oct 11 21:29:53 MSK 2022","Tue Oct 11 21:29:53 MSK 2022","585","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty","AccessToDB.Tests.UsersRepositoryTests.TestGetUsersAsyncEmpty",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","6","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 162, CardID = 242, UserEmail = UserEmail7eb98fd9-adb5-4df9-bbe8-28087e87f36a, Password = password4064515f-015e-4890-a1e2-7655204c8141, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 162, CardID = 242, UserEmail = UserEmail7eb98fd9-adb5-4df9-bbe8-28087e87f36a, Password = password4064515f-015e-4890-a1e2-7655204c8141, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 15:10:45 MSK 2022","Tue Oct 11 15:10:45 MSK 2022","604","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail2d977067-e530-4247-bb9c-3b5746fb1965"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail2d977067-e530-4247-bb9c-3b5746fb1965"")",""
"failed","Tue Oct 11 09:06:18 MSK 2022","Tue Oct 11 09:06:18 MSK 2022","701","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 137)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 137)",""
"passed","Tue Oct 11 09:06:51 MSK 2022","Tue Oct 11 09:06:52 MSK 2022","745","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 5, SlopeName = slopeName78abdbfc-097b-4f2b-86a0-525d905d8521, IsOpen = True, DifficultyLevel = 236, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 5, SlopeName = slopeName78abdbfc-097b-4f2b-86a0-525d905d8521, IsOpen = True, DifficultyLevel = 236, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:16:14 MSK 2022","Tue Oct 11 21:16:15 MSK 2022","722","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 199, CardID = 127, UserEmail = UserEmail193327b5-fb5f-4187-b437-5085ed00bfe5, Password = password8e75ab1a-c11e-46d6-9ca1-39e327cc789e, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 199, CardID = 127, UserEmail = UserEmail193327b5-fb5f-4187-b437-5085ed00bfe5, Password = password8e75ab1a-c11e-46d6-9ca1-39e327cc789e, Permissions = UNAUTHORIZED })",""
"failed","Tue Oct 11 18:37:42 MSK 2022","Tue Oct 11 18:37:42 MSK 2022","8","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 99, SlopeName = slopeName8c30713b-8e13-41d3-aa28-02d3f1ddbbd0, IsOpen = True, DifficultyLevel = 134, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 99, SlopeName = slopeName8c30713b-8e13-41d3-aa28-02d3f1ddbbd0, IsOpen = True, DifficultyLevel = 134, ConnectedLifts =  })",""
"failed","Tue Oct 11 19:14:05 MSK 2022","Tue Oct 11 19:14:06 MSK 2022","39","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 233, LiftID = 212, SlopeID = 114 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 233, LiftID = 212, SlopeID = 114 })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","8","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 64, LiftID = 129, SlopeID = 198 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 64, LiftID = 129, SlopeID = 198 })",""
"passed","Tue Oct 11 19:14:01 MSK 2022","Tue Oct 11 19:14:02 MSK 2022","710","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 199, LiftName = liftName1e456aca-425f-4f07-b4de-fbc5851f5317, IsOpen = True, SeatsAmount = 77, LiftingTime = 110, QueueTime = 164, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 199, LiftName = liftName1e456aca-425f-4f07-b4de-fbc5851f5317, IsOpen = True, SeatsAmount = 77, LiftingTime = 110, QueueTime = 164, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:20:12 MSK 2022","Tue Oct 11 21:20:13 MSK 2022","564","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 174)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 174)",""
"passed","Tue Oct 11 19:01:36 MSK 2022","Tue Oct 11 19:01:36 MSK 2022","565","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 93)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 93)",""
"passed","Tue Oct 11 19:01:34 MSK 2022","Tue Oct 11 19:01:35 MSK 2022","659","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 186, SlopeName = slopeNamef4cd1551-4faa-41a3-b927-8ce53328f802, IsOpen = True, DifficultyLevel = 229, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 186, SlopeName = slopeNamef4cd1551-4faa-41a3-b927-8ce53328f802, IsOpen = True, DifficultyLevel = 229, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:25:50 MSK 2022","Tue Oct 11 18:25:51 MSK 2022","643","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 212, LiftID = 205, SlopeID = 64 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 212, LiftID = 205, SlopeID = 64 })",""
"passed","Tue Oct 11 21:16:22 MSK 2022","Tue Oct 11 21:16:23 MSK 2022","671","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 154, LiftID = 254, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 154, LiftID = 254, IsOpen = True })",""
"passed","Tue Oct 11 21:16:18 MSK 2022","Tue Oct 11 21:16:18 MSK 2022","574","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNameb7ad4ace-f3cb-4164-8355-35d7f133ca93"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNameb7ad4ace-f3cb-4164-8355-35d7f133ca93"")",""
"passed","Tue Oct 11 09:15:46 MSK 2022","Tue Oct 11 09:15:46 MSK 2022","615","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 159)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 159)",""
"passed","Tue Oct 11 19:14:14 MSK 2022","Tue Oct 11 19:14:15 MSK 2022","648","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emailb3074f3d-3995-4662-b9ea-29d42c0098ac"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emailb3074f3d-3995-4662-b9ea-29d42c0098ac"")",""
"passed","Tue Oct 11 15:10:25 MSK 2022","Tue Oct 11 15:10:26 MSK 2022","672","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 116, SlopeName = slopeNamee364a48e-c537-43c8-83c5-6be6e18a7946, IsOpen = True, DifficultyLevel = 72, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 116, SlopeName = slopeNamee364a48e-c537-43c8-83c5-6be6e18a7946, IsOpen = True, DifficultyLevel = 72, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:59:28 MSK 2022","Tue Oct 11 18:59:28 MSK 2022","569","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmailfd9beea8-e611-4306-a4a1-fbed99d681b9"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmailfd9beea8-e611-4306-a4a1-fbed99d681b9"")",""
"passed","Tue Oct 11 09:06:54 MSK 2022","Tue Oct 11 09:06:55 MSK 2022","619","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 20)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 20)",""
"passed","Tue Oct 11 15:10:44 MSK 2022","Tue Oct 11 15:10:45 MSK 2022","657","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 130, CardID = 230, UserEmail = UserEmail41d1ed08-b296-42c7-99a3-224f69aa0e16, Password = password31acad73-40c1-4821-afdd-0c5cde2bba92, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 130, CardID = 230, UserEmail = UserEmail41d1ed08-b296-42c7-99a3-224f69aa0e16, Password = password31acad73-40c1-4821-afdd-0c5cde2bba92, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 00:37:03 MSK 2022","Tue Oct 11 00:37:04 MSK 2022","647","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 79, SlopeName = slopeNamef28200c2-afa0-4de0-9b5e-3202d521f26b, IsOpen = True, DifficultyLevel = 69, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 79, SlopeName = slopeNamef28200c2-afa0-4de0-9b5e-3202d521f26b, IsOpen = True, DifficultyLevel = 69, ConnectedLifts =  })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","8","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 191, LiftID = 228, SlopeID = 2 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 191, LiftID = 228, SlopeID = 2 })",""
"passed","Tue Oct 11 21:20:02 MSK 2022","Tue Oct 11 21:20:03 MSK 2022","738","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 168, LiftID = 156, SlopeID = 97 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 168, LiftID = 156, SlopeID = 97 })",""
"passed","Tue Oct 11 00:37:49 MSK 2022","Tue Oct 11 00:37:51 MSK 2022","2288","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 43, SlopeName = slopeNamea8ac52c3-1cc4-4a96-9530-ee66804bc168, IsOpen = True, DifficultyLevel = 88, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 43, SlopeName = slopeNamea8ac52c3-1cc4-4a96-9530-ee66804bc168, IsOpen = True, DifficultyLevel = 88, ConnectedLifts =  })",""
"failed","Tue Oct 11 08:55:33 MSK 2022","Tue Oct 11 08:55:33 MSK 2022","66","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 90, SlopeName = slopeName75ca2c8e-bc54-476b-8a08-805aab70df8e, IsOpen = True, DifficultyLevel = 17, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 90, SlopeName = slopeName75ca2c8e-bc54-476b-8a08-805aab70df8e, IsOpen = True, DifficultyLevel = 17, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:25:54 MSK 2022","Tue Oct 11 18:25:55 MSK 2022","610","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 38)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 38)",""
"passed","Tue Oct 11 18:25:51 MSK 2022","Tue Oct 11 18:25:52 MSK 2022","661","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 169, LiftID = 201, SlopeID = 190 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 169, LiftID = 201, SlopeID = 190 })",""
"passed","Tue Oct 11 18:25:01 MSK 2022","Tue Oct 11 18:25:02 MSK 2022","667","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 38, LiftName = liftName21a470fd-c87e-490c-852c-34ce269a22f4, IsOpen = True, SeatsAmount = 114, LiftingTime = 60, QueueTime = 73, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 38, LiftName = liftName21a470fd-c87e-490c-852c-34ce269a22f4, IsOpen = True, SeatsAmount = 114, LiftingTime = 60, QueueTime = 73, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:20:18 MSK 2022","Tue Oct 11 21:20:19 MSK 2022","773","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 184, LiftName = liftName59d954db-3e76-403f-91a0-8e80c214a532, IsOpen = True, SeatsAmount = 28, LiftingTime = 108, QueueTime = 58, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 184, LiftName = liftName59d954db-3e76-403f-91a0-8e80c214a532, IsOpen = True, SeatsAmount = 28, LiftingTime = 108, QueueTime = 58, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:20:00 MSK 2022","Tue Oct 11 21:20:01 MSK 2022","758","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 117, LiftID = 75, SlopeID = 59 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 117, LiftID = 75, SlopeID = 59 })",""
"passed","Tue Oct 11 21:16:26 MSK 2022","Tue Oct 11 21:16:27 MSK 2022","612","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 151)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 151)",""
"passed","Tue Oct 11 19:14:10 MSK 2022","Tue Oct 11 19:14:11 MSK 2022","634","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 115, LiftID = 102, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 115, LiftID = 102, IsOpen = True })",""
"failed","Tue Oct 11 21:31:16 MSK 2022","Tue Oct 11 21:31:37 MSK 2022","21052","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAutoIncrementAsyncOk",""
"passed","Tue Oct 11 18:25:00 MSK 2022","Tue Oct 11 18:25:01 MSK 2022","695","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 136, LiftName = liftNamebffa4870-5308-4ff9-9e49-b626674f9b14, IsOpen = True, SeatsAmount = 202, LiftingTime = 34, QueueTime = 116, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 136, LiftName = liftNamebffa4870-5308-4ff9-9e49-b626674f9b14, IsOpen = True, SeatsAmount = 202, LiftingTime = 34, QueueTime = 116, ConnectedSlopes =  })",""
"failed","Tue Oct 11 09:13:31 MSK 2022","Tue Oct 11 09:13:32 MSK 2022","652","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 93, LiftName = liftName68ca8892-381d-4f12-81f6-9ecf7b82c8d6, IsOpen = True, SeatsAmount = 70, LiftingTime = 13, QueueTime = 130, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 93, LiftName = liftName68ca8892-381d-4f12-81f6-9ecf7b82c8d6, IsOpen = True, SeatsAmount = 70, LiftingTime = 13, QueueTime = 130, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:25:45 MSK 2022","Tue Oct 11 18:25:46 MSK 2022","658","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 141, LiftName = liftName6b16c22a-9803-4ded-a118-3884bb2f1ade, IsOpen = True, SeatsAmount = 16, LiftingTime = 169, QueueTime = 180, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 141, LiftName = liftName6b16c22a-9803-4ded-a118-3884bb2f1ade, IsOpen = True, SeatsAmount = 16, LiftingTime = 169, QueueTime = 180, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:30:01 MSK 2022","Tue Oct 11 21:30:02 MSK 2022","687","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 201, LiftID = 118, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 201, LiftID = 118, IsOpen = True })",""
"passed","Tue Oct 11 21:16:15 MSK 2022","Tue Oct 11 21:16:16 MSK 2022","633","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email4a2b5d94-36d8-4265-8a8a-b5f2ec56e3f9"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email4a2b5d94-36d8-4265-8a8a-b5f2ec56e3f9"")",""
"passed","Tue Oct 11 18:24:56 MSK 2022","Tue Oct 11 18:24:56 MSK 2022","656","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 250, LiftID = 229, SlopeID = 173 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 250, LiftID = 229, SlopeID = 173 })",""
"passed","Tue Oct 11 21:29:52 MSK 2022","Tue Oct 11 21:29:53 MSK 2022","711","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 91, CardID = 82, UserEmail = UserEmail72f7dab2-e6f6-4402-bd67-ef938a1196e1, Password = password8e2ee2f9-f50d-4524-a85c-53b24ceb488f, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 91, CardID = 82, UserEmail = UserEmail72f7dab2-e6f6-4402-bd67-ef938a1196e1, Password = password8e2ee2f9-f50d-4524-a85c-53b24ceb488f, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:24:42 MSK 2022","Tue Oct 11 18:24:42 MSK 2022","610","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email1c8bb620-51be-4c04-9705-f6001600e362"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email1c8bb620-51be-4c04-9705-f6001600e362"")",""
"passed","Tue Oct 11 18:59:14 MSK 2022","Tue Oct 11 18:59:15 MSK 2022","617","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 61, SlopeName = slopeNamee2eb410e-efd1-4956-a99e-987686b33259, IsOpen = True, DifficultyLevel = 104, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 61, SlopeName = slopeNamee2eb410e-efd1-4956-a99e-987686b33259, IsOpen = True, DifficultyLevel = 104, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:19:05 MSK 2022","Tue Oct 11 09:19:05 MSK 2022","665","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 46, LiftName = liftName1ff76a15-fe64-4a82-ac49-07fd10d3bb01, IsOpen = True, SeatsAmount = 48, LiftingTime = 166, QueueTime = 24, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 46, LiftName = liftName1ff76a15-fe64-4a82-ac49-07fd10d3bb01, IsOpen = True, SeatsAmount = 48, LiftingTime = 166, QueueTime = 24, ConnectedSlopes =  })",""
"passed","Tue Oct 11 19:13:59 MSK 2022","Tue Oct 11 19:14:00 MSK 2022","659","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 149)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 149)",""
"passed","Tue Oct 11 15:10:55 MSK 2022","Tue Oct 11 15:11:02 MSK 2022","7388","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 103, LiftID = 82, SlopeID = 71 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 103, LiftID = 82, SlopeID = 71 })",""
"passed","Tue Oct 11 09:15:43 MSK 2022","Tue Oct 11 09:15:44 MSK 2022","647","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 103, LiftName = liftName23324179-86db-4e58-a279-1468fd9cfbe0, IsOpen = True, SeatsAmount = 66, LiftingTime = 10, QueueTime = 12, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 103, LiftName = liftName23324179-86db-4e58-a279-1468fd9cfbe0, IsOpen = True, SeatsAmount = 66, LiftingTime = 10, QueueTime = 12, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:16:08 MSK 2022","Tue Oct 11 21:16:08 MSK 2022","592","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 150)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 150)",""
"passed","Tue Oct 11 18:59:17 MSK 2022","Tue Oct 11 18:59:18 MSK 2022","618","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 36, LiftID = 189, SlopeID = 204 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 36, LiftID = 189, SlopeID = 204 })",""
"passed","Tue Oct 11 18:59:23 MSK 2022","Tue Oct 11 18:59:24 MSK 2022","567","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 66)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 66)",""
"passed","Tue Oct 11 09:06:18 MSK 2022","Tue Oct 11 09:06:19 MSK 2022","642","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 109, SlopeName = slopeNameea8d056c-f488-4132-9ffe-54f46d54cffd, IsOpen = True, DifficultyLevel = 42, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 109, SlopeName = slopeNameea8d056c-f488-4132-9ffe-54f46d54cffd, IsOpen = True, DifficultyLevel = 42, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:20:12 MSK 2022","Tue Oct 11 21:20:12 MSK 2022","564","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail6f8d70ab-60f0-41fb-b6ab-11337e5f0f1c"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail6f8d70ab-60f0-41fb-b6ab-11337e5f0f1c"")",""
"passed","Tue Oct 11 09:19:49 MSK 2022","Tue Oct 11 09:19:50 MSK 2022","661","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 194, LiftName = liftName295f4713-cb4b-4328-a2a4-21e9dd17cdb6, IsOpen = True, SeatsAmount = 54, LiftingTime = 36, QueueTime = 185, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 194, LiftName = liftName295f4713-cb4b-4328-a2a4-21e9dd17cdb6, IsOpen = True, SeatsAmount = 54, LiftingTime = 36, QueueTime = 185, ConnectedSlopes =  })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName71a4531d-e29d-4b8a-ac4d-49b19295d37a"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName71a4531d-e29d-4b8a-ac4d-49b19295d37a"")",""
"passed","Tue Oct 11 21:20:03 MSK 2022","Tue Oct 11 21:20:03 MSK 2022","765","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 252, LiftID = 159, SlopeID = 123 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 252, LiftID = 159, SlopeID = 123 })",""
"passed","Tue Oct 11 19:14:18 MSK 2022","Tue Oct 11 19:14:18 MSK 2022","584","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail49f02ca1-1334-4e04-ab54-8cb8419481d9"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail49f02ca1-1334-4e04-ab54-8cb8419481d9"")",""
"passed","Tue Oct 11 21:16:14 MSK 2022","Tue Oct 11 21:16:14 MSK 2022","605","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 146)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 146)",""
"passed","Tue Oct 11 21:30:08 MSK 2022","Tue Oct 11 21:30:08 MSK 2022","586","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 100)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 100)",""
"passed","Tue Oct 11 21:30:07 MSK 2022","Tue Oct 11 21:30:08 MSK 2022","775","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 233, SlopeName = slopeName08d7eb52-2401-4631-9b05-1e39baaa1239, IsOpen = True, DifficultyLevel = 236, ConnectedLifts =  }, slope2: Slope { SlopeID = 94, SlopeName = slopeName7bf003b8-6fcd-4871-b2b7-830f7d9e5a74, IsOpen = False, DifficultyLevel = 198, ConnectedLifts =  }, lift1: Lift { LiftID = 98, LiftName = liftNamead72a8c3-5b0f-4cd8-b884-ad4fea504e80, IsOpen = True, SeatsAmount = 114, LiftingTime = 84, QueueTime = 96, ConnectedSlopes =  }, lift2: Lift { LiftID = 139, LiftName = liftName0304b221-356f-4dba-a875-66a685d7cdb6, IsOpen = False, SeatsAmount = 235, LiftingTime = 83, QueueTime = 152, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 233, SlopeName = slopeName08d7eb52-2401-4631-9b05-1e39baaa1239, IsOpen = True, DifficultyLevel = 236, ConnectedLifts =  }, slope2: Slope { SlopeID = 94, SlopeName = slopeName7bf003b8-6fcd-4871-b2b7-830f7d9e5a74, IsOpen = False, DifficultyLevel = 198, ConnectedLifts =  }, lift1: Lift { LiftID = 98, LiftName = liftNamead72a8c3-5b0f-4cd8-b884-ad4fea504e80, IsOpen = True, SeatsAmount = 114, LiftingTime = 84, QueueTime = 96, ConnectedSlopes =  }, lift2: Lift { LiftID = 139, LiftName = liftName0304b221-356f-4dba-a875-66a685d7cdb6, IsOpen = False, SeatsAmount = 235, LiftingTime = 83, QueueTime = 152, ConnectedSlopes =  })",""
"failed","Tue Oct 11 18:37:42 MSK 2022","Tue Oct 11 18:37:42 MSK 2022","99","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 222, SlopeName = slopeName5e01b285-3949-47fd-aab0-12acdc1480ee, IsOpen = True, DifficultyLevel = 77, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 222, SlopeName = slopeName5e01b285-3949-47fd-aab0-12acdc1480ee, IsOpen = True, DifficultyLevel = 77, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:30:05 MSK 2022","Tue Oct 11 21:30:06 MSK 2022","666","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftsAsyncEmpty",""
"passed","Tue Oct 11 09:06:20 MSK 2022","Tue Oct 11 09:06:20 MSK 2022","618","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName0c4fe387-ce09-4831-ae64-381a89cbc04c"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName0c4fe387-ce09-4831-ae64-381a89cbc04c"")",""
"passed","Tue Oct 11 09:13:04 MSK 2022","Tue Oct 11 09:13:05 MSK 2022","617","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName1af683b9-d25e-4f01-807d-e119dbae1a6e"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName1af683b9-d25e-4f01-807d-e119dbae1a6e"")",""
"passed","Tue Oct 11 21:20:01 MSK 2022","Tue Oct 11 21:20:02 MSK 2022","773","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 24, LiftID = 109, SlopeID = 206 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 24, LiftID = 109, SlopeID = 206 })",""
"passed","Tue Oct 11 09:13:30 MSK 2022","Tue Oct 11 09:13:31 MSK 2022","659","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 23, LiftName = liftNamea34b2c97-bf6e-4f15-a59f-d9876dabec87, IsOpen = True, SeatsAmount = 244, LiftingTime = 188, QueueTime = 93, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 23, LiftName = liftNamea34b2c97-bf6e-4f15-a59f-d9876dabec87, IsOpen = True, SeatsAmount = 244, LiftingTime = 188, QueueTime = 93, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:10:57 MSK 2022","Tue Oct 11 09:10:57 MSK 2022","615","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNameeecc0fdd-9a55-4883-b590-ec27b0782db9"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNameeecc0fdd-9a55-4883-b590-ec27b0782db9"")",""
"passed","Tue Oct 11 09:12:26 MSK 2022","Tue Oct 11 09:12:26 MSK 2022","638","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 89, SlopeName = slopeName7d431ba3-c1fb-4c16-94ce-e26b259cca78, IsOpen = True, DifficultyLevel = 231, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 89, SlopeName = slopeName7d431ba3-c1fb-4c16-94ce-e26b259cca78, IsOpen = True, DifficultyLevel = 231, ConnectedLifts =  })",""
"passed","Tue Oct 11 08:55:32 MSK 2022","Tue Oct 11 08:55:33 MSK 2022","648","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 217, SlopeName = slopeName637f670e-61f3-49bf-bf0c-aa4eadef8b19, IsOpen = True, DifficultyLevel = 53, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 217, SlopeName = slopeName637f670e-61f3-49bf-bf0c-aa4eadef8b19, IsOpen = True, DifficultyLevel = 53, ConnectedLifts =  })",""
"failed","Tue Oct 11 21:29:54 MSK 2022","Tue Oct 11 21:29:55 MSK 2022","699","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 220, CardID = 129, UserEmail = UserEmail12594289-1868-4a9e-ad2d-07fa49c35188, Password = passwordfc0bbde0-75dc-4437-9bda-89cfa17e3c38, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 220, CardID = 129, UserEmail = UserEmail12594289-1868-4a9e-ad2d-07fa49c35188, Password = passwordfc0bbde0-75dc-4437-9bda-89cfa17e3c38, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 15:11:02 MSK 2022","Tue Oct 11 15:11:03 MSK 2022","604","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 114)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 114)",""
"passed","Tue Oct 11 19:14:06 MSK 2022","Tue Oct 11 19:14:07 MSK 2022","677","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 11)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 11)",""
"passed","Tue Oct 11 15:10:51 MSK 2022","Tue Oct 11 15:10:52 MSK 2022","609","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 209)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 209)",""
"passed","Tue Oct 11 21:20:08 MSK 2022","Tue Oct 11 21:20:09 MSK 2022","663","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 83, LiftID = 117, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 83, LiftID = 117, IsOpen = True })",""
"passed","Tue Oct 11 21:30:03 MSK 2022","Tue Oct 11 21:30:04 MSK 2022","678","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 55, LiftName = liftName3e316aa9-40e4-41e8-b4ff-a8acbff46d18, IsOpen = True, SeatsAmount = 64, LiftingTime = 198, QueueTime = 112, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 55, LiftName = liftName3e316aa9-40e4-41e8-b4ff-a8acbff46d18, IsOpen = True, SeatsAmount = 64, LiftingTime = 198, QueueTime = 112, ConnectedSlopes =  })",""
"passed","Tue Oct 11 00:37:04 MSK 2022","Tue Oct 11 00:37:05 MSK 2022","668","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 248, SlopeName = slopeName2294a671-0594-43d6-bf03-b48bde33518e, IsOpen = True, DifficultyLevel = 119, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 248, SlopeName = slopeName2294a671-0594-43d6-bf03-b48bde33518e, IsOpen = True, DifficultyLevel = 119, ConnectedLifts =  })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 239)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 239)",""
"passed","Tue Oct 11 09:13:04 MSK 2022","Tue Oct 11 09:13:04 MSK 2022","612","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 46)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 46)",""
"passed","Tue Oct 11 09:19:07 MSK 2022","Tue Oct 11 09:19:08 MSK 2022","647","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 220, SlopeName = slopeName66dee912-cbda-4e66-8af4-10256f529b62, IsOpen = True, DifficultyLevel = 141, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 220, SlopeName = slopeName66dee912-cbda-4e66-8af4-10256f529b62, IsOpen = True, DifficultyLevel = 141, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:01:46 MSK 2022","Tue Oct 11 19:01:47 MSK 2022","569","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 200)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 200)",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","6","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 136, LiftName = liftName3164a876-f78e-4817-9f3f-2273b93a58a7, IsOpen = True, SeatsAmount = 176, LiftingTime = 23, QueueTime = 37, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 136, LiftName = liftName3164a876-f78e-4817-9f3f-2273b93a58a7, IsOpen = True, SeatsAmount = 176, LiftingTime = 23, QueueTime = 37, ConnectedSlopes =  })",""
"failed","Tue Oct 11 21:18:34 MSK 2022","Tue Oct 11 21:18:55 MSK 2022","21060","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 169, SlopeName = slopeNamea993ea1d-281b-4cb8-aef1-d75345607435, IsOpen = True, DifficultyLevel = 83, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 169, SlopeName = slopeNamea993ea1d-281b-4cb8-aef1-d75345607435, IsOpen = True, DifficultyLevel = 83, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:19:09 MSK 2022","Tue Oct 11 09:19:09 MSK 2022","663","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 177, SlopeName = slopeName16cd4809-ab4a-4229-b299-97bbd5e6f221, IsOpen = True, DifficultyLevel = 60, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 177, SlopeName = slopeName16cd4809-ab4a-4229-b299-97bbd5e6f221, IsOpen = True, DifficultyLevel = 60, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:16:06 MSK 2022","Tue Oct 11 21:16:06 MSK 2022","773","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 15, SlopeName = slopeNamec817cbad-8a83-42bd-b188-475c332b82dd, IsOpen = True, DifficultyLevel = 220, ConnectedLifts =  }, slope2: Slope { SlopeID = 207, SlopeName = slopeNamec2b95b82-0c61-49f2-95fb-646c948aa92b, IsOpen = False, DifficultyLevel = 28, ConnectedLifts =  }, lift1: Lift { LiftID = 149, LiftName = liftName7ff755ea-f3ae-4fab-9d68-aaebc91f0683, IsOpen = True, SeatsAmount = 108, LiftingTime = 62, QueueTime = 180, ConnectedSlopes =  }, lift2: Lift { LiftID = 191, LiftName = liftName983b4d57-2a45-44b4-a9a7-043060f0ed21, IsOpen = False, SeatsAmount = 202, LiftingTime = 27, QueueTime = 84, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 15, SlopeName = slopeNamec817cbad-8a83-42bd-b188-475c332b82dd, IsOpen = True, DifficultyLevel = 220, ConnectedLifts =  }, slope2: Slope { SlopeID = 207, SlopeName = slopeNamec2b95b82-0c61-49f2-95fb-646c948aa92b, IsOpen = False, DifficultyLevel = 28, ConnectedLifts =  }, lift1: Lift { LiftID = 149, LiftName = liftName7ff755ea-f3ae-4fab-9d68-aaebc91f0683, IsOpen = True, SeatsAmount = 108, LiftingTime = 62, QueueTime = 180, ConnectedSlopes =  }, lift2: Lift { LiftID = 191, LiftName = liftName983b4d57-2a45-44b4-a9a7-043060f0ed21, IsOpen = False, SeatsAmount = 202, LiftingTime = 27, QueueTime = 84, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:25:59 MSK 2022","Tue Oct 11 18:25:59 MSK 2022","657","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 164, CardID = 182, UserEmail = UserEmaildfef1acc-6ff8-4709-8213-0ef4c6ba260b, Password = passwordb2156642-adf0-4592-868b-73758ec908df, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 164, CardID = 182, UserEmail = UserEmaildfef1acc-6ff8-4709-8213-0ef4c6ba260b, Password = passwordb2156642-adf0-4592-868b-73758ec908df, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 09:13:36 MSK 2022","Tue Oct 11 09:13:36 MSK 2022","661","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 63, SlopeName = slopeName2da91eea-6744-44b6-b8ec-8a0ff5443dda, IsOpen = True, DifficultyLevel = 41, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 63, SlopeName = slopeName2da91eea-6744-44b6-b8ec-8a0ff5443dda, IsOpen = True, DifficultyLevel = 41, ConnectedLifts =  })",""
"passed","Tue Oct 11 00:37:54 MSK 2022","Tue Oct 11 00:37:55 MSK 2022","661","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 229, SlopeName = slopeName90c7435f-848e-41cc-b860-0ee3891db2c0, IsOpen = True, DifficultyLevel = 231, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 229, SlopeName = slopeName90c7435f-848e-41cc-b860-0ee3891db2c0, IsOpen = True, DifficultyLevel = 231, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:14:03 MSK 2022","Tue Oct 11 19:14:03 MSK 2022","594","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName3f2ac4ec-d1f9-4b57-b502-1d86f13d95dd"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName3f2ac4ec-d1f9-4b57-b502-1d86f13d95dd"")",""
"passed","Tue Oct 11 09:19:50 MSK 2022","Tue Oct 11 09:19:51 MSK 2022","613","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 96)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 96)",""
"passed","Tue Oct 11 19:14:06 MSK 2022","Tue Oct 11 19:14:06 MSK 2022","677","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 240, LiftID = 219, SlopeID = 46 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 240, LiftID = 219, SlopeID = 46 })",""
"passed","Tue Oct 11 19:01:49 MSK 2022","Tue Oct 11 19:01:49 MSK 2022","613","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 136, LiftName = liftName498f1259-c81a-4a85-bd93-39fac2f68d49, IsOpen = True, SeatsAmount = 254, LiftingTime = 76, QueueTime = 111, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 136, LiftName = liftName498f1259-c81a-4a85-bd93-39fac2f68d49, IsOpen = True, SeatsAmount = 254, LiftingTime = 76, QueueTime = 111, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:13:33 MSK 2022","Tue Oct 11 09:13:33 MSK 2022","615","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 101)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 101)",""
"failed","Tue Oct 11 18:59:18 MSK 2022","Tue Oct 11 18:59:18 MSK 2022","32","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 180, LiftID = 31, SlopeID = 137 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 180, LiftID = 31, SlopeID = 137 })",""
"passed","Tue Oct 11 15:10:27 MSK 2022","Tue Oct 11 15:10:44 MSK 2022","16293","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 61, CardID = 179, UserEmail = UserEmailf5834120-b169-4c5a-8a14-ff226a753c09, Password = password9d23bd8b-4fa9-4101-b16f-043177f9ea24, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 61, CardID = 179, UserEmail = UserEmailf5834120-b169-4c5a-8a14-ff226a753c09, Password = password9d23bd8b-4fa9-4101-b16f-043177f9ea24, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 21:29:58 MSK 2022","Tue Oct 11 21:29:58 MSK 2022","821","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 133)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 133)",""
"passed","Tue Oct 11 09:19:04 MSK 2022","Tue Oct 11 09:19:05 MSK 2022","613","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 157)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 157)",""
"passed","Tue Oct 11 18:24:52 MSK 2022","Tue Oct 11 18:24:53 MSK 2022","650","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 34, LiftID = 253, SlopeID = 11 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 34, LiftID = 253, SlopeID = 11 })",""
"passed","Tue Oct 11 09:13:34 MSK 2022","Tue Oct 11 09:13:34 MSK 2022","661","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 158, SlopeName = slopeName5e5c6e91-5df9-440b-bf2d-4f747e202185, IsOpen = True, DifficultyLevel = 112, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 158, SlopeName = slopeName5e5c6e91-5df9-440b-bf2d-4f747e202185, IsOpen = True, DifficultyLevel = 112, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:01:44 MSK 2022","Tue Oct 11 19:01:45 MSK 2022","619","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 154, LiftID = 32, SlopeID = 47 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 154, LiftID = 32, SlopeID = 47 })",""
"passed","Tue Oct 11 18:26:04 MSK 2022","Tue Oct 11 18:26:05 MSK 2022","636","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 45, SlopeName = slopeNameeaf3ae1f-0f87-4800-874e-26aab12413e8, IsOpen = True, DifficultyLevel = 89, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 45, SlopeName = slopeNameeaf3ae1f-0f87-4800-874e-26aab12413e8, IsOpen = True, DifficultyLevel = 89, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:16:25 MSK 2022","Tue Oct 11 21:16:26 MSK 2022","668","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName59684be3-2fc4-4fc6-9f4e-008b5a8b5c19"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName59684be3-2fc4-4fc6-9f4e-008b5a8b5c19"")",""
"failed","Tue Oct 11 00:37:02 MSK 2022","Tue Oct 11 00:37:02 MSK 2022","50","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 111, SlopeName = slopeName129b6e18-fe50-4311-8614-25a9340b6810, IsOpen = True, DifficultyLevel = 18, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 111, SlopeName = slopeName129b6e18-fe50-4311-8614-25a9340b6810, IsOpen = True, DifficultyLevel = 18, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:30:09 MSK 2022","Tue Oct 11 21:30:10 MSK 2022","695","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 214, LiftID = 3, SlopeID = 99 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 214, LiftID = 3, SlopeID = 99 })",""
"passed","Tue Oct 11 09:12:43 MSK 2022","Tue Oct 11 09:12:44 MSK 2022","661","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 125, SlopeName = slopeNamedd8328c1-ac87-44ce-891d-3368e8aec59e, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 125, SlopeName = slopeNamedd8328c1-ac87-44ce-891d-3368e8aec59e, IsOpen = True, DifficultyLevel = 135, ConnectedLifts =  })",""
"failed","Tue Oct 11 21:19:16 MSK 2022","Tue Oct 11 21:19:37 MSK 2022","21031","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopesAsyncEmpty",""
"passed","Tue Oct 11 18:59:15 MSK 2022","Tue Oct 11 18:59:16 MSK 2022","616","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 175, SlopeName = slopeName7877f194-31f5-44b6-b3cc-a0067a5926e6, IsOpen = True, DifficultyLevel = 149, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 175, SlopeName = slopeName7877f194-31f5-44b6-b3cc-a0067a5926e6, IsOpen = True, DifficultyLevel = 149, ConnectedLifts =  })",""
"passed","Tue Oct 11 15:10:21 MSK 2022","Tue Oct 11 15:10:23 MSK 2022","2251","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 26)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 26)",""
"passed","Tue Oct 11 21:16:20 MSK 2022","Tue Oct 11 21:16:21 MSK 2022","686","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 90, LiftID = 142, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 90, LiftID = 142, IsOpen = True })",""
"passed","Tue Oct 11 09:15:44 MSK 2022","Tue Oct 11 09:15:44 MSK 2022","609","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName12007657-c716-4661-95bb-57efe9560962"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName12007657-c716-4661-95bb-57efe9560962"")",""
"passed","Tue Oct 11 00:34:11 MSK 2022","Tue Oct 11 00:34:13 MSK 2022","2302","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 254, SlopeName = slopeName3322311c-3568-47ee-aa18-a263cf4ca66c, IsOpen = True, DifficultyLevel = 193, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 254, SlopeName = slopeName3322311c-3568-47ee-aa18-a263cf4ca66c, IsOpen = True, DifficultyLevel = 193, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:16:17 MSK 2022","Tue Oct 11 21:16:18 MSK 2022","658","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 251)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 251)",""
"failed","Tue Oct 11 21:30:34 MSK 2022","Tue Oct 11 21:30:55 MSK 2022","21033","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 120, SlopeName = slopeName3257139f-184b-4fd8-aa62-7f3c52894b0b, IsOpen = True, DifficultyLevel = 114, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 120, SlopeName = slopeName3257139f-184b-4fd8-aa62-7f3c52894b0b, IsOpen = True, DifficultyLevel = 114, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:13:03 MSK 2022","Tue Oct 11 09:13:04 MSK 2022","616","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 107)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 107)",""
"passed","Tue Oct 11 18:59:26 MSK 2022","Tue Oct 11 18:59:27 MSK 2022","572","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 177)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 177)",""
"passed","Tue Oct 11 19:01:44 MSK 2022","Tue Oct 11 19:01:44 MSK 2022","612","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 212, LiftID = 51, SlopeID = 138 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 212, LiftID = 51, SlopeID = 138 })",""
"passed","Tue Oct 11 09:12:27 MSK 2022","Tue Oct 11 09:12:28 MSK 2022","663","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 28, SlopeName = slopeNameadf521f1-2aae-4919-be99-937e0ab2c082, IsOpen = True, DifficultyLevel = 22, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 28, SlopeName = slopeNameadf521f1-2aae-4919-be99-937e0ab2c082, IsOpen = True, DifficultyLevel = 22, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:11:56 MSK 2022","Tue Oct 11 09:11:57 MSK 2022","662","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 9, SlopeName = slopeName5a1e3c2f-a17b-44e8-a4d3-22b0516dbd68, IsOpen = True, DifficultyLevel = 110, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 9, SlopeName = slopeName5a1e3c2f-a17b-44e8-a4d3-22b0516dbd68, IsOpen = True, DifficultyLevel = 110, ConnectedLifts =  })",""
"failed","Tue Oct 11 21:30:04 MSK 2022","Tue Oct 11 21:30:04 MSK 2022","553","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamea202418b-052a-4c44-ba2c-604fea13802a"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamea202418b-052a-4c44-ba2c-604fea13802a"")",""
"passed","Tue Oct 11 18:24:41 MSK 2022","Tue Oct 11 18:24:41 MSK 2022","640","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 118, CardID = 138, UserEmail = UserEmail967d733a-8c9c-47ed-84c5-b4b4080f9165, Password = password44f70424-154f-4b4c-9ec8-38e140d8259f, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 118, CardID = 138, UserEmail = UserEmail967d733a-8c9c-47ed-84c5-b4b4080f9165, Password = password44f70424-154f-4b4c-9ec8-38e140d8259f, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:59:17 MSK 2022","Tue Oct 11 18:59:17 MSK 2022","617","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 24, LiftID = 94, SlopeID = 171 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 24, LiftID = 94, SlopeID = 171 })",""
"failed","Tue Oct 11 21:17:52 MSK 2022","Tue Oct 11 21:18:13 MSK 2022","21031","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName7589382f-133d-46cd-9c26-0769377d9481"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName7589382f-133d-46cd-9c26-0769377d9481"")",""
"passed","Tue Oct 11 18:59:29 MSK 2022","Tue Oct 11 18:59:29 MSK 2022","561","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email961afcf8-a96c-4b27-b738-ae5a5aa8187d"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email961afcf8-a96c-4b27-b738-ae5a5aa8187d"")",""
"failed","Tue Oct 11 08:54:37 MSK 2022","Tue Oct 11 08:54:41 MSK 2022","4130","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 235, SlopeName = slopeName89b07cd6-dfa6-4562-b6a7-82d7ba2af648, IsOpen = True, DifficultyLevel = 71, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 235, SlopeName = slopeName89b07cd6-dfa6-4562-b6a7-82d7ba2af648, IsOpen = True, DifficultyLevel = 71, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:12:43 MSK 2022","Tue Oct 11 09:12:43 MSK 2022","619","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamec63e1899-7037-439b-b3ff-8a0860e7d340"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamec63e1899-7037-439b-b3ff-8a0860e7d340"")",""
"passed","Tue Oct 11 18:59:21 MSK 2022","Tue Oct 11 18:59:22 MSK 2022","620","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 179, LiftName = liftName300a544c-c000-4dbd-b342-e18a5fb84bf0, IsOpen = True, SeatsAmount = 189, LiftingTime = 5, QueueTime = 240, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 179, LiftName = liftName300a544c-c000-4dbd-b342-e18a5fb84bf0, IsOpen = True, SeatsAmount = 189, LiftingTime = 5, QueueTime = 240, ConnectedSlopes =  })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 175, LiftName = liftName7c7bee9e-9cfa-4efb-af53-85009efae04d, IsOpen = True, SeatsAmount = 164, LiftingTime = 71, QueueTime = 106, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 175, LiftName = liftName7c7bee9e-9cfa-4efb-af53-85009efae04d, IsOpen = True, SeatsAmount = 164, LiftingTime = 71, QueueTime = 106, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:24:42 MSK 2022","Tue Oct 11 18:24:43 MSK 2022","653","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 110, CardID = 142, UserEmail = UserEmail393c48e6-0bd6-49f0-986a-29276a38e297, Password = password13dd95f8-b22b-4ff3-b0bf-737557ac0ee5, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 110, CardID = 142, UserEmail = UserEmail393c48e6-0bd6-49f0-986a-29276a38e297, Password = password13dd95f8-b22b-4ff3-b0bf-737557ac0ee5, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 21:20:11 MSK 2022","Tue Oct 11 21:20:12 MSK 2022","593","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 160, CardID = 221, UserEmail = UserEmail79fe4b93-5096-4b17-b8aa-2d7aabe36386, Password = password0ef4cae7-8abe-4a71-bf7f-4575e086b637, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 160, CardID = 221, UserEmail = UserEmail79fe4b93-5096-4b17-b8aa-2d7aabe36386, Password = password0ef4cae7-8abe-4a71-bf7f-4575e086b637, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:59:18 MSK 2022","Tue Oct 11 18:59:19 MSK 2022","595","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 193, LiftID = 103, SlopeID = 137 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 193, LiftID = 103, SlopeID = 137 })",""
"passed","Tue Oct 11 18:24:53 MSK 2022","Tue Oct 11 18:24:54 MSK 2022","698","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 50, SlopeName = slopeNamea26873a7-97ff-43e4-ae88-f65307eac86e, IsOpen = True, DifficultyLevel = 27, ConnectedLifts =  }, slope2: Slope { SlopeID = 230, SlopeName = slopeNamee4a08240-9d70-4ad0-a0e2-2cc316581dc5, IsOpen = False, DifficultyLevel = 238, ConnectedLifts =  }, lift1: Lift { LiftID = 112, LiftName = liftName9e3357f8-6e67-4f12-9714-3cfb17e06243, IsOpen = True, SeatsAmount = 75, LiftingTime = 19, QueueTime = 127, ConnectedSlopes =  }, lift2: Lift { LiftID = 111, LiftName = liftName9f5bf639-4f93-459f-8791-67c6848363ec, IsOpen = False, SeatsAmount = 86, LiftingTime = 251, QueueTime = 235, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 50, SlopeName = slopeNamea26873a7-97ff-43e4-ae88-f65307eac86e, IsOpen = True, DifficultyLevel = 27, ConnectedLifts =  }, slope2: Slope { SlopeID = 230, SlopeName = slopeNamee4a08240-9d70-4ad0-a0e2-2cc316581dc5, IsOpen = False, DifficultyLevel = 238, ConnectedLifts =  }, lift1: Lift { LiftID = 112, LiftName = liftName9e3357f8-6e67-4f12-9714-3cfb17e06243, IsOpen = True, SeatsAmount = 75, LiftingTime = 19, QueueTime = 127, ConnectedSlopes =  }, lift2: Lift { LiftID = 111, LiftName = liftName9f5bf639-4f93-459f-8791-67c6848363ec, IsOpen = False, SeatsAmount = 86, LiftingTime = 251, QueueTime = 235, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:11:54 MSK 2022","Tue Oct 11 09:11:54 MSK 2022","657","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 221, SlopeName = slopeName025deeaf-e55c-4ecc-b1ad-a142a71e63ad, IsOpen = True, DifficultyLevel = 73, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 221, SlopeName = slopeName025deeaf-e55c-4ecc-b1ad-a142a71e63ad, IsOpen = True, DifficultyLevel = 73, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:06:52 MSK 2022","Tue Oct 11 09:06:52 MSK 2022","603","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName729d0e69-2622-45b9-a561-2cbf66273e35"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName729d0e69-2622-45b9-a561-2cbf66273e35"")",""
"passed","Tue Oct 11 19:01:45 MSK 2022","Tue Oct 11 19:01:46 MSK 2022","601","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 65, LiftID = 72, SlopeID = 22 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 65, LiftID = 72, SlopeID = 22 })",""
"passed","Tue Oct 11 08:55:34 MSK 2022","Tue Oct 11 08:55:35 MSK 2022","616","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamea3fd2dfb-5bca-4296-b408-cbbc092854ce"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamea3fd2dfb-5bca-4296-b408-cbbc092854ce"")",""
"passed","Tue Oct 11 15:10:53 MSK 2022","Tue Oct 11 15:10:53 MSK 2022","654","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 149, LiftName = liftNamec67ea0d1-a48e-449c-9781-32c3676d38a8, IsOpen = True, SeatsAmount = 72, LiftingTime = 243, QueueTime = 129, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 149, LiftName = liftNamec67ea0d1-a48e-449c-9781-32c3676d38a8, IsOpen = True, SeatsAmount = 72, LiftingTime = 243, QueueTime = 129, ConnectedSlopes =  })",""
"passed","Tue Oct 11 19:14:11 MSK 2022","Tue Oct 11 19:14:12 MSK 2022","649","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 164)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 164)",""
"passed","Tue Oct 11 00:37:52 MSK 2022","Tue Oct 11 00:37:53 MSK 2022","601","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName947c8bcc-8adf-451b-ac28-1716ad91081f"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName947c8bcc-8adf-451b-ac28-1716ad91081f"")",""
"passed","Tue Oct 11 09:19:02 MSK 2022","Tue Oct 11 09:19:03 MSK 2022","730","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 212, LiftName = liftName14d3072b-f527-4d1e-ab3b-364eeabd25f1, IsOpen = True, SeatsAmount = 24, LiftingTime = 87, QueueTime = 42, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 212, LiftName = liftName14d3072b-f527-4d1e-ab3b-364eeabd25f1, IsOpen = True, SeatsAmount = 24, LiftingTime = 87, QueueTime = 42, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:16:19 MSK 2022","Tue Oct 11 21:16:20 MSK 2022","862","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 93)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 93)",""
"passed","Tue Oct 11 09:12:25 MSK 2022","Tue Oct 11 09:12:26 MSK 2022","677","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 64)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 64)",""
"passed","Tue Oct 11 15:10:24 MSK 2022","Tue Oct 11 15:10:25 MSK 2022","657","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 224, SlopeName = slopeNamec503bc20-f972-4513-84c7-efe237e70e9f, IsOpen = True, DifficultyLevel = 247, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 224, SlopeName = slopeNamec503bc20-f972-4513-84c7-efe237e70e9f, IsOpen = True, DifficultyLevel = 247, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:25:59 MSK 2022","Tue Oct 11 18:26:00 MSK 2022","614","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail23679932-4a60-4384-9fc5-8115a8ea75f0"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail23679932-4a60-4384-9fc5-8115a8ea75f0"")",""
"failed","Tue Oct 11 00:37:51 MSK 2022","Tue Oct 11 00:37:52 MSK 2022","577","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 161)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 161)",""
"passed","Tue Oct 11 18:59:27 MSK 2022","Tue Oct 11 18:59:28 MSK 2022","619","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 197, CardID = 48, UserEmail = UserEmaild8e9a4e6-a6f8-40f0-992d-65efc163a9b1, Password = passworddca98d1a-1444-4c4b-9854-1c2ac03242e9, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 197, CardID = 48, UserEmail = UserEmaild8e9a4e6-a6f8-40f0-992d-65efc163a9b1, Password = passworddca98d1a-1444-4c4b-9854-1c2ac03242e9, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 15:10:53 MSK 2022","Tue Oct 11 15:10:54 MSK 2022","636","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 235, LiftName = liftName44b577b2-3879-49e8-88ca-1f8881104da6, IsOpen = True, SeatsAmount = 98, LiftingTime = 228, QueueTime = 95, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 235, LiftName = liftName44b577b2-3879-49e8-88ca-1f8881104da6, IsOpen = True, SeatsAmount = 98, LiftingTime = 228, QueueTime = 95, ConnectedSlopes =  })",""
"passed","Tue Oct 11 19:13:58 MSK 2022","Tue Oct 11 19:13:59 MSK 2022","658","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamee8e38732-7771-40b0-aac6-a7f382a4dae1"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamee8e38732-7771-40b0-aac6-a7f382a4dae1"")",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 194)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 194)",""
"passed","Tue Oct 11 19:14:04 MSK 2022","Tue Oct 11 19:14:05 MSK 2022","790","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 96, SlopeName = slopeName37e98a2c-7805-488c-8c8f-8001a27d205c, IsOpen = True, DifficultyLevel = 99, ConnectedLifts =  }, slope2: Slope { SlopeID = 124, SlopeName = slopeName3585ce76-98d4-498a-a89a-951a7f3b82cc, IsOpen = False, DifficultyLevel = 195, ConnectedLifts =  }, lift1: Lift { LiftID = 235, LiftName = liftNamed71e6a76-d0d9-4b9d-ab55-f028100cb50c, IsOpen = True, SeatsAmount = 64, LiftingTime = 218, QueueTime = 174, ConnectedSlopes =  }, lift2: Lift { LiftID = 114, LiftName = liftName11aa81e0-c967-40e8-b369-65e484814c80, IsOpen = False, SeatsAmount = 120, LiftingTime = 91, QueueTime = 183, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 96, SlopeName = slopeName37e98a2c-7805-488c-8c8f-8001a27d205c, IsOpen = True, DifficultyLevel = 99, ConnectedLifts =  }, slope2: Slope { SlopeID = 124, SlopeName = slopeName3585ce76-98d4-498a-a89a-951a7f3b82cc, IsOpen = False, DifficultyLevel = 195, ConnectedLifts =  }, lift1: Lift { LiftID = 235, LiftName = liftNamed71e6a76-d0d9-4b9d-ab55-f028100cb50c, IsOpen = True, SeatsAmount = 64, LiftingTime = 218, QueueTime = 174, ConnectedSlopes =  }, lift2: Lift { LiftID = 114, LiftName = liftName11aa81e0-c967-40e8-b369-65e484814c80, IsOpen = False, SeatsAmount = 120, LiftingTime = 91, QueueTime = 183, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:16:27 MSK 2022","Tue Oct 11 21:16:27 MSK 2022","657","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 85, LiftName = liftName261ffd88-9c4e-4400-9915-5e7139b4adc1, IsOpen = True, SeatsAmount = 36, LiftingTime = 102, QueueTime = 199, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 85, LiftName = liftName261ffd88-9c4e-4400-9915-5e7139b4adc1, IsOpen = True, SeatsAmount = 36, LiftingTime = 102, QueueTime = 199, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:24:56 MSK 2022","Tue Oct 11 18:24:59 MSK 2022","2198","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 122, LiftName = liftName1d66f619-ad22-4027-a422-6ee3403d793f, IsOpen = True, SeatsAmount = 51, LiftingTime = 127, QueueTime = 233, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 122, LiftName = liftName1d66f619-ad22-4027-a422-6ee3403d793f, IsOpen = True, SeatsAmount = 51, LiftingTime = 127, QueueTime = 233, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:24:40 MSK 2022","Tue Oct 11 18:24:41 MSK 2022","655","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 102, CardID = 239, UserEmail = UserEmail087102bf-42fe-44eb-b474-cbefac767f7a, Password = password2ed9ce3a-afa9-4632-83d4-bde2fd92abee, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 102, CardID = 239, UserEmail = UserEmail087102bf-42fe-44eb-b474-cbefac767f7a, Password = password2ed9ce3a-afa9-4632-83d4-bde2fd92abee, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 19:14:12 MSK 2022","Tue Oct 11 19:14:12 MSK 2022","640","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 134, LiftID = 66, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 134, LiftID = 66, IsOpen = True })",""
"failed","Tue Oct 11 00:34:13 MSK 2022","Tue Oct 11 00:34:14 MSK 2022","632","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 31)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 31)",""
"failed","Tue Oct 11 19:01:46 MSK 2022","Tue Oct 11 19:01:46 MSK 2022","31","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 27, LiftID = 144, SlopeID = 222 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 27, LiftID = 144, SlopeID = 222 })",""
"passed","Tue Oct 11 09:12:40 MSK 2022","Tue Oct 11 09:12:41 MSK 2022","677","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 249)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 249)",""
"passed","Tue Oct 11 08:55:32 MSK 2022","Tue Oct 11 08:55:32 MSK 2022","650","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 165, SlopeName = slopeNamee8c713fe-d78b-4466-a336-4ed3dba07586, IsOpen = True, DifficultyLevel = 13, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 165, SlopeName = slopeNamee8c713fe-d78b-4466-a336-4ed3dba07586, IsOpen = True, DifficultyLevel = 13, ConnectedLifts =  })",""
"passed","Tue Oct 11 15:11:03 MSK 2022","Tue Oct 11 15:11:04 MSK 2022","706","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 17, SlopeName = slopeNameebae4471-76e0-4d27-b65e-f221f653af26, IsOpen = True, DifficultyLevel = 138, ConnectedLifts =  }, slope2: Slope { SlopeID = 194, SlopeName = slopeName113686a6-6365-49cb-9b10-9989833d7e53, IsOpen = False, DifficultyLevel = 74, ConnectedLifts =  }, lift1: Lift { LiftID = 209, LiftName = liftName149b37b3-8f57-4119-b810-09ec5945af38, IsOpen = True, SeatsAmount = 202, LiftingTime = 115, QueueTime = 242, ConnectedSlopes =  }, lift2: Lift { LiftID = 114, LiftName = liftNamef24a65a1-6007-42f1-8c4a-ae5f3ecd24fe, IsOpen = False, SeatsAmount = 153, LiftingTime = 243, QueueTime = 39, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 17, SlopeName = slopeNameebae4471-76e0-4d27-b65e-f221f653af26, IsOpen = True, DifficultyLevel = 138, ConnectedLifts =  }, slope2: Slope { SlopeID = 194, SlopeName = slopeName113686a6-6365-49cb-9b10-9989833d7e53, IsOpen = False, DifficultyLevel = 74, ConnectedLifts =  }, lift1: Lift { LiftID = 209, LiftName = liftName149b37b3-8f57-4119-b810-09ec5945af38, IsOpen = True, SeatsAmount = 202, LiftingTime = 115, QueueTime = 242, ConnectedSlopes =  }, lift2: Lift { LiftID = 114, LiftName = liftNamef24a65a1-6007-42f1-8c4a-ae5f3ecd24fe, IsOpen = False, SeatsAmount = 153, LiftingTime = 243, QueueTime = 39, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:24:18 MSK 2022","Tue Oct 11 18:24:20 MSK 2022","2296","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 164, SlopeName = slopeName6d6e6612-0680-48fe-bcbb-06dad2af93ff, IsOpen = True, DifficultyLevel = 1, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 164, SlopeName = slopeName6d6e6612-0680-48fe-bcbb-06dad2af93ff, IsOpen = True, DifficultyLevel = 1, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:20:06 MSK 2022","Tue Oct 11 21:20:06 MSK 2022","601","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 143)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 143)",""
"failed","Tue Oct 11 21:16:28 MSK 2022","Tue Oct 11 21:16:28 MSK 2022","33","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 129, LiftName = liftNameac476764-b3f4-4b4e-a344-98035327ad4e, IsOpen = True, SeatsAmount = 62, LiftingTime = 124, QueueTime = 237, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 129, LiftName = liftNameac476764-b3f4-4b4e-a344-98035327ad4e, IsOpen = True, SeatsAmount = 62, LiftingTime = 124, QueueTime = 237, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:59:28 MSK 2022","Tue Oct 11 18:59:29 MSK 2022","600","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 10, CardID = 159, UserEmail = UserEmailbda7868a-acf4-4699-bcb4-df784e46d87b, Password = password39a9cdb0-bbd5-4977-a960-bc550dfa6be4, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 10, CardID = 159, UserEmail = UserEmailbda7868a-acf4-4699-bcb4-df784e46d87b, Password = password39a9cdb0-bbd5-4977-a960-bc550dfa6be4, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 19:01:41 MSK 2022","Tue Oct 11 19:01:42 MSK 2022","566","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaila8602034-af99-45ad-b530-65f6c113db43"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaila8602034-af99-45ad-b530-65f6c113db43"")",""
"passed","Tue Oct 11 21:16:24 MSK 2022","Tue Oct 11 21:16:25 MSK 2022","658","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 7, LiftName = liftName9a3d546e-fcf3-4408-b790-a54df54993b7, IsOpen = True, SeatsAmount = 24, LiftingTime = 203, QueueTime = 47, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 7, LiftName = liftName9a3d546e-fcf3-4408-b790-a54df54993b7, IsOpen = True, SeatsAmount = 24, LiftingTime = 203, QueueTime = 47, ConnectedSlopes =  })",""
"passed","Tue Oct 11 15:10:47 MSK 2022","Tue Oct 11 15:10:47 MSK 2022","618","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaild763cc1f-1d58-418b-b6d0-7775b19e88f7"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaild763cc1f-1d58-418b-b6d0-7775b19e88f7"")",""
"passed","Tue Oct 11 21:20:13 MSK 2022","Tue Oct 11 21:20:14 MSK 2022","690","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 220, CardID = 94, UserEmail = UserEmail683787bd-9ba3-4b5e-a8f2-3fe6aded4a09, Password = password9887daea-e79c-4aa4-92d6-678f804bf3d7, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 220, CardID = 94, UserEmail = UserEmail683787bd-9ba3-4b5e-a8f2-3fe6aded4a09, Password = password9887daea-e79c-4aa4-92d6-678f804bf3d7, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 21:30:12 MSK 2022","Tue Oct 11 21:30:12 MSK 2022","579","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopesAsyncEmpty",""
"passed","Tue Oct 11 21:29:53 MSK 2022","Tue Oct 11 21:29:54 MSK 2022","631","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 14)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 14)",""
"failed","Tue Oct 11 09:19:53 MSK 2022","Tue Oct 11 09:19:53 MSK 2022","5","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 231)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 231)",""
"failed","Tue Oct 11 18:37:42 MSK 2022","Tue Oct 11 18:37:42 MSK 2022","7","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 232, SlopeName = slopeName2001fcab-e0fe-4c9c-85b5-771461858520, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 232, SlopeName = slopeName2001fcab-e0fe-4c9c-85b5-771461858520, IsOpen = True, DifficultyLevel = 226, ConnectedLifts =  })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","9","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 91, SlopeName = slopeName547847a3-8782-4f93-872a-df27aaa6f9e2, IsOpen = True, DifficultyLevel = 190, ConnectedLifts =  }, slope2: Slope { SlopeID = 203, SlopeName = slopeName38f5d818-fa0d-4cee-b72e-34feb9f5ed43, IsOpen = False, DifficultyLevel = 149, ConnectedLifts =  }, lift1: Lift { LiftID = 205, LiftName = liftName2bcc858e-fb28-4ad5-a20f-60af534efbc9, IsOpen = True, SeatsAmount = 219, LiftingTime = 44, QueueTime = 254, ConnectedSlopes =  }, lift2: Lift { LiftID = 245, LiftName = liftNameda6ae3a0-499e-48fa-b38b-02904aa08e05, IsOpen = False, SeatsAmount = 32, LiftingTime = 171, QueueTime = 213, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 91, SlopeName = slopeName547847a3-8782-4f93-872a-df27aaa6f9e2, IsOpen = True, DifficultyLevel = 190, ConnectedLifts =  }, slope2: Slope { SlopeID = 203, SlopeName = slopeName38f5d818-fa0d-4cee-b72e-34feb9f5ed43, IsOpen = False, DifficultyLevel = 149, ConnectedLifts =  }, lift1: Lift { LiftID = 205, LiftName = liftName2bcc858e-fb28-4ad5-a20f-60af534efbc9, IsOpen = True, SeatsAmount = 219, LiftingTime = 44, QueueTime = 254, ConnectedSlopes =  }, lift2: Lift { LiftID = 245, LiftName = liftNameda6ae3a0-499e-48fa-b38b-02904aa08e05, IsOpen = False, SeatsAmount = 32, LiftingTime = 171, QueueTime = 213, ConnectedSlopes =  })",""
"passed","Tue Oct 11 19:13:55 MSK 2022","Tue Oct 11 19:13:56 MSK 2022","788","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 189, SlopeName = slopeName0b496caf-36f4-4ae8-b1ea-c7447b429f19, IsOpen = True, DifficultyLevel = 148, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 189, SlopeName = slopeName0b496caf-36f4-4ae8-b1ea-c7447b429f19, IsOpen = True, DifficultyLevel = 148, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:25:48 MSK 2022","Tue Oct 11 18:25:49 MSK 2022","607","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 81)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 81)",""
"passed","Tue Oct 11 15:10:27 MSK 2022","Tue Oct 11 15:10:27 MSK 2022","640","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 55, SlopeName = slopeNamed5952328-c50a-4ad8-ba48-01c33f767b5c, IsOpen = True, DifficultyLevel = 57, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 55, SlopeName = slopeNamed5952328-c50a-4ad8-ba48-01c33f767b5c, IsOpen = True, DifficultyLevel = 57, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:14:16 MSK 2022","Tue Oct 11 19:14:16 MSK 2022","650","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 136, CardID = 160, UserEmail = UserEmaildbfd6fdd-c0b3-4a67-8ec9-fdfd868739c7, Password = password7a2ee1a2-2364-4326-acf7-5951362ea034, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 136, CardID = 160, UserEmail = UserEmaildbfd6fdd-c0b3-4a67-8ec9-fdfd868739c7, Password = password7a2ee1a2-2364-4326-acf7-5951362ea034, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 15:10:23 MSK 2022","Tue Oct 11 15:10:24 MSK 2022","606","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamee067b3e4-6dcd-4c5a-ba81-2bf01e243b0e"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamee067b3e4-6dcd-4c5a-ba81-2bf01e243b0e"")",""
"passed","Tue Oct 11 21:16:08 MSK 2022","Tue Oct 11 21:16:09 MSK 2022","690","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 161, LiftID = 43, SlopeID = 242 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 161, LiftID = 43, SlopeID = 242 })",""
"passed","Tue Oct 11 21:29:51 MSK 2022","Tue Oct 11 21:29:52 MSK 2022","716","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emailef2293fe-5131-4b67-a3a8-8203997a946f"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emailef2293fe-5131-4b67-a3a8-8203997a946f"")",""
"passed","Tue Oct 11 09:15:45 MSK 2022","Tue Oct 11 09:15:46 MSK 2022","652","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 45, LiftName = liftName58e5808d-9b1f-4763-b319-6ecb1e1cdea5, IsOpen = True, SeatsAmount = 90, LiftingTime = 6, QueueTime = 244, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 45, LiftName = liftName58e5808d-9b1f-4763-b319-6ecb1e1cdea5, IsOpen = True, SeatsAmount = 90, LiftingTime = 6, QueueTime = 244, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:06:19 MSK 2022","Tue Oct 11 09:06:20 MSK 2022","664","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 149, SlopeName = slopeName022af32b-d187-4be3-acea-4131769b2d82, IsOpen = True, DifficultyLevel = 138, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 149, SlopeName = slopeName022af32b-d187-4be3-acea-4131769b2d82, IsOpen = True, DifficultyLevel = 138, ConnectedLifts =  })",""
"failed","Tue Oct 11 21:16:17 MSK 2022","Tue Oct 11 21:16:17 MSK 2022","29","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 205, SlopeName = slopeNamebbfa4fdb-b25e-4adb-8cf8-2df0bcac9441, IsOpen = True, DifficultyLevel = 76, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 205, SlopeName = slopeNamebbfa4fdb-b25e-4adb-8cf8-2df0bcac9441, IsOpen = True, DifficultyLevel = 76, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:16:21 MSK 2022","Tue Oct 11 21:16:21 MSK 2022","623","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 193)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 193)",""
"passed","Tue Oct 11 19:01:39 MSK 2022","Tue Oct 11 19:01:40 MSK 2022","604","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 70, CardID = 237, UserEmail = UserEmail8f6150de-a1c4-40ae-af27-dc7492efe083, Password = password62bc1388-26cc-45e0-a5a7-60276e66a7bd, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 70, CardID = 237, UserEmail = UserEmail8f6150de-a1c4-40ae-af27-dc7492efe083, Password = password62bc1388-26cc-45e0-a5a7-60276e66a7bd, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:26:01 MSK 2022","Tue Oct 11 18:26:01 MSK 2022","651","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 149, SlopeName = slopeNamed7c39012-005c-49c0-9e77-7d75f8bf29fd, IsOpen = True, DifficultyLevel = 246, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 149, SlopeName = slopeNamed7c39012-005c-49c0-9e77-7d75f8bf29fd, IsOpen = True, DifficultyLevel = 246, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:30:10 MSK 2022","Tue Oct 11 21:30:10 MSK 2022","639","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 56, LiftID = 53, SlopeID = 70 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 56, LiftID = 53, SlopeID = 70 })",""
"passed","Tue Oct 11 15:11:06 MSK 2022","Tue Oct 11 15:11:07 MSK 2022","660","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 249, LiftID = 201, SlopeID = 70 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 249, LiftID = 201, SlopeID = 70 })",""
"passed","Tue Oct 11 09:11:01 MSK 2022","Tue Oct 11 09:11:02 MSK 2022","617","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 153)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 153)",""
"passed","Tue Oct 11 18:24:44 MSK 2022","Tue Oct 11 18:24:44 MSK 2022","609","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 107)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 107)",""
"passed","Tue Oct 11 21:20:19 MSK 2022","Tue Oct 11 21:20:20 MSK 2022","603","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamecf26bcfd-0f92-4b33-971b-c0abc8844133"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamecf26bcfd-0f92-4b33-971b-c0abc8844133"")",""
"passed","Tue Oct 11 19:01:41 MSK 2022","Tue Oct 11 19:01:41 MSK 2022","570","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail27fa469c-769f-4a1d-9998-0b871d7a2e0b"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail27fa469c-769f-4a1d-9998-0b871d7a2e0b"")",""
"passed","Tue Oct 11 09:19:10 MSK 2022","Tue Oct 11 09:19:11 MSK 2022","618","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName625102b1-bcbd-4b88-af8b-1eae98a3ec4f"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName625102b1-bcbd-4b88-af8b-1eae98a3ec4f"")",""
"failed","Tue Oct 11 08:55:29 MSK 2022","Tue Oct 11 08:55:32 MSK 2022","2293","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 145)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 145)",""
"failed","Tue Oct 11 21:19:37 MSK 2022","Tue Oct 11 21:19:58 MSK 2022","21044","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 102, SlopeName = slopeNamec6204d5c-bf3a-463b-bd69-8d6d50eaa3e5, IsOpen = True, DifficultyLevel = 232, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 102, SlopeName = slopeNamec6204d5c-bf3a-463b-bd69-8d6d50eaa3e5, IsOpen = True, DifficultyLevel = 232, ConnectedLifts =  })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","6","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 221, CardID = 101, UserEmail = UserEmaila93525f5-23f0-428f-b171-e16f20534213, Password = password77e28265-7711-4942-b8d5-e4ba14602989, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 221, CardID = 101, UserEmail = UserEmaila93525f5-23f0-428f-b171-e16f20534213, Password = password77e28265-7711-4942-b8d5-e4ba14602989, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 19:01:50 MSK 2022","Tue Oct 11 19:01:50 MSK 2022","568","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName1d0d3bc8-2206-4dde-859f-6edbb9889206"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName1d0d3bc8-2206-4dde-859f-6edbb9889206"")",""
"passed","Tue Oct 11 21:16:23 MSK 2022","Tue Oct 11 21:16:23 MSK 2022","654","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 146, LiftID = 161, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAsyncFailsWhenTurnstileIdRepeats(turnstile: Turnstile { TurnstileID = 146, LiftID = 161, IsOpen = True })",""
"passed","Tue Oct 11 18:59:16 MSK 2022","Tue Oct 11 18:59:17 MSK 2022","586","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 28, LiftID = 1, SlopeID = 117 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 28, LiftID = 1, SlopeID = 117 })",""
"passed","Tue Oct 11 18:25:52 MSK 2022","Tue Oct 11 18:25:52 MSK 2022","653","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 123, LiftID = 112, SlopeID = 215 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 123, LiftID = 112, SlopeID = 215 })",""
"passed","Tue Oct 11 21:30:12 MSK 2022","Tue Oct 11 21:30:13 MSK 2022","693","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 99, LiftID = 58, SlopeID = 57 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 99, LiftID = 58, SlopeID = 57 })",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 6)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 6)",""
"passed","Tue Oct 11 09:06:53 MSK 2022","Tue Oct 11 09:06:54 MSK 2022","667","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 74, SlopeName = slopeNamefadbd41a-738e-4b63-931c-dde168cd9703, IsOpen = True, DifficultyLevel = 44, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 74, SlopeName = slopeNamefadbd41a-738e-4b63-931c-dde168cd9703, IsOpen = True, DifficultyLevel = 44, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:14:08 MSK 2022","Tue Oct 11 19:14:09 MSK 2022","720","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 14, LiftID = 239, SlopeID = 73 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 14, LiftID = 239, SlopeID = 73 })",""
"passed","Tue Oct 11 19:14:01 MSK 2022","Tue Oct 11 19:14:01 MSK 2022","647","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 134, LiftName = liftName88b89f80-d400-4014-8619-0afdf9a82a4d, IsOpen = True, SeatsAmount = 37, LiftingTime = 244, QueueTime = 83, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 134, LiftName = liftName88b89f80-d400-4014-8619-0afdf9a82a4d, IsOpen = True, SeatsAmount = 37, LiftingTime = 244, QueueTime = 83, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:26:02 MSK 2022","Tue Oct 11 18:26:02 MSK 2022","603","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName8450407e-8da6-4a4f-a81d-1590ed11d8ee"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName8450407e-8da6-4a4f-a81d-1590ed11d8ee"")",""
"passed","Tue Oct 11 21:16:09 MSK 2022","Tue Oct 11 21:16:10 MSK 2022","688","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 245, LiftID = 186, SlopeID = 133 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 245, LiftID = 186, SlopeID = 133 })",""
"passed","Tue Oct 11 18:24:44 MSK 2022","Tue Oct 11 18:24:52 MSK 2022","7408","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 207, LiftID = 14, SlopeID = 170 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 207, LiftID = 14, SlopeID = 170 })",""
"passed","Tue Oct 11 09:13:29 MSK 2022","Tue Oct 11 09:13:30 MSK 2022","597","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamea4b61a54-b4ee-4b6e-b08b-c82675be251b"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamea4b61a54-b4ee-4b6e-b08b-c82675be251b"")",""
"passed","Tue Oct 11 18:59:12 MSK 2022","Tue Oct 11 18:59:12 MSK 2022","679","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 127, SlopeName = slopeName187f069f-81c8-4515-b11a-a4346e82b323, IsOpen = True, DifficultyLevel = 202, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 127, SlopeName = slopeName187f069f-81c8-4515-b11a-a4346e82b323, IsOpen = True, DifficultyLevel = 202, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:19:58 MSK 2022","Tue Oct 11 21:19:59 MSK 2022","725","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 138)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 138)",""
"passed","Tue Oct 11 21:29:55 MSK 2022","Tue Oct 11 21:29:55 MSK 2022","597","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail509fe537-5f27-49c5-a1c5-846cc9507119"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail509fe537-5f27-49c5-a1c5-846cc9507119"")",""
"passed","Tue Oct 11 19:01:43 MSK 2022","Tue Oct 11 19:01:44 MSK 2022","601","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 249, CardID = 138, UserEmail = UserEmail7850f4d4-7870-48f5-8d5d-beaefbe2f82d, Password = password31f40e4f-2f8b-4969-a426-98d246e5d236, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 249, CardID = 138, UserEmail = UserEmail7850f4d4-7870-48f5-8d5d-beaefbe2f82d, Password = password31f40e4f-2f8b-4969-a426-98d246e5d236, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 19:14:05 MSK 2022","Tue Oct 11 19:14:05 MSK 2022","630","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 188, LiftID = 49, SlopeID = 96 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestUpdateLiftSlopeByIDAsyncOk(liftSlope: LiftSlope { RecordID = 188, LiftID = 49, SlopeID = 96 })",""
"passed","Tue Oct 11 21:20:17 MSK 2022","Tue Oct 11 21:20:17 MSK 2022","741","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 225, LiftName = liftName823ae2a4-74c8-4df8-9a23-03ea9214cc7a, IsOpen = True, SeatsAmount = 44, LiftingTime = 169, QueueTime = 78, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 225, LiftName = liftName823ae2a4-74c8-4df8-9a23-03ea9214cc7a, IsOpen = True, SeatsAmount = 44, LiftingTime = 169, QueueTime = 78, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:11:00 MSK 2022","Tue Oct 11 09:11:01 MSK 2022","649","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 75, SlopeName = slopeNamececca6b1-4edc-4bf4-8876-7c4c89912c3d, IsOpen = True, DifficultyLevel = 144, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 75, SlopeName = slopeNamececca6b1-4edc-4bf4-8876-7c4c89912c3d, IsOpen = True, DifficultyLevel = 144, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:30:08 MSK 2022","Tue Oct 11 21:30:09 MSK 2022","679","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 83, LiftID = 246, SlopeID = 34 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 83, LiftID = 246, SlopeID = 34 })",""
"passed","Tue Oct 11 21:30:11 MSK 2022","Tue Oct 11 21:30:12 MSK 2022","677","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAutoIncrementAsyncOk",""
"passed","Tue Oct 11 19:14:16 MSK 2022","Tue Oct 11 19:14:17 MSK 2022","704","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 200, CardID = 243, UserEmail = UserEmail3f2f4a06-e736-49b7-92b3-21b3ef92f2a2, Password = password0fffff61-c0c1-4d27-a7e6-1906f5c4ade3, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 200, CardID = 243, UserEmail = UserEmail3f2f4a06-e736-49b7-92b3-21b3ef92f2a2, Password = password0fffff61-c0c1-4d27-a7e6-1906f5c4ade3, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 21:30:02 MSK 2022","Tue Oct 11 21:30:02 MSK 2022","599","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 194)","AccessToDB.Tests.TurnstilesRepositoryTests.TestDeleteTurnstileByIDAsyncFailsWhenIDNotExists(turnstileID: 194)",""
"failed","Tue Oct 11 21:17:30 MSK 2022","Tue Oct 11 21:17:52 MSK 2022","21144","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 4, SlopeName = slopeName39096579-4aa3-4ec8-960a-a53edbacf5cf, IsOpen = True, DifficultyLevel = 88, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 4, SlopeName = slopeName39096579-4aa3-4ec8-960a-a53edbacf5cf, IsOpen = True, DifficultyLevel = 88, ConnectedLifts =  })",""
"failed","Tue Oct 11 00:36:59 MSK 2022","Tue Oct 11 00:37:02 MSK 2022","2303","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 88)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 88)",""
"failed","Tue Oct 11 00:33:47 MSK 2022","Tue Oct 11 00:33:51 MSK 2022","4160","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 126)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 126)",""
"failed","Tue Oct 11 14:51:13 MSK 2022","Tue Oct 11 14:51:17 MSK 2022","4147","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email88187123-45a4-4d1b-86a6-834c1aa0f1c9"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""email88187123-45a4-4d1b-86a6-834c1aa0f1c9"")",""
"passed","Tue Oct 11 21:30:00 MSK 2022","Tue Oct 11 21:30:00 MSK 2022","654","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk","AccessToDB.Tests.TurnstilesRepositoryTests.TestAddTurnstileAutoIncrementAsyncOk",""
"passed","Tue Oct 11 18:24:59 MSK 2022","Tue Oct 11 18:24:59 MSK 2022","638","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 31)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 31)",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 27, LiftID = 235, SlopeID = 108 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 27, LiftID = 235, SlopeID = 108 })",""
"passed","Tue Oct 11 19:13:57 MSK 2022","Tue Oct 11 19:13:57 MSK 2022","643","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 163, SlopeName = slopeName9027f8f4-4dc4-448a-bc21-2b3869c2d341, IsOpen = True, DifficultyLevel = 171, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 163, SlopeName = slopeName9027f8f4-4dc4-448a-bc21-2b3869c2d341, IsOpen = True, DifficultyLevel = 171, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:29:58 MSK 2022","Tue Oct 11 21:29:59 MSK 2022","667","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesAsyncEmpty",""
"passed","Tue Oct 11 18:24:52 MSK 2022","Tue Oct 11 18:24:52 MSK 2022","607","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 82)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 82)",""
"passed","Tue Oct 11 21:20:11 MSK 2022","Tue Oct 11 21:20:11 MSK 2022","651","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 61, CardID = 48, UserEmail = UserEmaile463a2b9-4469-49e1-a543-cfe33870e4c5, Password = password3bea7593-f971-456f-9150-fccd2d82dcc5, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 61, CardID = 48, UserEmail = UserEmaile463a2b9-4469-49e1-a543-cfe33870e4c5, Password = password3bea7593-f971-456f-9150-fccd2d82dcc5, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 18:25:52 MSK 2022","Tue Oct 11 18:25:53 MSK 2022","703","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 213, SlopeName = slopeNameb7693b31-feb6-4245-865c-3a9ce8645403, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, slope2: Slope { SlopeID = 133, SlopeName = slopeNamecb85da1a-484a-41d9-acb0-881ee1a5de2a, IsOpen = False, DifficultyLevel = 231, ConnectedLifts =  }, lift1: Lift { LiftID = 75, LiftName = liftName38954a26-f205-4e6b-815d-cb486e0ac25b, IsOpen = True, SeatsAmount = 11, LiftingTime = 70, QueueTime = 191, ConnectedSlopes =  }, lift2: Lift { LiftID = 21, LiftName = liftNamed72a4a01-0380-48e4-9d46-81a55f9c1de5, IsOpen = False, SeatsAmount = 117, LiftingTime = 154, QueueTime = 248, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 213, SlopeName = slopeNameb7693b31-feb6-4245-865c-3a9ce8645403, IsOpen = True, DifficultyLevel = 242, ConnectedLifts =  }, slope2: Slope { SlopeID = 133, SlopeName = slopeNamecb85da1a-484a-41d9-acb0-881ee1a5de2a, IsOpen = False, DifficultyLevel = 231, ConnectedLifts =  }, lift1: Lift { LiftID = 75, LiftName = liftName38954a26-f205-4e6b-815d-cb486e0ac25b, IsOpen = True, SeatsAmount = 11, LiftingTime = 70, QueueTime = 191, ConnectedSlopes =  }, lift2: Lift { LiftID = 21, LiftName = liftNamed72a4a01-0380-48e4-9d46-81a55f9c1de5, IsOpen = False, SeatsAmount = 117, LiftingTime = 154, QueueTime = 248, ConnectedSlopes =  })",""
"failed","Tue Oct 11 21:30:13 MSK 2022","Tue Oct 11 21:30:34 MSK 2022","21036","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 223, SlopeName = slopeName9d64416e-a239-49a6-9222-54bcbd56275f, IsOpen = True, DifficultyLevel = 157, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 223, SlopeName = slopeName9d64416e-a239-49a6-9222-54bcbd56275f, IsOpen = True, DifficultyLevel = 157, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:29:56 MSK 2022","Tue Oct 11 21:29:57 MSK 2022","719","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 226, CardID = 203, UserEmail = UserEmailb81e1bc6-a5ff-43c5-bddf-afd96532fc2e, Password = password3b48c500-690f-408c-a056-8653e29b4430, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 226, CardID = 203, UserEmail = UserEmailb81e1bc6-a5ff-43c5-bddf-afd96532fc2e, Password = password3b48c500-690f-408c-a056-8653e29b4430, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 15:11:04 MSK 2022","Tue Oct 11 15:11:05 MSK 2022","661","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 80, LiftID = 36, SlopeID = 108 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 80, LiftID = 36, SlopeID = 108 })",""
"passed","Tue Oct 11 15:10:45 MSK 2022","Tue Oct 11 15:10:46 MSK 2022","607","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 1)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 1)",""
"failed","Tue Oct 11 00:34:17 MSK 2022","Tue Oct 11 00:34:17 MSK 2022","617","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamed369a8e4-c14e-4614-ad31-bbbcb14651fc"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamed369a8e4-c14e-4614-ad31-bbbcb14651fc"")",""
"passed","Tue Oct 11 18:25:49 MSK 2022","Tue Oct 11 18:25:50 MSK 2022","637","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 255, LiftID = 240, SlopeID = 43 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 255, LiftID = 240, SlopeID = 43 })",""
"passed","Tue Oct 11 19:14:07 MSK 2022","Tue Oct 11 19:14:08 MSK 2022","623","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 156, LiftID = 147, SlopeID = 182 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 156, LiftID = 147, SlopeID = 182 })",""
"passed","Tue Oct 11 21:20:07 MSK 2022","Tue Oct 11 21:20:08 MSK 2022","618","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 218, LiftID = 37, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstileByIdAsyncOk(turnstile: Turnstile { TurnstileID = 218, LiftID = 37, IsOpen = True })",""
"passed","Tue Oct 11 09:12:59 MSK 2022","Tue Oct 11 09:13:00 MSK 2022","775","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 35, LiftName = liftName81c27b7a-16a7-4722-900e-31bea1f7a6c5, IsOpen = True, SeatsAmount = 41, LiftingTime = 134, QueueTime = 98, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 35, LiftName = liftName81c27b7a-16a7-4722-900e-31bea1f7a6c5, IsOpen = True, SeatsAmount = 41, LiftingTime = 134, QueueTime = 98, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:59:13 MSK 2022","Tue Oct 11 18:59:14 MSK 2022","567","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName80a873ee-1880-4273-9af2-9fbba6695cdf"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName80a873ee-1880-4273-9af2-9fbba6695cdf"")",""
"passed","Tue Oct 11 18:59:20 MSK 2022","Tue Oct 11 18:59:20 MSK 2022","566","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 62)","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopeByIDAsyncFailsWhenIDNotExists(liftSlopeID: 62)",""
"failed","Tue Oct 11 00:33:51 MSK 2022","Tue Oct 11 00:33:55 MSK 2022","4055","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 72, SlopeName = slopeName69a66cb2-a99e-4a65-b64f-8fed18305018, IsOpen = True, DifficultyLevel = 78, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 72, SlopeName = slopeName69a66cb2-a99e-4a65-b64f-8fed18305018, IsOpen = True, DifficultyLevel = 78, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:14:13 MSK 2022","Tue Oct 11 19:14:14 MSK 2022","692","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 242, LiftID = 114, IsOpen = True })","AccessToDB.Tests.TurnstilesRepositoryTests.TestUpdateTurnstileByIDAsyncOk(turnstile: Turnstile { TurnstileID = 242, LiftID = 114, IsOpen = True })",""
"passed","Tue Oct 11 18:24:43 MSK 2022","Tue Oct 11 18:24:44 MSK 2022","609","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail99ee20b4-96ba-46d5-8bcc-c322fd0cb8c8"")","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserEmailExistsAsyncFalse(userEmail: ""userEmail99ee20b4-96ba-46d5-8bcc-c322fd0cb8c8"")",""
"passed","Tue Oct 11 09:15:48 MSK 2022","Tue Oct 11 09:15:49 MSK 2022","620","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 143)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 143)",""
"failed","Tue Oct 11 21:18:13 MSK 2022","Tue Oct 11 21:18:34 MSK 2022","21066","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 215)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 215)",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 109, LiftID = 43, SlopeID = 129 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 109, LiftID = 43, SlopeID = 129 })",""
"passed","Tue Oct 11 21:30:06 MSK 2022","Tue Oct 11 21:30:06 MSK 2022","659","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 168, LiftName = liftName4cf1c9cd-9cf0-4e4f-9fb9-e7444c1fca75, IsOpen = True, SeatsAmount = 12, LiftingTime = 213, QueueTime = 4, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 168, LiftName = liftName4cf1c9cd-9cf0-4e4f-9fb9-e7444c1fca75, IsOpen = True, SeatsAmount = 12, LiftingTime = 213, QueueTime = 4, ConnectedSlopes =  })",""
"passed","Tue Oct 11 19:01:35 MSK 2022","Tue Oct 11 19:01:36 MSK 2022","617","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 142, SlopeName = slopeNamea786a735-7767-4524-afe7-80104f2e60f1, IsOpen = True, DifficultyLevel = 165, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 142, SlopeName = slopeNamea786a735-7767-4524-afe7-80104f2e60f1, IsOpen = True, DifficultyLevel = 165, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:19:03 MSK 2022","Tue Oct 11 09:19:04 MSK 2022","646","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 192, LiftName = liftNameb4c40e18-b2f1-4153-bd0b-c43eb093315a, IsOpen = True, SeatsAmount = 151, LiftingTime = 220, QueueTime = 235, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 192, LiftName = liftNameb4c40e18-b2f1-4153-bd0b-c43eb093315a, IsOpen = True, SeatsAmount = 151, LiftingTime = 220, QueueTime = 235, ConnectedSlopes =  })",""
"failed","Tue Oct 11 12:50:38 MSK 2022","Tue Oct 11 12:50:42 MSK 2022","4171","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 247, SlopeName = slopeNamef9f1a440-e5c5-49f4-8e64-dc5cf8783d81, IsOpen = True, DifficultyLevel = 16, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 247, SlopeName = slopeNamef9f1a440-e5c5-49f4-8e64-dc5cf8783d81, IsOpen = True, DifficultyLevel = 16, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:24:59 MSK 2022","Tue Oct 11 18:25:00 MSK 2022","603","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNameec173aa5-a891-4492-b83a-7e47cb79c184"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNameec173aa5-a891-4492-b83a-7e47cb79c184"")",""
"failed","Tue Oct 11 18:37:43 MSK 2022","Tue Oct 11 18:37:43 MSK 2022","7","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaildaf2101d-9ad1-4a9e-b9ba-f58d7b62583b"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaildaf2101d-9ad1-4a9e-b9ba-f58d7b62583b"")",""
"passed","Tue Oct 11 21:16:12 MSK 2022","Tue Oct 11 21:16:13 MSK 2022","719","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 62, CardID = 197, UserEmail = UserEmail470e6a69-de2e-487b-bf8f-7d976f942a80, Password = password012d401c-c416-45c0-87a2-073a208a8300, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 62, CardID = 197, UserEmail = UserEmail470e6a69-de2e-487b-bf8f-7d976f942a80, Password = password012d401c-c416-45c0-87a2-073a208a8300, Permissions = UNAUTHORIZED })",""
"failed","Tue Oct 11 09:11:52 MSK 2022","Tue Oct 11 09:11:53 MSK 2022","649","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 204)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 204)",""
"passed","Tue Oct 11 09:19:07 MSK 2022","Tue Oct 11 09:19:07 MSK 2022","618","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 75)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 75)",""
"passed","Tue Oct 11 09:15:46 MSK 2022","Tue Oct 11 09:15:47 MSK 2022","611","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName78913562-1fff-48c1-8294-dcb4c6c3c490"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName78913562-1fff-48c1-8294-dcb4c6c3c490"")",""
"passed","Tue Oct 11 09:15:47 MSK 2022","Tue Oct 11 09:15:48 MSK 2022","661","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 137, SlopeName = slopeName6d2dbe1f-8f4a-4348-b7b4-71aa6bf6be45, IsOpen = True, DifficultyLevel = 113, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 137, SlopeName = slopeName6d2dbe1f-8f4a-4348-b7b4-71aa6bf6be45, IsOpen = True, DifficultyLevel = 113, ConnectedLifts =  })",""
"passed","Tue Oct 11 00:37:52 MSK 2022","Tue Oct 11 00:37:52 MSK 2022","649","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 225, SlopeName = slopeName1c98dfcd-5774-4350-a0d5-543b87fa0662, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 225, SlopeName = slopeName1c98dfcd-5774-4350-a0d5-543b87fa0662, IsOpen = True, DifficultyLevel = 100, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:24:41 MSK 2022","Tue Oct 11 18:24:42 MSK 2022","640","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 232, CardID = 230, UserEmail = UserEmailae289d45-8574-4b30-8b69-b9061c8f3665, Password = password20489f4b-34a7-45be-9bd0-f0044feaad17, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 232, CardID = 230, UserEmail = UserEmailae289d45-8574-4b30-8b69-b9061c8f3665, Password = password20489f4b-34a7-45be-9bd0-f0044feaad17, Permissions = UNAUTHORIZED })",""
"failed","Tue Oct 11 21:30:55 MSK 2022","Tue Oct 11 21:31:16 MSK 2022","21025","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 162)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 162)",""
"passed","Tue Oct 11 09:19:08 MSK 2022","Tue Oct 11 09:19:09 MSK 2022","666","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 231, SlopeName = slopeName2f541e1d-b572-435f-a0f6-ef9d94726b6b, IsOpen = True, DifficultyLevel = 170, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 231, SlopeName = slopeName2f541e1d-b572-435f-a0f6-ef9d94726b6b, IsOpen = True, DifficultyLevel = 170, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:14:18 MSK 2022","Tue Oct 11 19:14:19 MSK 2022","684","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 36, CardID = 253, UserEmail = UserEmail07c88acd-2573-4e31-8bcf-344e01b18418, Password = passworddca5ea0b-fea5-4cba-a8aa-d16dd8835e04, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByIdAsyncOk(user: User { UserID = 36, CardID = 253, UserEmail = UserEmail07c88acd-2573-4e31-8bcf-344e01b18418, Password = passworddca5ea0b-fea5-4cba-a8aa-d16dd8835e04, Permissions = UNAUTHORIZED })",""
"failed","Tue Oct 11 21:16:18 MSK 2022","Tue Oct 11 21:16:18 MSK 2022","22","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 149, SlopeName = slopeName76f1628f-2c82-40f5-85fe-8c39cb741a4f, IsOpen = True, DifficultyLevel = 55, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 149, SlopeName = slopeName76f1628f-2c82-40f5-85fe-8c39cb741a4f, IsOpen = True, DifficultyLevel = 55, ConnectedLifts =  })",""
"failed","Tue Oct 11 09:10:58 MSK 2022","Tue Oct 11 09:10:58 MSK 2022","653","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 236, LiftName = liftName3583fa60-612a-4acb-aa3e-cc5fde5a21a2, IsOpen = True, SeatsAmount = 171, LiftingTime = 218, QueueTime = 17, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 236, LiftName = liftName3583fa60-612a-4acb-aa3e-cc5fde5a21a2, IsOpen = True, SeatsAmount = 171, LiftingTime = 218, QueueTime = 17, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:26:04 MSK 2022","Tue Oct 11 18:26:04 MSK 2022","662","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 190, SlopeName = slopeName3befeceb-80d2-451b-90ed-c9e8ea151784, IsOpen = True, DifficultyLevel = 235, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 190, SlopeName = slopeName3befeceb-80d2-451b-90ed-c9e8ea151784, IsOpen = True, DifficultyLevel = 235, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:11:56 MSK 2022","Tue Oct 11 09:11:56 MSK 2022","651","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 97, SlopeName = slopeNameba5b1496-881c-4d90-881e-3e954d448c85, IsOpen = True, DifficultyLevel = 214, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 97, SlopeName = slopeNameba5b1496-881c-4d90-881e-3e954d448c85, IsOpen = True, DifficultyLevel = 214, ConnectedLifts =  })",""
"passed","Tue Oct 11 18:24:20 MSK 2022","Tue Oct 11 18:24:21 MSK 2022","656","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 117, SlopeName = slopeNameeb9cbee1-a1e6-4e5e-b950-f0898771734b, IsOpen = True, DifficultyLevel = 12, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 117, SlopeName = slopeNameeb9cbee1-a1e6-4e5e-b950-f0898771734b, IsOpen = True, DifficultyLevel = 12, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:19:05 MSK 2022","Tue Oct 11 09:19:06 MSK 2022","620","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName9962e7d4-4938-4288-9b71-80dab8a7b594"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName9962e7d4-4938-4288-9b71-80dab8a7b594"")",""
"passed","Tue Oct 11 18:59:24 MSK 2022","Tue Oct 11 18:59:25 MSK 2022","571","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamebd49f24d-f9d6-4b4b-b476-f49d0116ad53"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftNamebd49f24d-f9d6-4b4b-b476-f49d0116ad53"")",""
"passed","Tue Oct 11 09:11:00 MSK 2022","Tue Oct 11 09:11:00 MSK 2022","659","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 11, SlopeName = slopeName0c646897-17ae-4091-8053-101eae3055fc, IsOpen = True, DifficultyLevel = 40, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 11, SlopeName = slopeName0c646897-17ae-4091-8053-101eae3055fc, IsOpen = True, DifficultyLevel = 40, ConnectedLifts =  })",""
"failed","Tue Oct 11 09:13:31 MSK 2022","Tue Oct 11 09:13:31 MSK 2022","38","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 76, LiftName = liftNamed10551bb-6225-448f-b991-eca7627fe70c, IsOpen = True, SeatsAmount = 178, LiftingTime = 252, QueueTime = 93, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 76, LiftName = liftNamed10551bb-6225-448f-b991-eca7627fe70c, IsOpen = True, SeatsAmount = 178, LiftingTime = 252, QueueTime = 93, ConnectedSlopes =  })",""
"passed","Tue Oct 11 21:30:10 MSK 2022","Tue Oct 11 21:30:11 MSK 2022","696","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 139, LiftID = 180, SlopeID = 228 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 139, LiftID = 180, SlopeID = 228 })",""
"passed","Tue Oct 11 18:24:54 MSK 2022","Tue Oct 11 18:24:54 MSK 2022","640","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 169, LiftID = 19, SlopeID = 156 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftSlopeByIdAsyncOk(liftSlope: LiftSlope { RecordID = 169, LiftID = 19, SlopeID = 156 })",""
"passed","Tue Oct 11 21:20:05 MSK 2022","Tue Oct 11 21:20:06 MSK 2022","830","","TurnstilesRepositorySuite","","AccessToDB.Tests.TurnstilesRepositoryTests","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 253)","AccessToDB.Tests.TurnstilesRepositoryTests.TestGetTurnstilesByLiftIdAsyncOk(liftID: 253)",""
"passed","Tue Oct 11 19:01:42 MSK 2022","Tue Oct 11 19:01:42 MSK 2022","614","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 75, CardID = 47, UserEmail = UserEmail4be357df-1dbb-4403-879a-308e8f27fe0f, Password = passwordedbf18a3-6117-44e2-9ed6-29b5af838561, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAsyncFailsWhenUserIdRepeats(user: User { UserID = 75, CardID = 47, UserEmail = UserEmail4be357df-1dbb-4403-879a-308e8f27fe0f, Password = passwordedbf18a3-6117-44e2-9ed6-29b5af838561, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 19:01:38 MSK 2022","Tue Oct 11 19:01:39 MSK 2022","608","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 12, CardID = 52, UserEmail = UserEmail72661024-e36a-4ebe-ac92-8f2a471b9e4d, Password = passwordc922dbeb-0d63-4777-8a32-2266f4415e91, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestUpdateUserByIDAsyncOk(user: User { UserID = 12, CardID = 52, UserEmail = UserEmail72661024-e36a-4ebe-ac92-8f2a471b9e4d, Password = passwordc922dbeb-0d63-4777-8a32-2266f4415e91, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 21:20:09 MSK 2022","Tue Oct 11 21:20:10 MSK 2022","638","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 139, CardID = 38, UserEmail = UserEmail666883bd-cfbf-4ac2-8569-798b55da248a, Password = passworda670e48f-f53c-4394-a952-734a920ab814, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 139, CardID = 38, UserEmail = UserEmail666883bd-cfbf-4ac2-8569-798b55da248a, Password = passworda670e48f-f53c-4394-a952-734a920ab814, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 09:13:32 MSK 2022","Tue Oct 11 09:13:33 MSK 2022","609","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamec92d6d92-34ea-4319-92a8-63636cf5a993"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamec92d6d92-34ea-4319-92a8-63636cf5a993"")",""
"passed","Tue Oct 11 18:59:23 MSK 2022","Tue Oct 11 18:59:23 MSK 2022","611","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 121, LiftName = liftNamed2b0e0b5-46a0-4d49-8be2-5641e3a899dd, IsOpen = True, SeatsAmount = 70, LiftingTime = 137, QueueTime = 153, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 121, LiftName = liftNamed2b0e0b5-46a0-4d49-8be2-5641e3a899dd, IsOpen = True, SeatsAmount = 70, LiftingTime = 137, QueueTime = 153, ConnectedSlopes =  })",""
"passed","Tue Oct 11 18:59:22 MSK 2022","Tue Oct 11 18:59:22 MSK 2022","603","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 133, LiftName = liftName936b2877-792f-4e6f-b76c-df20d1c92532, IsOpen = True, SeatsAmount = 232, LiftingTime = 164, QueueTime = 212, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 133, LiftName = liftName936b2877-792f-4e6f-b76c-df20d1c92532, IsOpen = True, SeatsAmount = 232, LiftingTime = 164, QueueTime = 212, ConnectedSlopes =  })",""
"failed","Tue Oct 11 09:19:53 MSK 2022","Tue Oct 11 09:19:53 MSK 2022","3","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 235, SlopeName = slopeName984c35d8-a16e-4bc7-9f09-bc9326deb7ff, IsOpen = True, DifficultyLevel = 13, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 235, SlopeName = slopeName984c35d8-a16e-4bc7-9f09-bc9326deb7ff, IsOpen = True, DifficultyLevel = 13, ConnectedLifts =  })",""
"passed","Tue Oct 11 15:10:54 MSK 2022","Tue Oct 11 15:10:55 MSK 2022","653","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 26, LiftName = liftName6c4c377e-a139-4459-9762-f30e3c7424cc, IsOpen = True, SeatsAmount = 66, LiftingTime = 110, QueueTime = 131, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestUpdateLiftByIDAsyncOk(lift: Lift { LiftID = 26, LiftName = liftName6c4c377e-a139-4459-9762-f30e3c7424cc, IsOpen = True, SeatsAmount = 66, LiftingTime = 110, QueueTime = 131, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:12:44 MSK 2022","Tue Oct 11 09:12:45 MSK 2022","644","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 131, SlopeName = slopeNameb0c1e959-4cc3-4a3d-bf66-ee3d97729e10, IsOpen = True, DifficultyLevel = 51, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 131, SlopeName = slopeNameb0c1e959-4cc3-4a3d-bf66-ee3d97729e10, IsOpen = True, DifficultyLevel = 51, ConnectedLifts =  })",""
"failed","Tue Oct 11 15:11:07 MSK 2022","Tue Oct 11 15:11:07 MSK 2022","659","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 64, LiftID = 170, SlopeID = 98 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 64, LiftID = 170, SlopeID = 98 })",""
"passed","Tue Oct 11 09:13:07 MSK 2022","Tue Oct 11 09:13:08 MSK 2022","644","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 245, SlopeName = slopeNameba606ede-4442-46df-9684-7b6ab6547842, IsOpen = True, DifficultyLevel = 49, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByIdAsyncOk(slope: Slope { SlopeID = 245, SlopeName = slopeNameba606ede-4442-46df-9684-7b6ab6547842, IsOpen = True, DifficultyLevel = 49, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:30:02 MSK 2022","Tue Oct 11 21:30:03 MSK 2022","733","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAutoIncrementAsyncOk",""
"passed","Tue Oct 11 09:10:59 MSK 2022","Tue Oct 11 09:11:00 MSK 2022","646","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 243, LiftName = liftNamef24e83b6-fb0a-43e0-876c-2900bccd54be, IsOpen = True, SeatsAmount = 42, LiftingTime = 80, QueueTime = 162, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 243, LiftName = liftNamef24e83b6-fb0a-43e0-876c-2900bccd54be, IsOpen = True, SeatsAmount = 42, LiftingTime = 80, QueueTime = 162, ConnectedSlopes =  })",""
"passed","Tue Oct 11 09:13:01 MSK 2022","Tue Oct 11 09:13:01 MSK 2022","608","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName4f9643a7-65e7-4cd7-900e-3db745f2adca"")","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByNameAsyncFailsWhenNameNotExists(liftName: ""liftName4f9643a7-65e7-4cd7-900e-3db745f2adca"")",""
"failed","Tue Oct 11 18:59:18 MSK 2022","Tue Oct 11 18:59:18 MSK 2022","58","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 233, SlopeName = slopeName973dd867-79f7-4b9a-8675-10d63fee9d45, IsOpen = True, DifficultyLevel = 148, ConnectedLifts =  }, slope2: Slope { SlopeID = 43, SlopeName = slopeNameee834160-c933-4866-98e2-89c842f9692d, IsOpen = False, DifficultyLevel = 38, ConnectedLifts =  }, lift1: Lift { LiftID = 219, LiftName = liftNamed59576ce-6ac6-42a9-9990-c513bd534f30, IsOpen = True, SeatsAmount = 119, LiftingTime = 106, QueueTime = 226, ConnectedSlopes =  }, lift2: Lift { LiftID = 102, LiftName = liftName624acc60-4cdf-4d48-980b-a972640d48ed, IsOpen = False, SeatsAmount = 24, LiftingTime = 139, QueueTime = 211, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 233, SlopeName = slopeName973dd867-79f7-4b9a-8675-10d63fee9d45, IsOpen = True, DifficultyLevel = 148, ConnectedLifts =  }, slope2: Slope { SlopeID = 43, SlopeName = slopeNameee834160-c933-4866-98e2-89c842f9692d, IsOpen = False, DifficultyLevel = 38, ConnectedLifts =  }, lift1: Lift { LiftID = 219, LiftName = liftNamed59576ce-6ac6-42a9-9990-c513bd534f30, IsOpen = True, SeatsAmount = 119, LiftingTime = 106, QueueTime = 226, ConnectedSlopes =  }, lift2: Lift { LiftID = 102, LiftName = liftName624acc60-4cdf-4d48-980b-a972640d48ed, IsOpen = False, SeatsAmount = 24, LiftingTime = 139, QueueTime = 211, ConnectedSlopes =  })",""
"failed","Tue Oct 11 18:24:52 MSK 2022","Tue Oct 11 18:24:52 MSK 2022","45","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 196, LiftID = 225, SlopeID = 252 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetSlopesByLiftIdAsyncFailsWhenSlopeNotExists(liftSlope: LiftSlope { RecordID = 196, LiftID = 225, SlopeID = 252 })",""
"passed","Tue Oct 11 15:10:47 MSK 2022","Tue Oct 11 15:10:48 MSK 2022","637","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 227, CardID = 87, UserEmail = UserEmail30ada556-c604-49f3-9293-c3c374279da6, Password = password17ce4283-869c-4e39-867f-074fc1bda533, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 227, CardID = 87, UserEmail = UserEmail30ada556-c604-49f3-9293-c3c374279da6, Password = password17ce4283-869c-4e39-867f-074fc1bda533, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 09:06:22 MSK 2022","Tue Oct 11 09:06:22 MSK 2022","659","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 184, SlopeName = slopeName4590050a-5aef-426c-b8a7-a2a8c0f661a2, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestUpdateSlopeByIDAsyncOk(slope: Slope { SlopeID = 184, SlopeName = slopeName4590050a-5aef-426c-b8a7-a2a8c0f661a2, IsOpen = True, DifficultyLevel = 159, ConnectedLifts =  })",""
"passed","Tue Oct 11 21:20:14 MSK 2022","Tue Oct 11 21:20:14 MSK 2022","589","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaile13f9229-4410-47e8-9d0f-795ab73cfdb7"")","AccessToDB.Tests.UsersRepositoryTests.TestGetUserByEmailAsyncFailsWhenEmailNotExists(email: ""emaile13f9229-4410-47e8-9d0f-795ab73cfdb7"")",""
"passed","Tue Oct 11 18:26:01 MSK 2022","Tue Oct 11 18:26:02 MSK 2022","607","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 237)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 237)",""
"passed","Tue Oct 11 21:20:17 MSK 2022","Tue Oct 11 21:20:18 MSK 2022","698","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 200)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 200)",""
"passed","Tue Oct 11 21:16:07 MSK 2022","Tue Oct 11 21:16:08 MSK 2022","644","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 105, LiftID = 24, SlopeID = 13 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 105, LiftID = 24, SlopeID = 13 })",""
"failed","Tue Oct 11 18:37:42 MSK 2022","Tue Oct 11 18:37:42 MSK 2022","7","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName49b67b43-86e1-465f-8236-9176f1d536f9"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName49b67b43-86e1-465f-8236-9176f1d536f9"")",""
"passed","Tue Oct 11 00:34:14 MSK 2022","Tue Oct 11 00:34:15 MSK 2022","657","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 106, SlopeName = slopeNameedad1ecd-5239-4a70-afff-d162d4b4237b, IsOpen = True, DifficultyLevel = 41, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 106, SlopeName = slopeNameedad1ecd-5239-4a70-afff-d162d4b4237b, IsOpen = True, DifficultyLevel = 41, ConnectedLifts =  })",""
"passed","Tue Oct 11 19:14:17 MSK 2022","Tue Oct 11 19:14:18 MSK 2022","685","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 230, CardID = 77, UserEmail = UserEmail83585c2f-2017-479e-808b-6c1a230c6c45, Password = passwordb42b0df4-dc79-43de-9d8a-ae14160560a1, Permissions = UNAUTHORIZED })","AccessToDB.Tests.UsersRepositoryTests.TestCheckUserIdExistsAsyncTrue(user: User { UserID = 230, CardID = 77, UserEmail = UserEmail83585c2f-2017-479e-808b-6c1a230c6c45, Password = passwordb42b0df4-dc79-43de-9d8a-ae14160560a1, Permissions = UNAUTHORIZED })",""
"passed","Tue Oct 11 09:13:29 MSK 2022","Tue Oct 11 09:13:29 MSK 2022","628","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 140)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 140)",""
"passed","Tue Oct 11 21:29:57 MSK 2022","Tue Oct 11 21:29:58 MSK 2022","657","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk","AccessToDB.Tests.UsersRepositoryTests.TestAddUserAutoIncrementAsyncOk",""
"failed","Tue Oct 11 09:11:03 MSK 2022","Tue Oct 11 09:11:03 MSK 2022","30","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 73, SlopeName = slopeName90d5ba00-5d9b-4401-afa5-983772ab3c9e, IsOpen = True, DifficultyLevel = 204, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 73, SlopeName = slopeName90d5ba00-5d9b-4401-afa5-983772ab3c9e, IsOpen = True, DifficultyLevel = 204, ConnectedLifts =  })",""
"passed","Tue Oct 11 09:13:02 MSK 2022","Tue Oct 11 09:13:03 MSK 2022","647","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 245, LiftName = liftNamecf143f83-e342-4685-bc86-94c051730f4f, IsOpen = True, SeatsAmount = 80, LiftingTime = 3, QueueTime = 58, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestGetLiftByIdAsyncOk(lift: Lift { LiftID = 245, LiftName = liftNamecf143f83-e342-4685-bc86-94c051730f4f, IsOpen = True, SeatsAmount = 80, LiftingTime = 3, QueueTime = 58, ConnectedSlopes =  })",""
"passed","Tue Oct 11 19:01:48 MSK 2022","Tue Oct 11 19:01:48 MSK 2022","660","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 108, SlopeName = slopeName5ff75428-fde8-4ca3-bd2c-00278c554db1, IsOpen = True, DifficultyLevel = 42, ConnectedLifts =  }, slope2: Slope { SlopeID = 86, SlopeName = slopeNamef1f7b551-05c5-4752-b914-2c873917f02c, IsOpen = False, DifficultyLevel = 52, ConnectedLifts =  }, lift1: Lift { LiftID = 63, LiftName = liftName32e121d1-4b48-4a96-839c-150fd81261c2, IsOpen = True, SeatsAmount = 122, LiftingTime = 14, QueueTime = 94, ConnectedSlopes =  }, lift2: Lift { LiftID = 210, LiftName = liftNamea60a647c-f1cd-4cc1-8a32-780ec28f83e2, IsOpen = False, SeatsAmount = 160, LiftingTime = 171, QueueTime = 253, ConnectedSlopes =  })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 108, SlopeName = slopeName5ff75428-fde8-4ca3-bd2c-00278c554db1, IsOpen = True, DifficultyLevel = 42, ConnectedLifts =  }, slope2: Slope { SlopeID = 86, SlopeName = slopeNamef1f7b551-05c5-4752-b914-2c873917f02c, IsOpen = False, DifficultyLevel = 52, ConnectedLifts =  }, lift1: Lift { LiftID = 63, LiftName = liftName32e121d1-4b48-4a96-839c-150fd81261c2, IsOpen = True, SeatsAmount = 122, LiftingTime = 14, QueueTime = 94, ConnectedSlopes =  }, lift2: Lift { LiftID = 210, LiftName = liftNamea60a647c-f1cd-4cc1-8a32-780ec28f83e2, IsOpen = False, SeatsAmount = 160, LiftingTime = 171, QueueTime = 253, ConnectedSlopes =  })",""
"passed","Tue Oct 11 19:01:45 MSK 2022","Tue Oct 11 19:01:45 MSK 2022","620","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 193, LiftID = 88, SlopeID = 251 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestAddLiftSlopeAsyncFailsWhenLiftSlopeIdRepeats(liftSlope: LiftSlope { RecordID = 193, LiftID = 88, SlopeID = 251 })",""
"passed","Tue Oct 11 18:25:50 MSK 2022","Tue Oct 11 18:25:50 MSK 2022","658","","LiftsSlopesRepositorySuite","","AccessToDB.Tests.LiftsSlopesRepositoryTests","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 60, LiftID = 123, SlopeID = 139 })","AccessToDB.Tests.LiftsSlopesRepositoryTests.TestDeleteLiftSlopesByIDsAsyncOk(liftSlope: LiftSlope { RecordID = 60, LiftID = 123, SlopeID = 139 })",""
"passed","Tue Oct 11 09:12:28 MSK 2022","Tue Oct 11 09:12:28 MSK 2022","617","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamef35f8fb7-2192-4b6a-9aee-4a0fcf5aa729"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeNamef35f8fb7-2192-4b6a-9aee-4a0fcf5aa729"")",""
"passed","Tue Oct 11 21:30:06 MSK 2022","Tue Oct 11 21:30:07 MSK 2022","626","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 192)","AccessToDB.Tests.LiftsRepositoryTests.TestDeleteLiftByIDAsyncFailsWhenIDNotExists(liftID: 192)",""
"passed","Tue Oct 11 19:01:40 MSK 2022","Tue Oct 11 19:01:41 MSK 2022","569","","UsersRepositorySuite","","AccessToDB.Tests.UsersRepositoryTests","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 158)","AccessToDB.Tests.UsersRepositoryTests.TestDeleteUserByIDAsyncFailsWhenIDNotExists(userID: 158)",""
"passed","Tue Oct 11 09:10:58 MSK 2022","Tue Oct 11 09:10:59 MSK 2022","660","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 11, LiftName = liftName8e667617-a669-4a94-8f1e-51dd65a64c0c, IsOpen = True, SeatsAmount = 84, LiftingTime = 247, QueueTime = 200, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 11, LiftName = liftName8e667617-a669-4a94-8f1e-51dd65a64c0c, IsOpen = True, SeatsAmount = 84, LiftingTime = 247, QueueTime = 200, ConnectedSlopes =  })",""
"passed","Tue Oct 11 19:14:03 MSK 2022","Tue Oct 11 19:14:04 MSK 2022","682","","LiftsRepositorySuite","","AccessToDB.Tests.LiftsRepositoryTests","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 174, LiftName = liftNamea0ea1371-1e85-46da-b81e-c7592f17e89f, IsOpen = True, SeatsAmount = 73, LiftingTime = 170, QueueTime = 70, ConnectedSlopes =  })","AccessToDB.Tests.LiftsRepositoryTests.TestAddLiftAsyncFailsWhenLiftIdRepeats(lift: Lift { LiftID = 174, LiftName = liftNamea0ea1371-1e85-46da-b81e-c7592f17e89f, IsOpen = True, SeatsAmount = 73, LiftingTime = 170, QueueTime = 70, ConnectedSlopes =  })",""
"failed","Tue Oct 11 18:37:42 MSK 2022","Tue Oct 11 18:37:42 MSK 2022","7","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 216)","AccessToDB.Tests.SlopesRepositoryTests.TestDeleteSlopeByIDAsyncFailsWhenIDNotExists(slopeID: 216)",""
"failed","Tue Oct 11 09:19:53 MSK 2022","Tue Oct 11 09:19:53 MSK 2022","3","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName562cb74a-8208-4dda-8fa6-f04558fcd8cd"")","AccessToDB.Tests.SlopesRepositoryTests.TestGetSlopeByNameAsyncFailsWhenNameNotExists(slopeName: ""slopeName562cb74a-8208-4dda-8fa6-f04558fcd8cd"")",""
"failed","Tue Oct 11 09:19:53 MSK 2022","Tue Oct 11 09:19:53 MSK 2022","502","","SlopesRepositorySuite","","AccessToDB.Tests.SlopesRepositoryTests","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 114, SlopeName = slopeNameba5856ea-ba69-4ff2-9fc9-8eaa6c34fe7b, IsOpen = True, DifficultyLevel = 85, ConnectedLifts =  })","AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 114, SlopeName = slopeNameba5856ea-ba69-4ff2-9fc9-8eaa6c34fe7b, IsOpen = True, DifficultyLevel = 85, ConnectedLifts =  })",""
