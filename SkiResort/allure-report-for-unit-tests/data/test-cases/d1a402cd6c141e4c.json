{"uid":"d1a402cd6c141e4c","name":"AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 91, SlopeName = slopeName547847a3-8782-4f93-872a-df27aaa6f9e2, IsOpen = True, DifficultyLevel = 190, ConnectedLifts =  }, slope2: Slope { SlopeID = 203, SlopeName = slopeName38f5d818-fa0d-4cee-b72e-34feb9f5ed43, IsOpen = False, DifficultyLevel = 149, ConnectedLifts =  }, lift1: Lift { LiftID = 205, LiftName = liftName2bcc858e-fb28-4ad5-a20f-60af534efbc9, IsOpen = True, SeatsAmount = 219, LiftingTime = 44, QueueTime = 254, ConnectedSlopes =  }, lift2: Lift { LiftID = 245, LiftName = liftNameda6ae3a0-499e-48fa-b38b-02904aa08e05, IsOpen = False, SeatsAmount = 32, LiftingTime = 171, QueueTime = 213, ConnectedSlopes =  })","fullName":"AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 91, SlopeName = slopeName547847a3-8782-4f93-872a-df27aaa6f9e2, IsOpen = True, DifficultyLevel = 190, ConnectedLifts =  }, slope2: Slope { SlopeID = 203, SlopeName = slopeName38f5d818-fa0d-4cee-b72e-34feb9f5ed43, IsOpen = False, DifficultyLevel = 149, ConnectedLifts =  }, lift1: Lift { LiftID = 205, LiftName = liftName2bcc858e-fb28-4ad5-a20f-60af534efbc9, IsOpen = True, SeatsAmount = 219, LiftingTime = 44, QueueTime = 254, ConnectedSlopes =  }, lift2: Lift { LiftID = 245, LiftName = liftNameda6ae3a0-499e-48fa-b38b-02904aa08e05, IsOpen = False, SeatsAmount = 32, LiftingTime = 171, QueueTime = 213, ConnectedSlopes =  })","historyId":"AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 91, SlopeName = slopeName547847a3-8782-4f93-872a-df27aaa6f9e2, IsOpen = True, DifficultyLevel = 190, ConnectedLifts =  }, slope2: Slope { SlopeID = 203, SlopeName = slopeName38f5d818-fa0d-4cee-b72e-34feb9f5ed43, IsOpen = False, DifficultyLevel = 149, ConnectedLifts =  }, lift1: Lift { LiftID = 205, LiftName = liftName2bcc858e-fb28-4ad5-a20f-60af534efbc9, IsOpen = True, SeatsAmount = 219, LiftingTime = 44, QueueTime = 254, ConnectedSlopes =  }, lift2: Lift { LiftID = 245, LiftName = liftNameda6ae3a0-499e-48fa-b38b-02904aa08e05, IsOpen = False, SeatsAmount = 32, LiftingTime = 171, QueueTime = 213, ConnectedSlopes =  })","time":{"start":1665502663028,"stop":1665502663037,"duration":9},"status":"failed","statusMessage":"Tarantool returns an error for request with id: 1, code: 0x0000802D  and message: User 'ski_admin' is not found. ","statusTrace":"   at ProGaudi.Tarantool.Client.LogicalConnection.SendRequestImpl[TRequest](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.SendRequestWithEmptyResponse[TRequest](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.LoginIfNotGuest(GreetingsResponse greetings)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.Connect()\r\n   at ProGaudi.Tarantool.Client.LogicalConnectionManager.Connect()\r\n   at ProGaudi.Tarantool.Client.Box.Connect()\r\n   at ProGaudi.Tarantool.Client.Box.Connect(String replicationSource)\r\n   at AccessToDB.TarantoolContext.Initialize(String connection_string) in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB\\TarantoolContext.cs:line 52\r\n   at AccessToDB.TarantoolContext..ctor(String connection_string) in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB\\TarantoolContext.cs:line 32\r\n   at AccessToDB.Tests.LiftsSlopesRepositoryTests..ctor() in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB.Tests\\LiftsSlopesRepositoryTests.cs:line 34\r\n   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"AccessToDB.Tests.LiftsSlopesRepositoryTests"},{"name":"testMethod","value":"AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 91, SlopeName = slopeName547847a3-8782-4f93-872a-df27aaa6f9e2, IsOpen = True, DifficultyLevel = 190, ConnectedLifts =  }, slope2: Slope { SlopeID = 203, SlopeName = slopeName38f5d818-fa0d-4cee-b72e-34feb9f5ed43, IsOpen = False, DifficultyLevel = 149, ConnectedLifts =  }, lift1: Lift { LiftID = 205, LiftName = liftName2bcc858e-fb28-4ad5-a20f-60af534efbc9, IsOpen = True, SeatsAmount = 219, LiftingTime = 44, QueueTime = 254, ConnectedSlopes =  }, lift2: Lift { LiftID = 245, LiftName = liftNameda6ae3a0-499e-48fa-b38b-02904aa08e05, IsOpen = False, SeatsAmount = 32, LiftingTime = 171, QueueTime = 213, ConnectedSlopes =  })"},{"name":"package","value":"AccessToDB.Tests.LiftsSlopesRepositoryTests"},{"name":"suite","value":"LiftsSlopesRepositorySuite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d1a402cd6c141e4c.json","parameterValues":[]}