{"uid":"ca9841cf65d0c9e0","name":"AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 233, SlopeName = slopeName973dd867-79f7-4b9a-8675-10d63fee9d45, IsOpen = True, DifficultyLevel = 148, ConnectedLifts =  }, slope2: Slope { SlopeID = 43, SlopeName = slopeNameee834160-c933-4866-98e2-89c842f9692d, IsOpen = False, DifficultyLevel = 38, ConnectedLifts =  }, lift1: Lift { LiftID = 219, LiftName = liftNamed59576ce-6ac6-42a9-9990-c513bd534f30, IsOpen = True, SeatsAmount = 119, LiftingTime = 106, QueueTime = 226, ConnectedSlopes =  }, lift2: Lift { LiftID = 102, LiftName = liftName624acc60-4cdf-4d48-980b-a972640d48ed, IsOpen = False, SeatsAmount = 24, LiftingTime = 139, QueueTime = 211, ConnectedSlopes =  })","fullName":"AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 233, SlopeName = slopeName973dd867-79f7-4b9a-8675-10d63fee9d45, IsOpen = True, DifficultyLevel = 148, ConnectedLifts =  }, slope2: Slope { SlopeID = 43, SlopeName = slopeNameee834160-c933-4866-98e2-89c842f9692d, IsOpen = False, DifficultyLevel = 38, ConnectedLifts =  }, lift1: Lift { LiftID = 219, LiftName = liftNamed59576ce-6ac6-42a9-9990-c513bd534f30, IsOpen = True, SeatsAmount = 119, LiftingTime = 106, QueueTime = 226, ConnectedSlopes =  }, lift2: Lift { LiftID = 102, LiftName = liftName624acc60-4cdf-4d48-980b-a972640d48ed, IsOpen = False, SeatsAmount = 24, LiftingTime = 139, QueueTime = 211, ConnectedSlopes =  })","historyId":"AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 233, SlopeName = slopeName973dd867-79f7-4b9a-8675-10d63fee9d45, IsOpen = True, DifficultyLevel = 148, ConnectedLifts =  }, slope2: Slope { SlopeID = 43, SlopeName = slopeNameee834160-c933-4866-98e2-89c842f9692d, IsOpen = False, DifficultyLevel = 38, ConnectedLifts =  }, lift1: Lift { LiftID = 219, LiftName = liftNamed59576ce-6ac6-42a9-9990-c513bd534f30, IsOpen = True, SeatsAmount = 119, LiftingTime = 106, QueueTime = 226, ConnectedSlopes =  }, lift2: Lift { LiftID = 102, LiftName = liftName624acc60-4cdf-4d48-980b-a972640d48ed, IsOpen = False, SeatsAmount = 24, LiftingTime = 139, QueueTime = 211, ConnectedSlopes =  })","time":{"start":1665503958390,"stop":1665503958448,"duration":58},"status":"failed","statusMessage":"Operations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection's state is no longer correct.","statusTrace":"   at System.Collections.Generic.Dictionary`2.FindValue(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at ProGaudi.MsgPack.Light.MsgPackContext.GetObjectActivator(Type type)\r\n   at ProGaudi.MsgPack.Light.Converters.ArrayConverter`2.ReadList(IMsgPackReader reader, UInt32 length)\r\n   at ProGaudi.MsgPack.Light.Converters.ArrayConverter`2.ReadArray(IMsgPackReader reader, UInt32 length)\r\n   at ProGaudi.MsgPack.Light.Converters.ArrayConverter`2.Read(IMsgPackReader reader)\r\n   at ProGaudi.Tarantool.Client.Converters.SpaceConverter.Read(IMsgPackReader reader)\r\n   at ProGaudi.MsgPack.Light.Converters.ArrayConverter`2.ReadArray(IMsgPackReader reader, UInt32 length)\r\n   at ProGaudi.MsgPack.Light.Converters.ArrayConverter`2.Read(IMsgPackReader reader)\r\n   at ProGaudi.Tarantool.Client.Converters.ResponsePacketConverter`1.ProGaudi.MsgPack.Light.IMsgPackConverter<ProGaudi.Tarantool.Client.Model.Responses.DataResponse<T>>.Read(IMsgPackReader reader)\r\n   at ProGaudi.MsgPack.Light.MsgPackSerializer.Deserialize[T](MemoryStream stream, MsgPackContext context)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.SendRequest[TRequest,TResponse](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.LogicalConnectionManager.SendRequest[TRequest,TResponse](TRequest request, Nullable`1 timeout)\r\n   at ProGaudi.Tarantool.Client.Schema.Select[T](UInt32 spaceId, Iterator iterator, UInt32 id)\r\n   at ProGaudi.Tarantool.Client.Schema.Reload()\r\n   at ProGaudi.Tarantool.Client.Box.Connect()\r\n   at ProGaudi.Tarantool.Client.Box.Connect(String replicationSource)\r\n   at AccessToDB.TarantoolContext.Initialize(String connection_string) in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB\\TarantoolContext.cs:line 52\r\n   at AccessToDB.TarantoolContext..ctor(String connection_string) in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB\\TarantoolContext.cs:line 32\r\n   at AccessToDB.Tests.LiftsSlopesRepositoryTests..ctor() in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB.Tests\\LiftsSlopesRepositoryTests.cs:line 34\r\n   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"AccessToDB.Tests.LiftsSlopesRepositoryTests"},{"name":"testMethod","value":"AccessToDB.Tests.LiftsSlopesRepositoryTests.TestGetLiftsBySlopeIdAsyncOk(slope1: Slope { SlopeID = 233, SlopeName = slopeName973dd867-79f7-4b9a-8675-10d63fee9d45, IsOpen = True, DifficultyLevel = 148, ConnectedLifts =  }, slope2: Slope { SlopeID = 43, SlopeName = slopeNameee834160-c933-4866-98e2-89c842f9692d, IsOpen = False, DifficultyLevel = 38, ConnectedLifts =  }, lift1: Lift { LiftID = 219, LiftName = liftNamed59576ce-6ac6-42a9-9990-c513bd534f30, IsOpen = True, SeatsAmount = 119, LiftingTime = 106, QueueTime = 226, ConnectedSlopes =  }, lift2: Lift { LiftID = 102, LiftName = liftName624acc60-4cdf-4d48-980b-a972640d48ed, IsOpen = False, SeatsAmount = 24, LiftingTime = 139, QueueTime = 211, ConnectedSlopes =  })"},{"name":"package","value":"AccessToDB.Tests.LiftsSlopesRepositoryTests"},{"name":"suite","value":"LiftsSlopesRepositorySuite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ca9841cf65d0c9e0.json","parameterValues":[]}