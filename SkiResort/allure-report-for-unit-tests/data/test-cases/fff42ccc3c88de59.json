{"uid":"fff42ccc3c88de59","name":"AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 223, SlopeName = slopeName9d64416e-a239-49a6-9222-54bcbd56275f, IsOpen = True, DifficultyLevel = 157, ConnectedLifts =  })","fullName":"AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 223, SlopeName = slopeName9d64416e-a239-49a6-9222-54bcbd56275f, IsOpen = True, DifficultyLevel = 157, ConnectedLifts =  })","historyId":"AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 223, SlopeName = slopeName9d64416e-a239-49a6-9222-54bcbd56275f, IsOpen = True, DifficultyLevel = 157, ConnectedLifts =  })","time":{"start":1665513013617,"stop":1665513034653,"duration":21036},"status":"failed","statusMessage":"Попытка установить соединение была безуспешной, т.к. от другого компьютера за требуемое время не получен нужный отклик, или было разорвано уже установленное соединение из-за неверного отклика уже подключенного компьютера.","statusTrace":"   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Threading.Tasks.ValueTask.ValueTaskSourceAsTask.<>c.<.cctor>b__4_0(Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.Tasks.TaskToApm.End(IAsyncResult asyncResult)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location ---\r\n   at ProGaudi.Tarantool.Client.NetworkStreamPhysicalConnection.Connect(ClientOptions options)\r\n   at ProGaudi.Tarantool.Client.LogicalConnection.Connect()\r\n   at ProGaudi.Tarantool.Client.LogicalConnectionManager.Connect()\r\n   at ProGaudi.Tarantool.Client.Box.Connect()\r\n   at ProGaudi.Tarantool.Client.Box.Connect(String replicationSource)\r\n   at AccessToDB.TarantoolContext.Initialize(String connection_string) in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB\\TarantoolContext.cs:line 52\r\n   at AccessToDB.TarantoolContext..ctor(String connection_string) in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB\\TarantoolContext.cs:line 32\r\n   at AccessToDB.Tests.SlopesRepositoryTests..ctor() in C:\\Users\\alena\\Desktop\\7_sem\\testing_and_debugging\\SkiResort\\AccessToDB.Tests\\SlopesRepositoryTests.cs:line 28\r\n   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"AccessToDB.Tests.SlopesRepositoryTests"},{"name":"testMethod","value":"AccessToDB.Tests.SlopesRepositoryTests.TestAddSlopeAsyncFailsWhenSlopeIdRepeats(slope: Slope { SlopeID = 223, SlopeName = slopeName9d64416e-a239-49a6-9222-54bcbd56275f, IsOpen = True, DifficultyLevel = 157, ConnectedLifts =  })"},{"name":"package","value":"AccessToDB.Tests.SlopesRepositoryTests"},{"name":"suite","value":"SlopesRepositorySuite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fff42ccc3c88de59.json","parameterValues":[]}