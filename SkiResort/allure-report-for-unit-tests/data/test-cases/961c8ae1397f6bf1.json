{"uid":"961c8ae1397f6bf1","name":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 61, initialSlopes: [Slope { SlopeID = 198, SlopeName = slopeName2a7c17a1-5164-4dfa-a77f-6e2970eb33a9, IsOpen = True, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 200, SlopeName = slopeName4d91670e-96a9-49fc-bf68-2f5d7194ac48, IsOpen = False, DifficultyLevel = 172, ConnectedLifts =  }, Slope { SlopeID = 124, SlopeName = slopeName337d9de1-83cd-4fdc-9648-8c28a5a76159, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","fullName":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 61, initialSlopes: [Slope { SlopeID = 198, SlopeName = slopeName2a7c17a1-5164-4dfa-a77f-6e2970eb33a9, IsOpen = True, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 200, SlopeName = slopeName4d91670e-96a9-49fc-bf68-2f5d7194ac48, IsOpen = False, DifficultyLevel = 172, ConnectedLifts =  }, Slope { SlopeID = 124, SlopeName = slopeName337d9de1-83cd-4fdc-9648-8c28a5a76159, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","historyId":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 61, initialSlopes: [Slope { SlopeID = 198, SlopeName = slopeName2a7c17a1-5164-4dfa-a77f-6e2970eb33a9, IsOpen = True, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 200, SlopeName = slopeName4d91670e-96a9-49fc-bf68-2f5d7194ac48, IsOpen = False, DifficultyLevel = 172, ConnectedLifts =  }, Slope { SlopeID = 124, SlopeName = slopeName337d9de1-83cd-4fdc-9648-8c28a5a76159, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })","time":{"start":1665437036892,"stop":1665437036920,"duration":28},"status":"passed","statusMessage":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"thread","value":".NET Long Running Task"},{"name":"host","value":"DESKTOP-TJ9D65N"},{"name":"testClass","value":"BL.Tests.SlopesServiceTest"},{"name":"testMethod","value":"BL.Tests.SlopesServiceTest.TestGetSlopesInfoAsync(userID: 61, initialSlopes: [Slope { SlopeID = 198, SlopeName = slopeName2a7c17a1-5164-4dfa-a77f-6e2970eb33a9, IsOpen = True, DifficultyLevel = 227, ConnectedLifts =  }, Slope { SlopeID = 200, SlopeName = slopeName4d91670e-96a9-49fc-bf68-2f5d7194ac48, IsOpen = False, DifficultyLevel = 172, ConnectedLifts =  }, Slope { SlopeID = 124, SlopeName = slopeName337d9de1-83cd-4fdc-9648-8c28a5a76159, IsOpen = True, DifficultyLevel = 116, ConnectedLifts =  }], checkPermissionServiceMock: Mock<ICheckPermissionService:7>, slopesRepositoryStub: Mock<ISlopesRepository:5>, liftsSlopesRepositoryStub: Mock<ILiftsSlopesRepository:10>, sut: SlopesService { })"},{"name":"package","value":"BL.Tests.SlopesServiceTest"},{"name":"suite","value":"SlopesServiceSuite"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"961c8ae1397f6bf1.json","parameterValues":[]}