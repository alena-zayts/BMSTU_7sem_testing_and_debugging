#!/bin/bash

realpath() {
    canonicalize_path "$(resolve_symlinks "$1")"
}

resolve_symlinks() {
    _resolve_symlinks "$1"
}

_resolve_symlinks() {
    _assert_no_path_cycles "$@" || return

    local dir_context path
    path=$(readlink -- "$1")
    if [ $? = 0 ]; then
        dir_context=$(dirname -- "$1")
        _resolve_symlinks "$(_prepend_dir_context_if_necessary "$dir_context" "$path")" "$@"
    else
        printf '%s\n' "$1"
    fi
}

_prepend_dir_context_if_necessary() {
    if [ "$1" = . ]; then
        printf '%s\n' "$2"
    else
        _prepend_path_if_relative "$1" "$2"
    fi
}

_prepend_path_if_relative() {
    case "$2" in
        /* ) printf '%s\n' "$2" ;;
         * ) printf '%s\n' "$1/$2" ;;
    esac
}

_assert_no_path_cycles() {
    local target path

    target=$1
    shift

    for path in "$@"; do
        if [ "$path" = "$target" ]; then
            return 1
        fi
    done
}

canonicalize_path() {
    if [ -d "$1" ]; then
        _canonicalize_dir_path "$1"
    else
        _canonicalize_file_path "$1"
    fi
}

_canonicalize_dir_path() {
    (cd "$1" 2>/dev/null && pwd -P)
}

_canonicalize_file_path() {
    local dir file
    dir=$(dirname -- "$1")
    file=$(basename -- "$1")
    (cd "$dir" 2>/dev/null >/dev/null && printf '%s/%s\n' "$(pwd -P)" "$file")
}

##############################################################################

SCRIPT_PATH="$(realpath "$0")"
SCRIPT_ROOT="$(dirname "$SCRIPT_PATH")"

# 2>&1 -- redirecting stderr to stdout. /dev/null -- ignore
# docker network inspect -- Returns information about one or more networks
# docker network create
# Creates a new network. The DRIVER accepts bridge or overlay which are the built-in network drivers.
# We donâ€™t specify the --driver option, the command automatically creates a bridge network
if ! docker network inspect bm >/dev/null 2>&1; then
  docker network create bm >/dev/null
fi

# test -t FD: True if FD is a file descriptor that is associated with a terminal.
test -t 1 && USE_TTY="-t"

# docker build -- Build an image from a Dockerfile
# -t		Name and optionally a tag in the 'name:tag' format
# -< -- Instead of specifying a context, you can pass a single Dockerfile via STDIN:
# docker build - < Dockerfile
docker build -t my_bm/bm - < ${SCRIPT_ROOT}/Dockerfile

#-i -t tells docker to run this in 'interactive' mode and simulate a TTY, so that ctrl+c is propagated.
#--rm tells docker to remove the container as soon as the toolset finishes running, meaning there aren't hundreds of stopped containers lying around.
#--network x tells the container to join the 'x' Docker virtual network
# The first -v specifies which Docker socket path to mount as a volume in the running container.
# This allows docker commands run inside this container to use the host container's docker to create/run/stop/remove containers.
# The second -v mounts the MyBenchmark source directory as a volume to share with the container so that
# rebuilding the toolset image is unnecessary and any changes you make on the host system are available in the running toolset container.
# my_bm/bm is the name of toolset container to run
exec docker run -i ${USE_TTY} --rm --network bm -v /var/run/docker.sock:/var/run/docker.sock -v ${SCRIPT_ROOT}:/MyBenchmark my_bm/bm "${@}"
